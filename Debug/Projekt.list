
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f00  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  0800a0d0  0800a0d0  0001a0d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a49c  0800a49c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a49c  0800a49c  0001a49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4a4  0800a4a4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4a4  0800a4a4  0001a4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4a8  0800a4a8  0001a4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a4ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000820  200001dc  0800a688  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009fc  0800a688  000209fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016fc4  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ef5  00000000  00000000  00037213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  0003a108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ffe  00000000  00000000  0003b580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028454  00000000  00000000  0003c57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019b22  00000000  00000000  000649d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f61a1  00000000  00000000  0007e4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000695c  00000000  00000000  00174698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0017aff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a0b8 	.word	0x0800a0b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800a0b8 	.word	0x0800a0b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9bb 	b.w	8001020 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b970 	b.w	8001020 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	460d      	mov	r5, r1
 8000d60:	4604      	mov	r4, r0
 8000d62:	460f      	mov	r7, r1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d14a      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4694      	mov	ip, r2
 8000d6c:	d965      	bls.n	8000e3a <__udivmoddi4+0xe2>
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	b143      	cbz	r3, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d78:	f1c3 0220 	rsb	r2, r3, #32
 8000d7c:	409f      	lsls	r7, r3
 8000d7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d82:	4317      	orrs	r7, r2
 8000d84:	409c      	lsls	r4, r3
 8000d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d8a:	fa1f f58c 	uxth.w	r5, ip
 8000d8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d92:	0c22      	lsrs	r2, r4, #16
 8000d94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d9c:	fb01 f005 	mul.w	r0, r1, r5
 8000da0:	4290      	cmp	r0, r2
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x62>
 8000da4:	eb1c 0202 	adds.w	r2, ip, r2
 8000da8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dac:	f080 811c 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000db0:	4290      	cmp	r0, r2
 8000db2:	f240 8119 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000db6:	3902      	subs	r1, #2
 8000db8:	4462      	add	r2, ip
 8000dba:	1a12      	subs	r2, r2, r0
 8000dbc:	b2a4      	uxth	r4, r4
 8000dbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dca:	fb00 f505 	mul.w	r5, r0, r5
 8000dce:	42a5      	cmp	r5, r4
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x90>
 8000dd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dda:	f080 8107 	bcs.w	8000fec <__udivmoddi4+0x294>
 8000dde:	42a5      	cmp	r5, r4
 8000de0:	f240 8104 	bls.w	8000fec <__udivmoddi4+0x294>
 8000de4:	4464      	add	r4, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dec:	1b64      	subs	r4, r4, r5
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11e      	cbz	r6, 8000dfa <__udivmoddi4+0xa2>
 8000df2:	40dc      	lsrs	r4, r3
 8000df4:	2300      	movs	r3, #0
 8000df6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0xbc>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80ed 	beq.w	8000fe2 <__udivmoddi4+0x28a>
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e14:	fab3 f183 	clz	r1, r3
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	d149      	bne.n	8000eb0 <__udivmoddi4+0x158>
 8000e1c:	42ab      	cmp	r3, r5
 8000e1e:	d302      	bcc.n	8000e26 <__udivmoddi4+0xce>
 8000e20:	4282      	cmp	r2, r0
 8000e22:	f200 80f8 	bhi.w	8001016 <__udivmoddi4+0x2be>
 8000e26:	1a84      	subs	r4, r0, r2
 8000e28:	eb65 0203 	sbc.w	r2, r5, r3
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	4617      	mov	r7, r2
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d0e2      	beq.n	8000dfa <__udivmoddi4+0xa2>
 8000e34:	e9c6 4700 	strd	r4, r7, [r6]
 8000e38:	e7df      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e3a:	b902      	cbnz	r2, 8000e3e <__udivmoddi4+0xe6>
 8000e3c:	deff      	udf	#255	; 0xff
 8000e3e:	fab2 f382 	clz	r3, r2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e48:	1a8a      	subs	r2, r1, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	2101      	movs	r1, #1
 8000e54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e58:	fb07 2015 	mls	r0, r7, r5, r2
 8000e5c:	0c22      	lsrs	r2, r4, #16
 8000e5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e62:	fb0e f005 	mul.w	r0, lr, r5
 8000e66:	4290      	cmp	r0, r2
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4290      	cmp	r0, r2
 8000e76:	f200 80cb 	bhi.w	8001010 <__udivmoddi4+0x2b8>
 8000e7a:	4645      	mov	r5, r8
 8000e7c:	1a12      	subs	r2, r2, r0
 8000e7e:	b2a4      	uxth	r4, r4
 8000e80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e84:	fb07 2210 	mls	r2, r7, r0, r2
 8000e88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e90:	45a6      	cmp	lr, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x14e>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e9c:	d202      	bcs.n	8000ea4 <__udivmoddi4+0x14c>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	f200 80bb 	bhi.w	800101a <__udivmoddi4+0x2c2>
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	eba4 040e 	sub.w	r4, r4, lr
 8000eaa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eae:	e79f      	b.n	8000df0 <__udivmoddi4+0x98>
 8000eb0:	f1c1 0720 	rsb	r7, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ebe:	fa05 f401 	lsl.w	r4, r5, r1
 8000ec2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec6:	40fd      	lsrs	r5, r7
 8000ec8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ee0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee4:	42a5      	cmp	r5, r4
 8000ee6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eea:	fa00 f001 	lsl.w	r0, r0, r1
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ef8:	f080 8088 	bcs.w	800100c <__udivmoddi4+0x2b4>
 8000efc:	42a5      	cmp	r5, r4
 8000efe:	f240 8085 	bls.w	800100c <__udivmoddi4+0x2b4>
 8000f02:	f1a8 0802 	sub.w	r8, r8, #2
 8000f06:	4464      	add	r4, ip
 8000f08:	1b64      	subs	r4, r4, r5
 8000f0a:	b29d      	uxth	r5, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f1c:	45a6      	cmp	lr, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f28:	d26c      	bcs.n	8001004 <__udivmoddi4+0x2ac>
 8000f2a:	45a6      	cmp	lr, r4
 8000f2c:	d96a      	bls.n	8001004 <__udivmoddi4+0x2ac>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	4464      	add	r4, ip
 8000f32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f36:	fba3 9502 	umull	r9, r5, r3, r2
 8000f3a:	eba4 040e 	sub.w	r4, r4, lr
 8000f3e:	42ac      	cmp	r4, r5
 8000f40:	46c8      	mov	r8, r9
 8000f42:	46ae      	mov	lr, r5
 8000f44:	d356      	bcc.n	8000ff4 <__udivmoddi4+0x29c>
 8000f46:	d053      	beq.n	8000ff0 <__udivmoddi4+0x298>
 8000f48:	b156      	cbz	r6, 8000f60 <__udivmoddi4+0x208>
 8000f4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f52:	fa04 f707 	lsl.w	r7, r4, r7
 8000f56:	40ca      	lsrs	r2, r1
 8000f58:	40cc      	lsrs	r4, r1
 8000f5a:	4317      	orrs	r7, r2
 8000f5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f60:	4618      	mov	r0, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f68:	f1c3 0120 	rsb	r1, r3, #32
 8000f6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f70:	fa20 f201 	lsr.w	r2, r0, r1
 8000f74:	fa25 f101 	lsr.w	r1, r5, r1
 8000f78:	409d      	lsls	r5, r3
 8000f7a:	432a      	orrs	r2, r5
 8000f7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f80:	fa1f fe8c 	uxth.w	lr, ip
 8000f84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f88:	fb07 1510 	mls	r5, r7, r0, r1
 8000f8c:	0c11      	lsrs	r1, r2, #16
 8000f8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f92:	fb00 f50e 	mul.w	r5, r0, lr
 8000f96:	428d      	cmp	r5, r1
 8000f98:	fa04 f403 	lsl.w	r4, r4, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x258>
 8000f9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa6:	d22f      	bcs.n	8001008 <__udivmoddi4+0x2b0>
 8000fa8:	428d      	cmp	r5, r1
 8000faa:	d92d      	bls.n	8001008 <__udivmoddi4+0x2b0>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4461      	add	r1, ip
 8000fb0:	1b49      	subs	r1, r1, r5
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc4:	4291      	cmp	r1, r2
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x282>
 8000fc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fcc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fd0:	d216      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	d914      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000fd6:	3d02      	subs	r5, #2
 8000fd8:	4462      	add	r2, ip
 8000fda:	1a52      	subs	r2, r2, r1
 8000fdc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fe0:	e738      	b.n	8000e54 <__udivmoddi4+0xfc>
 8000fe2:	4631      	mov	r1, r6
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e708      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000fe8:	4639      	mov	r1, r7
 8000fea:	e6e6      	b.n	8000dba <__udivmoddi4+0x62>
 8000fec:	4610      	mov	r0, r2
 8000fee:	e6fb      	b.n	8000de8 <__udivmoddi4+0x90>
 8000ff0:	4548      	cmp	r0, r9
 8000ff2:	d2a9      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	e7a3      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8001000:	4645      	mov	r5, r8
 8001002:	e7ea      	b.n	8000fda <__udivmoddi4+0x282>
 8001004:	462b      	mov	r3, r5
 8001006:	e794      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001008:	4640      	mov	r0, r8
 800100a:	e7d1      	b.n	8000fb0 <__udivmoddi4+0x258>
 800100c:	46d0      	mov	r8, sl
 800100e:	e77b      	b.n	8000f08 <__udivmoddi4+0x1b0>
 8001010:	3d02      	subs	r5, #2
 8001012:	4462      	add	r2, ip
 8001014:	e732      	b.n	8000e7c <__udivmoddi4+0x124>
 8001016:	4608      	mov	r0, r1
 8001018:	e70a      	b.n	8000e30 <__udivmoddi4+0xd8>
 800101a:	4464      	add	r4, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e742      	b.n	8000ea6 <__udivmoddi4+0x14e>

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af04      	add	r7, sp, #16
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <BMP280_Read8+0x38>)
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	b29a      	uxth	r2, r3
 800103a:	230a      	movs	r3, #10
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	2301      	movs	r3, #1
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	f107 030f 	add.w	r3, r7, #15
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	21ec      	movs	r1, #236	; 0xec
 800104c:	f002 fae6 	bl	800361c <HAL_I2C_Mem_Read>
  return tmp;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200001f8 	.word	0x200001f8

08001060 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af04      	add	r7, sp, #16
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <BMP280_Read16+0x40>)
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	b29a      	uxth	r2, r3
 8001072:	230a      	movs	r3, #10
 8001074:	9302      	str	r3, [sp, #8]
 8001076:	2302      	movs	r3, #2
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2301      	movs	r3, #1
 8001082:	21ec      	movs	r1, #236	; 0xec
 8001084:	f002 faca 	bl	800361c <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8001088:	7b3b      	ldrb	r3, [r7, #12]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21a      	sxth	r2, r3
 800108e:	7b7b      	ldrb	r3, [r7, #13]
 8001090:	b21b      	sxth	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b21b      	sxth	r3, r3
 8001096:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200001f8 	.word	0x200001f8

080010a4 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ffd5 	bl	8001060 <BMP280_Read16>
 80010b6:	4603      	mov	r3, r0
 80010b8:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 80010ba:	89fb      	ldrh	r3, [r7, #14]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	b29b      	uxth	r3, r3
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	89fb      	ldrh	r3, [r7, #14]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	b29b      	uxth	r3, r3
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af04      	add	r7, sp, #16
 80010de:	4603      	mov	r3, r0
 80010e0:	460a      	mov	r2, r1
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	4613      	mov	r3, r2
 80010e6:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <BMP280_Write8+0x34>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	230a      	movs	r3, #10
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2301      	movs	r3, #1
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	1dbb      	adds	r3, r7, #6
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	21ec      	movs	r1, #236	; 0xec
 8001100:	f002 f978 	bl	80033f4 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200001f8 	.word	0x200001f8

08001110 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af04      	add	r7, sp, #16
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <BMP280_Read24+0x40>)
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	b29a      	uxth	r2, r3
 8001122:	230a      	movs	r3, #10
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	2303      	movs	r3, #3
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2301      	movs	r3, #1
 8001132:	21ec      	movs	r1, #236	; 0xec
 8001134:	f002 fa72 	bl	800361c <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001138:	7b3b      	ldrb	r3, [r7, #12]
 800113a:	041a      	lsls	r2, r3, #16
 800113c:	7b7b      	ldrb	r3, [r7, #13]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	4313      	orrs	r3, r2
 8001142:	7bba      	ldrb	r2, [r7, #14]
 8001144:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200001f8 	.word	0x200001f8

08001154 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4603      	mov	r3, r0
 8001164:	70fb      	strb	r3, [r7, #3]
 8001166:	460b      	mov	r3, r1
 8001168:	70bb      	strb	r3, [r7, #2]
 800116a:	4613      	mov	r3, r2
 800116c:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 800116e:	4a48      	ldr	r2, [pc, #288]	; (8001290 <BMP280_Init+0x13c>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 8001174:	787b      	ldrb	r3, [r7, #1]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d901      	bls.n	800117e <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 800117a:	2303      	movs	r3, #3
 800117c:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 800117e:	4a45      	ldr	r2, [pc, #276]	; (8001294 <BMP280_Init+0x140>)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8001184:	787b      	ldrb	r3, [r7, #1]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d101      	bne.n	800118e <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 800118a:	2300      	movs	r3, #0
 800118c:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	2b05      	cmp	r3, #5
 8001192:	d901      	bls.n	8001198 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8001194:	2305      	movs	r3, #5
 8001196:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8001198:	4a3f      	ldr	r2, [pc, #252]	; (8001298 <BMP280_Init+0x144>)
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 800119e:	78bb      	ldrb	r3, [r7, #2]
 80011a0:	2b05      	cmp	r3, #5
 80011a2:	d901      	bls.n	80011a8 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80011a4:	2305      	movs	r3, #5
 80011a6:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80011a8:	4a3c      	ldr	r2, [pc, #240]	; (800129c <BMP280_Init+0x148>)
 80011aa:	78bb      	ldrb	r3, [r7, #2]
 80011ac:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80011ae:	bf00      	nop
 80011b0:	20d0      	movs	r0, #208	; 0xd0
 80011b2:	f7ff ff37 	bl	8001024 <BMP280_Read8>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b58      	cmp	r3, #88	; 0x58
 80011ba:	d1f9      	bne.n	80011b0 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80011bc:	2088      	movs	r0, #136	; 0x88
 80011be:	f7ff ff71 	bl	80010a4 <BMP280_Read16LE>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <BMP280_Init+0x14c>)
 80011c8:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 80011ca:	208a      	movs	r0, #138	; 0x8a
 80011cc:	f7ff ff6a 	bl	80010a4 <BMP280_Read16LE>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	4b33      	ldr	r3, [pc, #204]	; (80012a4 <BMP280_Init+0x150>)
 80011d6:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 80011d8:	208c      	movs	r0, #140	; 0x8c
 80011da:	f7ff ff63 	bl	80010a4 <BMP280_Read16LE>
 80011de:	4603      	mov	r3, r0
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	4b31      	ldr	r3, [pc, #196]	; (80012a8 <BMP280_Init+0x154>)
 80011e4:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 80011e6:	208e      	movs	r0, #142	; 0x8e
 80011e8:	f7ff ff5c 	bl	80010a4 <BMP280_Read16LE>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <BMP280_Init+0x158>)
 80011f2:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80011f4:	2090      	movs	r0, #144	; 0x90
 80011f6:	f7ff ff55 	bl	80010a4 <BMP280_Read16LE>
 80011fa:	4603      	mov	r3, r0
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <BMP280_Init+0x15c>)
 8001200:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001202:	2092      	movs	r0, #146	; 0x92
 8001204:	f7ff ff4e 	bl	80010a4 <BMP280_Read16LE>
 8001208:	4603      	mov	r3, r0
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <BMP280_Init+0x160>)
 800120e:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001210:	2094      	movs	r0, #148	; 0x94
 8001212:	f7ff ff47 	bl	80010a4 <BMP280_Read16LE>
 8001216:	4603      	mov	r3, r0
 8001218:	b21a      	sxth	r2, r3
 800121a:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <BMP280_Init+0x164>)
 800121c:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800121e:	2096      	movs	r0, #150	; 0x96
 8001220:	f7ff ff40 	bl	80010a4 <BMP280_Read16LE>
 8001224:	4603      	mov	r3, r0
 8001226:	b21a      	sxth	r2, r3
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <BMP280_Init+0x168>)
 800122a:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 800122c:	2098      	movs	r0, #152	; 0x98
 800122e:	f7ff ff39 	bl	80010a4 <BMP280_Read16LE>
 8001232:	4603      	mov	r3, r0
 8001234:	b21a      	sxth	r2, r3
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <BMP280_Init+0x16c>)
 8001238:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 800123a:	209a      	movs	r0, #154	; 0x9a
 800123c:	f7ff ff32 	bl	80010a4 <BMP280_Read16LE>
 8001240:	4603      	mov	r3, r0
 8001242:	b21a      	sxth	r2, r3
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <BMP280_Init+0x170>)
 8001246:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001248:	209c      	movs	r0, #156	; 0x9c
 800124a:	f7ff ff2b 	bl	80010a4 <BMP280_Read16LE>
 800124e:	4603      	mov	r3, r0
 8001250:	b21a      	sxth	r2, r3
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <BMP280_Init+0x174>)
 8001254:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8001256:	209e      	movs	r0, #158	; 0x9e
 8001258:	f7ff ff24 	bl	80010a4 <BMP280_Read16LE>
 800125c:	4603      	mov	r3, r0
 800125e:	b21a      	sxth	r2, r3
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <BMP280_Init+0x178>)
 8001262:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	015b      	lsls	r3, r3, #5
 8001268:	b25a      	sxtb	r2, r3
 800126a:	78bb      	ldrb	r3, [r7, #2]
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	b25b      	sxtb	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	b25a      	sxtb	r2, r3
 8001274:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001278:	4313      	orrs	r3, r2
 800127a:	b25b      	sxtb	r3, r3
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4619      	mov	r1, r3
 8001280:	20f4      	movs	r0, #244	; 0xf4
 8001282:	f7ff ff29 	bl	80010d8 <BMP280_Write8>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200001f8 	.word	0x200001f8
 8001294:	200001fe 	.word	0x200001fe
 8001298:	200001fc 	.word	0x200001fc
 800129c:	200001fd 	.word	0x200001fd
 80012a0:	20000214 	.word	0x20000214
 80012a4:	20000200 	.word	0x20000200
 80012a8:	20000202 	.word	0x20000202
 80012ac:	20000216 	.word	0x20000216
 80012b0:	20000204 	.word	0x20000204
 80012b4:	20000206 	.word	0x20000206
 80012b8:	20000208 	.word	0x20000208
 80012bc:	2000020a 	.word	0x2000020a
 80012c0:	2000020c 	.word	0x2000020c
 80012c4:	2000020e 	.word	0x2000020e
 80012c8:	20000210 	.word	0x20000210
 80012cc:	20000212 	.word	0x20000212

080012d0 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 80012d6:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <BMP280_ReadTemperature+0xfc>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d16d      	bne.n	80013ba <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 80012de:	20f4      	movs	r0, #244	; 0xf4
 80012e0:	f7ff fea0 	bl	8001024 <BMP280_Read8>
 80012e4:	4603      	mov	r3, r0
 80012e6:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	f023 0303 	bic.w	r3, r3, #3
 80012ee:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	4619      	mov	r1, r3
 80012fc:	20f4      	movs	r0, #244	; 0xf4
 80012fe:	f7ff feeb 	bl	80010d8 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 8001302:	20f4      	movs	r0, #244	; 0xf4
 8001304:	f7ff fe8e 	bl	8001024 <BMP280_Read8>
 8001308:	4603      	mov	r3, r0
 800130a:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 800130c:	7dbb      	ldrb	r3, [r7, #22]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001314:	7dbb      	ldrb	r3, [r7, #22]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d14f      	bne.n	80013ba <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 800131a:	20f4      	movs	r0, #244	; 0xf4
 800131c:	f7ff fe82 	bl	8001024 <BMP280_Read8>
 8001320:	4603      	mov	r3, r0
 8001322:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001324:	7dbb      	ldrb	r3, [r7, #22]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 800132c:	7dbb      	ldrb	r3, [r7, #22]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d000      	beq.n	8001334 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001332:	e7f2      	b.n	800131a <BMP280_ReadTemperature+0x4a>
				  break;
 8001334:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001336:	20fa      	movs	r0, #250	; 0xfa
 8001338:	f7ff feea 	bl	8001110 <BMP280_Read24>
 800133c:	4603      	mov	r3, r0
 800133e:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	111b      	asrs	r3, r3, #4
 8001344:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	10da      	asrs	r2, r3, #3
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <BMP280_ReadTemperature+0x100>)
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 8001352:	4a20      	ldr	r2, [pc, #128]	; (80013d4 <BMP280_ReadTemperature+0x104>)
 8001354:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	12db      	asrs	r3, r3, #11
 800135e:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	111b      	asrs	r3, r3, #4
 8001364:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <BMP280_ReadTemperature+0x100>)
 8001366:	8812      	ldrh	r2, [r2, #0]
 8001368:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	1112      	asrs	r2, r2, #4
 800136e:	4918      	ldr	r1, [pc, #96]	; (80013d0 <BMP280_ReadTemperature+0x100>)
 8001370:	8809      	ldrh	r1, [r1, #0]
 8001372:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001374:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001378:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 800137a:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <BMP280_ReadTemperature+0x108>)
 800137c:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001380:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001384:	139b      	asrs	r3, r3, #14
 8001386:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	4413      	add	r3, r2
 800138e:	4a13      	ldr	r2, [pc, #76]	; (80013dc <BMP280_ReadTemperature+0x10c>)
 8001390:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <BMP280_ReadTemperature+0x10c>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	3380      	adds	r3, #128	; 0x80
 800139e:	121b      	asrs	r3, r3, #8
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a8:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80013ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80013e0 <BMP280_ReadTemperature+0x110>
 80013b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013b8:	e001      	b.n	80013be <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 80013ba:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80013e4 <BMP280_ReadTemperature+0x114>
}
 80013be:	eef0 7a47 	vmov.f32	s15, s14
 80013c2:	eeb0 0a67 	vmov.f32	s0, s15
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200001fe 	.word	0x200001fe
 80013d0:	20000214 	.word	0x20000214
 80013d4:	20000200 	.word	0x20000200
 80013d8:	20000202 	.word	0x20000202
 80013dc:	20000218 	.word	0x20000218
 80013e0:	42c80000 	.word	0x42c80000
 80013e4:	c2c60000 	.word	0xc2c60000

080013e8 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 80013e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013ec:	b0cc      	sub	sp, #304	; 0x130
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80013f4:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 80013f8:	f7ff ff6a 	bl	80012d0 <BMP280_ReadTemperature>
 80013fc:	eef0 7a40 	vmov.f32	s15, s0
 8001400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001404:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8001408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800140c:	edd3 7a00 	vldr	s15, [r3]
 8001410:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 80016e0 <BMP280_ReadTemperatureAndPressure+0x2f8>
 8001414:	eef4 7a47 	vcmp.f32	s15, s14
 8001418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141c:	d101      	bne.n	8001422 <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 800141e:	23ff      	movs	r3, #255	; 0xff
 8001420:	e2bf      	b.n	80019a2 <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8001422:	20f7      	movs	r0, #247	; 0xf7
 8001424:	f7ff fe74 	bl	8001110 <BMP280_Read24>
 8001428:	4603      	mov	r3, r0
 800142a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 800142e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001432:	111b      	asrs	r3, r3, #4
 8001434:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8001438:	4baa      	ldr	r3, [pc, #680]	; (80016e4 <BMP280_ReadTemperatureAndPressure+0x2fc>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	17da      	asrs	r2, r3, #31
 800143e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001442:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001446:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800144a:	460b      	mov	r3, r1
 800144c:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001450:	64bb      	str	r3, [r7, #72]	; 0x48
 8001452:	4613      	mov	r3, r2
 8001454:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001458:	64fb      	str	r3, [r7, #76]	; 0x4c
 800145a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800145e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 8001462:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001466:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800146a:	fb03 f102 	mul.w	r1, r3, r2
 800146e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001472:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	18ca      	adds	r2, r1, r3
 800147c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001480:	fba3 4503 	umull	r4, r5, r3, r3
 8001484:	1953      	adds	r3, r2, r5
 8001486:	461d      	mov	r5, r3
 8001488:	4b97      	ldr	r3, [pc, #604]	; (80016e8 <BMP280_ReadTemperatureAndPressure+0x300>)
 800148a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148e:	b21b      	sxth	r3, r3
 8001490:	17da      	asrs	r2, r3, #31
 8001492:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001496:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800149a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800149e:	4603      	mov	r3, r0
 80014a0:	fb03 f205 	mul.w	r2, r3, r5
 80014a4:	460b      	mov	r3, r1
 80014a6:	fb04 f303 	mul.w	r3, r4, r3
 80014aa:	4413      	add	r3, r2
 80014ac:	4602      	mov	r2, r0
 80014ae:	fba4 8902 	umull	r8, r9, r4, r2
 80014b2:	444b      	add	r3, r9
 80014b4:	4699      	mov	r9, r3
 80014b6:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 80014ba:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 80014be:	4b8b      	ldr	r3, [pc, #556]	; (80016ec <BMP280_ReadTemperatureAndPressure+0x304>)
 80014c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	17da      	asrs	r2, r3, #31
 80014c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80014d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014d4:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80014d8:	462a      	mov	r2, r5
 80014da:	fb02 f203 	mul.w	r2, r2, r3
 80014de:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014e2:	4621      	mov	r1, r4
 80014e4:	fb01 f303 	mul.w	r3, r1, r3
 80014e8:	441a      	add	r2, r3
 80014ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014ee:	4621      	mov	r1, r4
 80014f0:	fba3 ab01 	umull	sl, fp, r3, r1
 80014f4:	eb02 030b 	add.w	r3, r2, fp
 80014f8:	469b      	mov	fp, r3
 80014fa:	f04f 0000 	mov.w	r0, #0
 80014fe:	f04f 0100 	mov.w	r1, #0
 8001502:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001506:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 800150a:	ea4f 404a 	mov.w	r0, sl, lsl #17
 800150e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001512:	1814      	adds	r4, r2, r0
 8001514:	643c      	str	r4, [r7, #64]	; 0x40
 8001516:	414b      	adcs	r3, r1
 8001518:	647b      	str	r3, [r7, #68]	; 0x44
 800151a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800151e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 8001522:	4b73      	ldr	r3, [pc, #460]	; (80016f0 <BMP280_ReadTemperatureAndPressure+0x308>)
 8001524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001528:	b21b      	sxth	r3, r3
 800152a:	17da      	asrs	r2, r3, #31
 800152c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001530:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001534:	f04f 0000 	mov.w	r0, #0
 8001538:	f04f 0100 	mov.w	r1, #0
 800153c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001540:	00d9      	lsls	r1, r3, #3
 8001542:	2000      	movs	r0, #0
 8001544:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001548:	1814      	adds	r4, r2, r0
 800154a:	63bc      	str	r4, [r7, #56]	; 0x38
 800154c:	414b      	adcs	r3, r1
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001550:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001554:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001558:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800155c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001560:	fb03 f102 	mul.w	r1, r3, r2
 8001564:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001568:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800156c:	fb02 f303 	mul.w	r3, r2, r3
 8001570:	18ca      	adds	r2, r1, r3
 8001572:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001576:	fba3 1303 	umull	r1, r3, r3, r3
 800157a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800157e:	460b      	mov	r3, r1
 8001580:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001588:	18d3      	adds	r3, r2, r3
 800158a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800158e:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <BMP280_ReadTemperatureAndPressure+0x30c>)
 8001590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001594:	b21b      	sxth	r3, r3
 8001596:	17da      	asrs	r2, r3, #31
 8001598:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800159c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80015a0:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80015a4:	462b      	mov	r3, r5
 80015a6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80015aa:	4642      	mov	r2, r8
 80015ac:	fb02 f203 	mul.w	r2, r2, r3
 80015b0:	464b      	mov	r3, r9
 80015b2:	4621      	mov	r1, r4
 80015b4:	fb01 f303 	mul.w	r3, r1, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	4622      	mov	r2, r4
 80015bc:	4641      	mov	r1, r8
 80015be:	fba2 1201 	umull	r1, r2, r2, r1
 80015c2:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80015c6:	460a      	mov	r2, r1
 80015c8:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80015cc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80015d0:	4413      	add	r3, r2
 80015d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015d6:	f04f 0000 	mov.w	r0, #0
 80015da:	f04f 0100 	mov.w	r1, #0
 80015de:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80015e2:	4623      	mov	r3, r4
 80015e4:	0a18      	lsrs	r0, r3, #8
 80015e6:	462b      	mov	r3, r5
 80015e8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015ec:	462b      	mov	r3, r5
 80015ee:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 80015f0:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <BMP280_ReadTemperatureAndPressure+0x310>)
 80015f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	17da      	asrs	r2, r3, #31
 80015fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80015fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001602:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001606:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800160a:	464a      	mov	r2, r9
 800160c:	fb02 f203 	mul.w	r2, r2, r3
 8001610:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001614:	4644      	mov	r4, r8
 8001616:	fb04 f303 	mul.w	r3, r4, r3
 800161a:	441a      	add	r2, r3
 800161c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001620:	4644      	mov	r4, r8
 8001622:	fba3 4304 	umull	r4, r3, r3, r4
 8001626:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800162a:	4623      	mov	r3, r4
 800162c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001634:	18d3      	adds	r3, r2, r3
 8001636:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001646:	464c      	mov	r4, r9
 8001648:	0323      	lsls	r3, r4, #12
 800164a:	4644      	mov	r4, r8
 800164c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001650:	4644      	mov	r4, r8
 8001652:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001654:	1884      	adds	r4, r0, r2
 8001656:	633c      	str	r4, [r7, #48]	; 0x30
 8001658:	eb41 0303 	adc.w	r3, r1, r3
 800165c:	637b      	str	r3, [r7, #52]	; 0x34
 800165e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001662:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8001666:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800166a:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800166e:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8001672:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <BMP280_ReadTemperatureAndPressure+0x314>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	b29b      	uxth	r3, r3
 800167c:	2200      	movs	r2, #0
 800167e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001682:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001686:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800168a:	462b      	mov	r3, r5
 800168c:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8001690:	4642      	mov	r2, r8
 8001692:	fb02 f203 	mul.w	r2, r2, r3
 8001696:	464b      	mov	r3, r9
 8001698:	4621      	mov	r1, r4
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	4413      	add	r3, r2
 80016a0:	4622      	mov	r2, r4
 80016a2:	4641      	mov	r1, r8
 80016a4:	fba2 1201 	umull	r1, r2, r2, r1
 80016a8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80016ac:	460a      	mov	r2, r1
 80016ae:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80016b2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80016b6:	4413      	add	r3, r2
 80016b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80016c8:	4629      	mov	r1, r5
 80016ca:	104a      	asrs	r2, r1, #1
 80016cc:	4629      	mov	r1, r5
 80016ce:	17cb      	asrs	r3, r1, #31
 80016d0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 80016d4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016d8:	4313      	orrs	r3, r2
 80016da:	d111      	bne.n	8001700 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 80016dc:	2300      	movs	r3, #0
 80016de:	e160      	b.n	80019a2 <BMP280_ReadTemperatureAndPressure+0x5ba>
 80016e0:	c2c60000 	.word	0xc2c60000
 80016e4:	20000218 	.word	0x20000218
 80016e8:	2000020c 	.word	0x2000020c
 80016ec:	2000020a 	.word	0x2000020a
 80016f0:	20000208 	.word	0x20000208
 80016f4:	20000206 	.word	0x20000206
 80016f8:	20000204 	.word	0x20000204
 80016fc:	20000216 	.word	0x20000216
	  }
	  p = 1048576 - adc_P;
 8001700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001704:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001708:	17da      	asrs	r2, r3, #31
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
 800170c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800170e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001712:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 8001716:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800171a:	105b      	asrs	r3, r3, #1
 800171c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001720:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001724:	07db      	lsls	r3, r3, #31
 8001726:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800172a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800172e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001732:	4621      	mov	r1, r4
 8001734:	1a89      	subs	r1, r1, r2
 8001736:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800173a:	4629      	mov	r1, r5
 800173c:	eb61 0303 	sbc.w	r3, r1, r3
 8001740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001744:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001748:	4622      	mov	r2, r4
 800174a:	462b      	mov	r3, r5
 800174c:	1891      	adds	r1, r2, r2
 800174e:	6239      	str	r1, [r7, #32]
 8001750:	415b      	adcs	r3, r3
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
 8001754:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001758:	4621      	mov	r1, r4
 800175a:	1851      	adds	r1, r2, r1
 800175c:	61b9      	str	r1, [r7, #24]
 800175e:	4629      	mov	r1, r5
 8001760:	414b      	adcs	r3, r1
 8001762:	61fb      	str	r3, [r7, #28]
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001770:	4649      	mov	r1, r9
 8001772:	018b      	lsls	r3, r1, #6
 8001774:	4641      	mov	r1, r8
 8001776:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800177a:	4641      	mov	r1, r8
 800177c:	018a      	lsls	r2, r1, #6
 800177e:	4641      	mov	r1, r8
 8001780:	1889      	adds	r1, r1, r2
 8001782:	6139      	str	r1, [r7, #16]
 8001784:	4649      	mov	r1, r9
 8001786:	eb43 0101 	adc.w	r1, r3, r1
 800178a:	6179      	str	r1, [r7, #20]
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001798:	4649      	mov	r1, r9
 800179a:	008b      	lsls	r3, r1, #2
 800179c:	4641      	mov	r1, r8
 800179e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017a2:	4641      	mov	r1, r8
 80017a4:	008a      	lsls	r2, r1, #2
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	4603      	mov	r3, r0
 80017ac:	4622      	mov	r2, r4
 80017ae:	189b      	adds	r3, r3, r2
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	460b      	mov	r3, r1
 80017b4:	462a      	mov	r2, r5
 80017b6:	eb42 0303 	adc.w	r3, r2, r3
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017c8:	4649      	mov	r1, r9
 80017ca:	008b      	lsls	r3, r1, #2
 80017cc:	4641      	mov	r1, r8
 80017ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017d2:	4641      	mov	r1, r8
 80017d4:	008a      	lsls	r2, r1, #2
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	4603      	mov	r3, r0
 80017dc:	4622      	mov	r2, r4
 80017de:	189b      	adds	r3, r3, r2
 80017e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80017e2:	462b      	mov	r3, r5
 80017e4:	460a      	mov	r2, r1
 80017e6:	eb42 0303 	adc.w	r3, r2, r3
 80017ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017ec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80017f4:	f7ff fa48 	bl	8000c88 <__aeabi_ldivmod>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001800:	4b6b      	ldr	r3, [pc, #428]	; (80019b0 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 8001802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001806:	b21b      	sxth	r3, r3
 8001808:	17da      	asrs	r2, r3, #31
 800180a:	673b      	str	r3, [r7, #112]	; 0x70
 800180c:	677a      	str	r2, [r7, #116]	; 0x74
 800180e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001812:	f04f 0000 	mov.w	r0, #0
 8001816:	f04f 0100 	mov.w	r1, #0
 800181a:	0b50      	lsrs	r0, r2, #13
 800181c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001820:	1359      	asrs	r1, r3, #13
 8001822:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001826:	462b      	mov	r3, r5
 8001828:	fb00 f203 	mul.w	r2, r0, r3
 800182c:	4623      	mov	r3, r4
 800182e:	fb03 f301 	mul.w	r3, r3, r1
 8001832:	4413      	add	r3, r2
 8001834:	4622      	mov	r2, r4
 8001836:	fba2 1200 	umull	r1, r2, r2, r0
 800183a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800183e:	460a      	mov	r2, r1
 8001840:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001844:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001848:	4413      	add	r3, r2
 800184a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800184e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001852:	f04f 0000 	mov.w	r0, #0
 8001856:	f04f 0100 	mov.w	r1, #0
 800185a:	0b50      	lsrs	r0, r2, #13
 800185c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001860:	1359      	asrs	r1, r3, #13
 8001862:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001866:	462b      	mov	r3, r5
 8001868:	fb00 f203 	mul.w	r2, r0, r3
 800186c:	4623      	mov	r3, r4
 800186e:	fb03 f301 	mul.w	r3, r3, r1
 8001872:	4413      	add	r3, r2
 8001874:	4622      	mov	r2, r4
 8001876:	fba2 1200 	umull	r1, r2, r2, r0
 800187a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800187e:	460a      	mov	r2, r1
 8001880:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001884:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001888:	4413      	add	r3, r2
 800188a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800189a:	4621      	mov	r1, r4
 800189c:	0e4a      	lsrs	r2, r1, #25
 800189e:	4629      	mov	r1, r5
 80018a0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80018a4:	4629      	mov	r1, r5
 80018a6:	164b      	asrs	r3, r1, #25
 80018a8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 80018ac:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <BMP280_ReadTemperatureAndPressure+0x5cc>)
 80018ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	17da      	asrs	r2, r3, #31
 80018b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80018b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018be:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80018c2:	462a      	mov	r2, r5
 80018c4:	fb02 f203 	mul.w	r2, r2, r3
 80018c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018cc:	4621      	mov	r1, r4
 80018ce:	fb01 f303 	mul.w	r3, r1, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80018d8:	4621      	mov	r1, r4
 80018da:	fba2 1201 	umull	r1, r2, r2, r1
 80018de:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80018e2:	460a      	mov	r2, r1
 80018e4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80018e8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80018ec:	4413      	add	r3, r2
 80018ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80018fe:	4621      	mov	r1, r4
 8001900:	0cca      	lsrs	r2, r1, #19
 8001902:	4629      	mov	r1, r5
 8001904:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001908:	4629      	mov	r1, r5
 800190a:	14cb      	asrs	r3, r1, #19
 800190c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001910:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001914:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001918:	1884      	adds	r4, r0, r2
 800191a:	663c      	str	r4, [r7, #96]	; 0x60
 800191c:	eb41 0303 	adc.w	r3, r1, r3
 8001920:	667b      	str	r3, [r7, #100]	; 0x64
 8001922:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001926:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800192a:	4621      	mov	r1, r4
 800192c:	1889      	adds	r1, r1, r2
 800192e:	65b9      	str	r1, [r7, #88]	; 0x58
 8001930:	4629      	mov	r1, r5
 8001932:	eb43 0101 	adc.w	r1, r3, r1
 8001936:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001938:	f04f 0000 	mov.w	r0, #0
 800193c:	f04f 0100 	mov.w	r1, #0
 8001940:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001944:	4623      	mov	r3, r4
 8001946:	0a18      	lsrs	r0, r3, #8
 8001948:	462b      	mov	r3, r5
 800194a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800194e:	462b      	mov	r3, r5
 8001950:	1219      	asrs	r1, r3, #8
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 8001954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001958:	b21b      	sxth	r3, r3
 800195a:	17da      	asrs	r2, r3, #31
 800195c:	653b      	str	r3, [r7, #80]	; 0x50
 800195e:	657a      	str	r2, [r7, #84]	; 0x54
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800196c:	464c      	mov	r4, r9
 800196e:	0123      	lsls	r3, r4, #4
 8001970:	4644      	mov	r4, r8
 8001972:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001976:	4644      	mov	r4, r8
 8001978:	0122      	lsls	r2, r4, #4
 800197a:	1884      	adds	r4, r0, r2
 800197c:	603c      	str	r4, [r7, #0]
 800197e:	eb41 0303 	adc.w	r3, r1, r3
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001988:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 800198c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001990:	2b00      	cmp	r3, #0
 8001992:	da00      	bge.n	8001996 <BMP280_ReadTemperatureAndPressure+0x5ae>
 8001994:	33ff      	adds	r3, #255	; 0xff
 8001996:	121b      	asrs	r3, r3, #8
 8001998:	461a      	mov	r2, r3
 800199a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800199e:	601a      	str	r2, [r3, #0]

	  return 0;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80019a8:	46bd      	mov	sp, r7
 80019aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ae:	bf00      	nop
 80019b0:	20000212 	.word	0x20000212
 80019b4:	20000210 	.word	0x20000210
 80019b8:	2000020e 	.word	0x2000020e

080019bc <lcd_send_cmd>:

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup
//#define SLAVE_ADDRESS_LCD 0x70 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f023 030f 	bic.w	r3, r3, #15
 80019cc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	f043 030c 	orr.w	r3, r3, #12
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	f043 0308 	orr.w	r3, r3, #8
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80019e8:	7bbb      	ldrb	r3, [r7, #14]
 80019ea:	f043 030c 	orr.w	r3, r3, #12
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80019f2:	7bbb      	ldrb	r3, [r7, #14]
 80019f4:	f043 0308 	orr.w	r3, r3, #8
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019fc:	f107 0208 	add.w	r2, r7, #8
 8001a00:	2364      	movs	r3, #100	; 0x64
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	2304      	movs	r3, #4
 8001a06:	214e      	movs	r1, #78	; 0x4e
 8001a08:	4803      	ldr	r0, [pc, #12]	; (8001a18 <lcd_send_cmd+0x5c>)
 8001a0a:	f001 fbff 	bl	800320c <HAL_I2C_Master_Transmit>
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000270 	.word	0x20000270

08001a1c <lcd_send_data>:

void lcd_send_data (char data)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f023 030f 	bic.w	r3, r3, #15
 8001a2c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	f043 030d 	orr.w	r3, r3, #13
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	f043 0309 	orr.w	r3, r3, #9
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a48:	7bbb      	ldrb	r3, [r7, #14]
 8001a4a:	f043 030d 	orr.w	r3, r3, #13
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a52:	7bbb      	ldrb	r3, [r7, #14]
 8001a54:	f043 0309 	orr.w	r3, r3, #9
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a5c:	f107 0208 	add.w	r2, r7, #8
 8001a60:	2364      	movs	r3, #100	; 0x64
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2304      	movs	r3, #4
 8001a66:	214e      	movs	r1, #78	; 0x4e
 8001a68:	4803      	ldr	r0, [pc, #12]	; (8001a78 <lcd_send_data+0x5c>)
 8001a6a:	f001 fbcf 	bl	800320c <HAL_I2C_Master_Transmit>
}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000270 	.word	0x20000270

08001a7c <lcd_clear>:

void lcd_clear (void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001a82:	2080      	movs	r0, #128	; 0x80
 8001a84:	f7ff ff9a 	bl	80019bc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	e005      	b.n	8001a9a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001a8e:	2020      	movs	r0, #32
 8001a90:	f7ff ffc4 	bl	8001a1c <lcd_send_data>
	for (int i=0; i<70; i++)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3301      	adds	r3, #1
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b45      	cmp	r3, #69	; 0x45
 8001a9e:	ddf6      	ble.n	8001a8e <lcd_clear+0x12>
	}
	lcd_put_cur(0, 0); //Dopisane ustawienie kursora na 0,0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f000 f804 	bl	8001ab0 <lcd_put_cur>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
    switch (row)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <lcd_put_cur+0x18>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d005      	beq.n	8001ad2 <lcd_put_cur+0x22>
 8001ac6:	e009      	b.n	8001adc <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ace:	603b      	str	r3, [r7, #0]
            break;
 8001ad0:	e004      	b.n	8001adc <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ad8:	603b      	str	r3, [r7, #0]
            break;
 8001ada:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff6b 	bl	80019bc <lcd_send_cmd>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <lcd_init>:


void lcd_init (void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001af2:	2032      	movs	r0, #50	; 0x32
 8001af4:	f001 f82a 	bl	8002b4c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001af8:	2030      	movs	r0, #48	; 0x30
 8001afa:	f7ff ff5f 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001afe:	2005      	movs	r0, #5
 8001b00:	f001 f824 	bl	8002b4c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001b04:	2030      	movs	r0, #48	; 0x30
 8001b06:	f7ff ff59 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f001 f81e 	bl	8002b4c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001b10:	2030      	movs	r0, #48	; 0x30
 8001b12:	f7ff ff53 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(10);
 8001b16:	200a      	movs	r0, #10
 8001b18:	f001 f818 	bl	8002b4c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001b1c:	2020      	movs	r0, #32
 8001b1e:	f7ff ff4d 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(10);
 8001b22:	200a      	movs	r0, #10
 8001b24:	f001 f812 	bl	8002b4c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001b28:	2028      	movs	r0, #40	; 0x28
 8001b2a:	f7ff ff47 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(1);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f001 f80c 	bl	8002b4c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001b34:	2008      	movs	r0, #8
 8001b36:	f7ff ff41 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(1);
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f001 f806 	bl	8002b4c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001b40:	2001      	movs	r0, #1
 8001b42:	f7ff ff3b 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(1);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f001 f800 	bl	8002b4c <HAL_Delay>
	HAL_Delay(1);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f000 fffd 	bl	8002b4c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001b52:	2006      	movs	r0, #6
 8001b54:	f7ff ff32 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(1);
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f000 fff7 	bl	8002b4c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001b5e:	200c      	movs	r0, #12
 8001b60:	f7ff ff2c 	bl	80019bc <lcd_send_cmd>
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	while (*str)
 8001b70:	e006      	b.n	8001b80 <lcd_send_string+0x18>
	{
		lcd_send_data (*str++);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff4e 	bl	8001a1c <lcd_send_data>
	while (*str)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f4      	bne.n	8001b72 <lcd_send_string+0xa>
	}
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <PID>:
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_I2C1_Init(void);
static void MX_I2C4_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
float32_t PID(pre_s* pre, float32_t Kp, float32_t Ki,	float32_t Kd, float32_t dt, float setpoint, float measured){
 8001b94:	b5b0      	push	{r4, r5, r7, lr}
 8001b96:	b090      	sub	sp, #64	; 0x40
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	61f8      	str	r0, [r7, #28]
 8001b9c:	ed87 0a06 	vstr	s0, [r7, #24]
 8001ba0:	edc7 0a05 	vstr	s1, [r7, #20]
 8001ba4:	ed87 1a04 	vstr	s2, [r7, #16]
 8001ba8:	edc7 1a03 	vstr	s3, [r7, #12]
 8001bac:	ed87 2a02 	vstr	s4, [r7, #8]
 8001bb0:	edc7 2a01 	vstr	s5, [r7, #4]
  	float32_t u=0, P, I, D, error, integral, derivative;
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	63fb      	str	r3, [r7, #60]	; 0x3c

  	error = setpoint-measured;
 8001bba:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

  	//proportional part
  	P = Kp * error;
 8001bca:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bce:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

  	//integral part
  	integral = pre->previous_integral + (error+pre->previous_error) ;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	edd3 6a00 	vldr	s13, [r3]
 8001be6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  	pre->previous_integral = integral;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bfa:	605a      	str	r2, [r3, #4]
  	I = Ki*integral*(dt/2.0);
 8001bfc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c00:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c08:	ee17 0a90 	vmov	r0, s15
 8001c0c:	f7fe fcbc 	bl	8000588 <__aeabi_f2d>
 8001c10:	4604      	mov	r4, r0
 8001c12:	460d      	mov	r5, r1
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f7fe fcb7 	bl	8000588 <__aeabi_f2d>
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c22:	f7fe fe33 	bl	800088c <__aeabi_ddiv>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	f7fe fd03 	bl	8000638 <__aeabi_dmul>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f7fe ffd5 	bl	8000be8 <__aeabi_d2f>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c

 	//derivative part
  	derivative = (error -pre->previous_error)/dt;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001c4c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c50:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c58:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  	pre->previous_error = error;
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c60:	601a      	str	r2, [r3, #0]
  	D = Kd*derivative;
 8001c62:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  	u = P  + I + D;
 8001c72:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001c76:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c7e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c86:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  	if (u<0){
 8001c8a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001c8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c96:	d503      	bpl.n	8001ca0 <PID+0x10c>
  		u=0;
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c9e:	e00a      	b.n	8001cb6 <PID+0x122>
  	}else if(u>999)
 8001ca0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ca4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001cc8 <PID+0x134>
 8001ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb0:	dd01      	ble.n	8001cb6 <PID+0x122>
  	{
  		u=999;
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <PID+0x138>)
 8001cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  	}
  	return u;
 8001cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cb8:	ee07 3a90 	vmov	s15, r3
  }
 8001cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc0:	3740      	adds	r7, #64	; 0x40
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	4479c000 	.word	0x4479c000
 8001ccc:	4479c000 	.word	0x4479c000

08001cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b090      	sub	sp, #64	; 0x40
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd6:	f000 fedc 	bl	8002a92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cda:	f000 f907 	bl	8001eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cde:	f000 fac3 	bl	8002268 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001ce2:	f000 fa63 	bl	80021ac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001ce6:	f000 fa91 	bl	800220c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001cea:	f000 f967 	bl	8001fbc <MX_I2C1_Init>
  MX_I2C4_Init();
 8001cee:	f000 f9a5 	bl	800203c <MX_I2C4_Init>
  MX_TIM3_Init();
 8001cf2:	f000 f9e3 	bl	80020bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	486d      	ldr	r0, [pc, #436]	; (8001eb4 <main+0x1e4>)
 8001cfe:	f7ff fa29 	bl	8001154 <BMP280_Init>
  HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_3);
 8001d02:	2108      	movs	r1, #8
 8001d04:	486c      	ldr	r0, [pc, #432]	; (8001eb8 <main+0x1e8>)
 8001d06:	f003 fb9f 	bl	8005448 <HAL_TIM_PWM_Start>
  lcd_init ();
 8001d0a:	f7ff fef0 	bl	8001aee <lcd_init>
    lcd_send_string ("Projekt PID");
 8001d0e:	486b      	ldr	r0, [pc, #428]	; (8001ebc <main+0x1ec>)
 8001d10:	f7ff ff2a 	bl	8001b68 <lcd_send_string>
    HAL_Delay(100);
 8001d14:	2064      	movs	r0, #100	; 0x64
 8001d16:	f000 ff19 	bl	8002b4c <HAL_Delay>
    lcd_put_cur(1, 0);
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	f7ff fec7 	bl	8001ab0 <lcd_put_cur>
    lcd_send_string("JR,MR 2024");
 8001d22:	4867      	ldr	r0, [pc, #412]	; (8001ec0 <main+0x1f0>)
 8001d24:	f7ff ff20 	bl	8001b68 <lcd_send_string>
    HAL_Delay(2000);
 8001d28:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d2c:	f000 ff0e 	bl	8002b4c <HAL_Delay>
  	// Inicjalizacja struktury przechowującej poprzednie stany
  	pre_s pre={.previous_error=0, .previous_integral=0};
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  	pre.previous_error = 0.0f;
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
  	pre.previous_integral = 0.0f;
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]

  	// Parametry regulatora PID
  	float32_t Kp = 1.0f;
 8001d48:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  	float32_t Ki = 0.1f;
 8001d4e:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <main+0x1f4>)
 8001d50:	63bb      	str	r3, [r7, #56]	; 0x38
  	float32_t Kd = 0.01f;
 8001d52:	4b5d      	ldr	r3, [pc, #372]	; (8001ec8 <main+0x1f8>)
 8001d54:	637b      	str	r3, [r7, #52]	; 0x34

     // Czas próbkowania
  	float32_t dt = 0.01f;
 8001d56:	4b5c      	ldr	r3, [pc, #368]	; (8001ec8 <main+0x1f8>)
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t wprowadz[1];

	  HAL_StatusTypeDef status =HAL_UART_Receive(&huart3, wprowadz, 1, 1);
 8001d5a:	1d39      	adds	r1, r7, #4
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	2201      	movs	r2, #1
 8001d60:	485a      	ldr	r0, [pc, #360]	; (8001ecc <main+0x1fc>)
 8001d62:	f004 fb66 	bl	8006432 <HAL_UART_Receive>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  if (status== HAL_OK){
 8001d6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d12f      	bne.n	8001dd4 <main+0x104>
		  if(temperatura_docelowa>=30.0){
 8001d74:	4b56      	ldr	r3, [pc, #344]	; (8001ed0 <main+0x200>)
 8001d76:	edd3 7a00 	vldr	s15, [r3]
 8001d7a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d86:	db08      	blt.n	8001d9a <main+0xca>
			  zmiana=zmiana*(-1);
 8001d88:	4b52      	ldr	r3, [pc, #328]	; (8001ed4 <main+0x204>)
 8001d8a:	edd3 7a00 	vldr	s15, [r3]
 8001d8e:	eef1 7a67 	vneg.f32	s15, s15
 8001d92:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <main+0x204>)
 8001d94:	edc3 7a00 	vstr	s15, [r3]
 8001d98:	e011      	b.n	8001dbe <main+0xee>
		  }else if(temperatura_docelowa<=21.0){
 8001d9a:	4b4d      	ldr	r3, [pc, #308]	; (8001ed0 <main+0x200>)
 8001d9c:	edd3 7a00 	vldr	s15, [r3]
 8001da0:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8001da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dac:	d807      	bhi.n	8001dbe <main+0xee>
			  zmiana=zmiana*(-1);
 8001dae:	4b49      	ldr	r3, [pc, #292]	; (8001ed4 <main+0x204>)
 8001db0:	edd3 7a00 	vldr	s15, [r3]
 8001db4:	eef1 7a67 	vneg.f32	s15, s15
 8001db8:	4b46      	ldr	r3, [pc, #280]	; (8001ed4 <main+0x204>)
 8001dba:	edc3 7a00 	vstr	s15, [r3]
		  }
		  temperatura_docelowa=temperatura_docelowa+zmiana;
 8001dbe:	4b44      	ldr	r3, [pc, #272]	; (8001ed0 <main+0x200>)
 8001dc0:	ed93 7a00 	vldr	s14, [r3]
 8001dc4:	4b43      	ldr	r3, [pc, #268]	; (8001ed4 <main+0x204>)
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dce:	4b40      	ldr	r3, [pc, #256]	; (8001ed0 <main+0x200>)
 8001dd0:	edc3 7a00 	vstr	s15, [r3]
//	  char wprowadz[6];
//	  HAL_StatusTypeDef status =HAL_UART_Receive(&huart3, (uint8_t *)wprowadz, 1, 1000);
//	  if (status== HAL_OK){
//  		  temperatura_docelowa=atof(wprowadz.value);
//	  			}
	  __HAL_UART_CLEAR_FLAG(&huart3, UART_CLEAR_OREF);
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <main+0x1fc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2208      	movs	r2, #8
 8001dda:	621a      	str	r2, [r3, #32]
	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8001ddc:	493e      	ldr	r1, [pc, #248]	; (8001ed8 <main+0x208>)
 8001dde:	483f      	ldr	r0, [pc, #252]	; (8001edc <main+0x20c>)
 8001de0:	f7ff fb02 	bl	80013e8 <BMP280_ReadTemperatureAndPressure>
	  sprintf((char*)text, "%.2f, ", temperature);
 8001de4:	4b3d      	ldr	r3, [pc, #244]	; (8001edc <main+0x20c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fbcd 	bl	8000588 <__aeabi_f2d>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	f107 0010 	add.w	r0, r7, #16
 8001df6:	493a      	ldr	r1, [pc, #232]	; (8001ee0 <main+0x210>)
 8001df8:	f006 f800 	bl	8007dfc <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)text, strlen(text), 1000);
 8001dfc:	f107 0310 	add.w	r3, r7, #16
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fa55 	bl	80002b0 <strlen>
 8001e06:	4603      	mov	r3, r0
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	f107 0110 	add.w	r1, r7, #16
 8001e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e12:	482e      	ldr	r0, [pc, #184]	; (8001ecc <main+0x1fc>)
 8001e14:	f004 fa8a 	bl	800632c <HAL_UART_Transmit>

	  lcd_clear ();
 8001e18:	f7ff fe30 	bl	8001a7c <lcd_clear>
	  lcd_put_cur(0, 0);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f7ff fe46 	bl	8001ab0 <lcd_put_cur>
	  sprintf((char*)text, "Temp.  %.2f  C", temperature);
 8001e24:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <main+0x20c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fbad 	bl	8000588 <__aeabi_f2d>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	f107 0010 	add.w	r0, r7, #16
 8001e36:	492b      	ldr	r1, [pc, #172]	; (8001ee4 <main+0x214>)
 8001e38:	f005 ffe0 	bl	8007dfc <siprintf>
	  lcd_send_string(text);
 8001e3c:	f107 0310 	add.w	r3, r7, #16
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fe91 	bl	8001b68 <lcd_send_string>
	  lcd_put_cur(1, 0);
 8001e46:	2100      	movs	r1, #0
 8001e48:	2001      	movs	r0, #1
 8001e4a:	f7ff fe31 	bl	8001ab0 <lcd_put_cur>
	  sprintf((char*)text, "T_zad. %.2f  C", temperatura_docelowa);
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <main+0x200>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb98 	bl	8000588 <__aeabi_f2d>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	f107 0010 	add.w	r0, r7, #16
 8001e60:	4921      	ldr	r1, [pc, #132]	; (8001ee8 <main+0x218>)
 8001e62:	f005 ffcb 	bl	8007dfc <siprintf>
	  lcd_send_string(text);
 8001e66:	f107 0310 	add.w	r3, r7, #16
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fe7c 	bl	8001b68 <lcd_send_string>


	  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, PID(&pre,Kp,Ki,Kd,dt,temperatura_docelowa,temperature));
 8001e70:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <main+0x200>)
 8001e72:	edd3 7a00 	vldr	s15, [r3]
 8001e76:	4b19      	ldr	r3, [pc, #100]	; (8001edc <main+0x20c>)
 8001e78:	ed93 7a00 	vldr	s14, [r3]
 8001e7c:	f107 0308 	add.w	r3, r7, #8
 8001e80:	eef0 2a47 	vmov.f32	s5, s14
 8001e84:	eeb0 2a67 	vmov.f32	s4, s15
 8001e88:	edd7 1a0c 	vldr	s3, [r7, #48]	; 0x30
 8001e8c:	ed97 1a0d 	vldr	s2, [r7, #52]	; 0x34
 8001e90:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8001e94:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fe7b 	bl	8001b94 <PID>
 8001e9e:	eef0 7a40 	vmov.f32	s15, s0
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <main+0x1e8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eaa:	ee17 2a90 	vmov	r2, s15
 8001eae:	63da      	str	r2, [r3, #60]	; 0x3c
  {
 8001eb0:	e753      	b.n	8001d5a <main+0x8a>
 8001eb2:	bf00      	nop
 8001eb4:	2000021c 	.word	0x2000021c
 8001eb8:	200002c4 	.word	0x200002c4
 8001ebc:	0800a0d0 	.word	0x0800a0d0
 8001ec0:	0800a0dc 	.word	0x0800a0dc
 8001ec4:	3dcccccd 	.word	0x3dcccccd
 8001ec8:	3c23d70a 	.word	0x3c23d70a
 8001ecc:	20000310 	.word	0x20000310
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000004 	.word	0x20000004
 8001ed8:	200008a4 	.word	0x200008a4
 8001edc:	200008a0 	.word	0x200008a0
 8001ee0:	0800a0e8 	.word	0x0800a0e8
 8001ee4:	0800a0f0 	.word	0x0800a0f0
 8001ee8:	0800a100 	.word	0x0800a100

08001eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b094      	sub	sp, #80	; 0x50
 8001ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef2:	f107 0320 	add.w	r3, r7, #32
 8001ef6:	2230      	movs	r2, #48	; 0x30
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f005 ffe1 	bl	8007ec2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f10:	f002 f918 	bl	8004144 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f14:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <SystemClock_Config+0xc8>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	4a26      	ldr	r2, [pc, #152]	; (8001fb4 <SystemClock_Config+0xc8>)
 8001f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f20:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <SystemClock_Config+0xc8>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f2c:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <SystemClock_Config+0xcc>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f34:	4a20      	ldr	r2, [pc, #128]	; (8001fb8 <SystemClock_Config+0xcc>)
 8001f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <SystemClock_Config+0xcc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001f4c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f52:	2302      	movs	r3, #2
 8001f54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001f60:	2348      	movs	r3, #72	; 0x48
 8001f62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f64:	2302      	movs	r3, #2
 8001f66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f6c:	f107 0320 	add.w	r3, r7, #32
 8001f70:	4618      	mov	r0, r3
 8001f72:	f002 f8f7 	bl	8004164 <HAL_RCC_OscConfig>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f7c:	f000 fa5a 	bl	8002434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f80:	230f      	movs	r3, #15
 8001f82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f84:	2302      	movs	r3, #2
 8001f86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f96:	f107 030c 	add.w	r3, r7, #12
 8001f9a:	2102      	movs	r1, #2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f002 fb85 	bl	80046ac <HAL_RCC_ClockConfig>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001fa8:	f000 fa44 	bl	8002434 <Error_Handler>
  }
}
 8001fac:	bf00      	nop
 8001fae:	3750      	adds	r7, #80	; 0x50
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40007000 	.word	0x40007000

08001fbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <MX_I2C1_Init+0x78>)
 8001fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fc8:	4a1b      	ldr	r2, [pc, #108]	; (8002038 <MX_I2C1_Init+0x7c>)
 8001fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001fcc:	4b18      	ldr	r3, [pc, #96]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fd8:	4b15      	ldr	r3, [pc, #84]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fde:	4b14      	ldr	r3, [pc, #80]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fea:	4b11      	ldr	r3, [pc, #68]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <MX_I2C1_Init+0x74>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff6:	480e      	ldr	r0, [pc, #56]	; (8002030 <MX_I2C1_Init+0x74>)
 8001ff8:	f001 f878 	bl	80030ec <HAL_I2C_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002002:	f000 fa17 	bl	8002434 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002006:	2100      	movs	r1, #0
 8002008:	4809      	ldr	r0, [pc, #36]	; (8002030 <MX_I2C1_Init+0x74>)
 800200a:	f001 febb 	bl	8003d84 <HAL_I2CEx_ConfigAnalogFilter>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002014:	f000 fa0e 	bl	8002434 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002018:	2100      	movs	r1, #0
 800201a:	4805      	ldr	r0, [pc, #20]	; (8002030 <MX_I2C1_Init+0x74>)
 800201c:	f001 fefd 	bl	8003e1a <HAL_I2CEx_ConfigDigitalFilter>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002026:	f000 fa05 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	2000021c 	.word	0x2000021c
 8002034:	40005400 	.word	0x40005400
 8002038:	00808cd2 	.word	0x00808cd2

0800203c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <MX_I2C4_Init+0x74>)
 8002042:	4a1c      	ldr	r2, [pc, #112]	; (80020b4 <MX_I2C4_Init+0x78>)
 8002044:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 8002046:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <MX_I2C4_Init+0x74>)
 8002048:	4a1b      	ldr	r2, [pc, #108]	; (80020b8 <MX_I2C4_Init+0x7c>)
 800204a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <MX_I2C4_Init+0x74>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002052:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <MX_I2C4_Init+0x74>)
 8002054:	2201      	movs	r2, #1
 8002056:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002058:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <MX_I2C4_Init+0x74>)
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800205e:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <MX_I2C4_Init+0x74>)
 8002060:	2200      	movs	r2, #0
 8002062:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <MX_I2C4_Init+0x74>)
 8002066:	2200      	movs	r2, #0
 8002068:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <MX_I2C4_Init+0x74>)
 800206c:	2200      	movs	r2, #0
 800206e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <MX_I2C4_Init+0x74>)
 8002072:	2200      	movs	r2, #0
 8002074:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002076:	480e      	ldr	r0, [pc, #56]	; (80020b0 <MX_I2C4_Init+0x74>)
 8002078:	f001 f838 	bl	80030ec <HAL_I2C_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002082:	f000 f9d7 	bl	8002434 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002086:	2100      	movs	r1, #0
 8002088:	4809      	ldr	r0, [pc, #36]	; (80020b0 <MX_I2C4_Init+0x74>)
 800208a:	f001 fe7b 	bl	8003d84 <HAL_I2CEx_ConfigAnalogFilter>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002094:	f000 f9ce 	bl	8002434 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002098:	2100      	movs	r1, #0
 800209a:	4805      	ldr	r0, [pc, #20]	; (80020b0 <MX_I2C4_Init+0x74>)
 800209c:	f001 febd 	bl	8003e1a <HAL_I2CEx_ConfigDigitalFilter>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80020a6:	f000 f9c5 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000270 	.word	0x20000270
 80020b4:	40006000 	.word	0x40006000
 80020b8:	00808cd2 	.word	0x00808cd2

080020bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08e      	sub	sp, #56	; 0x38
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020dc:	463b      	mov	r3, r7
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
 80020e8:	611a      	str	r2, [r3, #16]
 80020ea:	615a      	str	r2, [r3, #20]
 80020ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020ee:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <MX_TIM3_Init+0xe8>)
 80020f0:	4a2d      	ldr	r2, [pc, #180]	; (80021a8 <MX_TIM3_Init+0xec>)
 80020f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80020f4:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <MX_TIM3_Init+0xe8>)
 80020f6:	2247      	movs	r2, #71	; 0x47
 80020f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fa:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <MX_TIM3_Init+0xe8>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002100:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <MX_TIM3_Init+0xe8>)
 8002102:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002106:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002108:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <MX_TIM3_Init+0xe8>)
 800210a:	2200      	movs	r2, #0
 800210c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800210e:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <MX_TIM3_Init+0xe8>)
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002114:	4823      	ldr	r0, [pc, #140]	; (80021a4 <MX_TIM3_Init+0xe8>)
 8002116:	f003 f8df 	bl	80052d8 <HAL_TIM_Base_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002120:	f000 f988 	bl	8002434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800212a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800212e:	4619      	mov	r1, r3
 8002130:	481c      	ldr	r0, [pc, #112]	; (80021a4 <MX_TIM3_Init+0xe8>)
 8002132:	f003 fb97 	bl	8005864 <HAL_TIM_ConfigClockSource>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800213c:	f000 f97a 	bl	8002434 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002140:	4818      	ldr	r0, [pc, #96]	; (80021a4 <MX_TIM3_Init+0xe8>)
 8002142:	f003 f920 	bl	8005386 <HAL_TIM_PWM_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800214c:	f000 f972 	bl	8002434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002158:	f107 031c 	add.w	r3, r7, #28
 800215c:	4619      	mov	r1, r3
 800215e:	4811      	ldr	r0, [pc, #68]	; (80021a4 <MX_TIM3_Init+0xe8>)
 8002160:	f004 f808 	bl	8006174 <HAL_TIMEx_MasterConfigSynchronization>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800216a:	f000 f963 	bl	8002434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800216e:	2360      	movs	r3, #96	; 0x60
 8002170:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800217e:	463b      	mov	r3, r7
 8002180:	2208      	movs	r2, #8
 8002182:	4619      	mov	r1, r3
 8002184:	4807      	ldr	r0, [pc, #28]	; (80021a4 <MX_TIM3_Init+0xe8>)
 8002186:	f003 fa59 	bl	800563c <HAL_TIM_PWM_ConfigChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002190:	f000 f950 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002194:	4803      	ldr	r0, [pc, #12]	; (80021a4 <MX_TIM3_Init+0xe8>)
 8002196:	f000 fa3f 	bl	8002618 <HAL_TIM_MspPostInit>

}
 800219a:	bf00      	nop
 800219c:	3738      	adds	r7, #56	; 0x38
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200002c4 	.word	0x200002c4
 80021a8:	40000400 	.word	0x40000400

080021ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <MX_USART3_UART_Init+0x58>)
 80021b2:	4a15      	ldr	r2, [pc, #84]	; (8002208 <MX_USART3_UART_Init+0x5c>)
 80021b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <MX_USART3_UART_Init+0x58>)
 80021b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <MX_USART3_UART_Init+0x58>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <MX_USART3_UART_Init+0x58>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <MX_USART3_UART_Init+0x58>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <MX_USART3_UART_Init+0x58>)
 80021d2:	220c      	movs	r2, #12
 80021d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <MX_USART3_UART_Init+0x58>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <MX_USART3_UART_Init+0x58>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021e2:	4b08      	ldr	r3, [pc, #32]	; (8002204 <MX_USART3_UART_Init+0x58>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <MX_USART3_UART_Init+0x58>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021ee:	4805      	ldr	r0, [pc, #20]	; (8002204 <MX_USART3_UART_Init+0x58>)
 80021f0:	f004 f84e 	bl	8006290 <HAL_UART_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80021fa:	f000 f91b 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000310 	.word	0x20000310
 8002208:	40004800 	.word	0x40004800

0800220c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002212:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002216:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800221a:	2206      	movs	r2, #6
 800221c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002220:	2202      	movs	r2, #2
 8002222:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002226:	2200      	movs	r2, #0
 8002228:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800222c:	2202      	movs	r2, #2
 800222e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002232:	2201      	movs	r2, #1
 8002234:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002238:	2200      	movs	r2, #0
 800223a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800223e:	2200      	movs	r2, #0
 8002240:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002244:	2201      	movs	r2, #1
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800224a:	2200      	movs	r2, #0
 800224c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800224e:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002250:	f001 fe2f 	bl	8003eb2 <HAL_PCD_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800225a:	f000 f8eb 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000398 	.word	0x20000398

08002268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08c      	sub	sp, #48	; 0x30
 800226c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226e:	f107 031c 	add.w	r3, r7, #28
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
 800227c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800227e:	4b68      	ldr	r3, [pc, #416]	; (8002420 <MX_GPIO_Init+0x1b8>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a67      	ldr	r2, [pc, #412]	; (8002420 <MX_GPIO_Init+0x1b8>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b65      	ldr	r3, [pc, #404]	; (8002420 <MX_GPIO_Init+0x1b8>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	61bb      	str	r3, [r7, #24]
 8002294:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002296:	4b62      	ldr	r3, [pc, #392]	; (8002420 <MX_GPIO_Init+0x1b8>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a61      	ldr	r2, [pc, #388]	; (8002420 <MX_GPIO_Init+0x1b8>)
 800229c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b5f      	ldr	r3, [pc, #380]	; (8002420 <MX_GPIO_Init+0x1b8>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	4b5c      	ldr	r3, [pc, #368]	; (8002420 <MX_GPIO_Init+0x1b8>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a5b      	ldr	r2, [pc, #364]	; (8002420 <MX_GPIO_Init+0x1b8>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b59      	ldr	r3, [pc, #356]	; (8002420 <MX_GPIO_Init+0x1b8>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c6:	4b56      	ldr	r3, [pc, #344]	; (8002420 <MX_GPIO_Init+0x1b8>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a55      	ldr	r2, [pc, #340]	; (8002420 <MX_GPIO_Init+0x1b8>)
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b53      	ldr	r3, [pc, #332]	; (8002420 <MX_GPIO_Init+0x1b8>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <MX_GPIO_Init+0x1b8>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a4f      	ldr	r2, [pc, #316]	; (8002420 <MX_GPIO_Init+0x1b8>)
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b4d      	ldr	r3, [pc, #308]	; (8002420 <MX_GPIO_Init+0x1b8>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022f6:	4b4a      	ldr	r3, [pc, #296]	; (8002420 <MX_GPIO_Init+0x1b8>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a49      	ldr	r2, [pc, #292]	; (8002420 <MX_GPIO_Init+0x1b8>)
 80022fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b47      	ldr	r3, [pc, #284]	; (8002420 <MX_GPIO_Init+0x1b8>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800230e:	2200      	movs	r2, #0
 8002310:	f244 0181 	movw	r1, #16513	; 0x4081
 8002314:	4843      	ldr	r0, [pc, #268]	; (8002424 <MX_GPIO_Init+0x1bc>)
 8002316:	f000 fecf 	bl	80030b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800231a:	2200      	movs	r2, #0
 800231c:	2140      	movs	r1, #64	; 0x40
 800231e:	4842      	ldr	r0, [pc, #264]	; (8002428 <MX_GPIO_Init+0x1c0>)
 8002320:	f000 feca 	bl	80030b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800232a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800232e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	4619      	mov	r1, r3
 800233a:	483c      	ldr	r0, [pc, #240]	; (800242c <MX_GPIO_Init+0x1c4>)
 800233c:	f000 fd10 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002340:	2332      	movs	r3, #50	; 0x32
 8002342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234c:	2303      	movs	r3, #3
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002350:	230b      	movs	r3, #11
 8002352:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002354:	f107 031c 	add.w	r3, r7, #28
 8002358:	4619      	mov	r1, r3
 800235a:	4834      	ldr	r0, [pc, #208]	; (800242c <MX_GPIO_Init+0x1c4>)
 800235c:	f000 fd00 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002360:	2386      	movs	r3, #134	; 0x86
 8002362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236c:	2303      	movs	r3, #3
 800236e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002370:	230b      	movs	r3, #11
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	4619      	mov	r1, r3
 800237a:	482d      	ldr	r0, [pc, #180]	; (8002430 <MX_GPIO_Init+0x1c8>)
 800237c:	f000 fcf0 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002380:	f244 0381 	movw	r3, #16513	; 0x4081
 8002384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002386:	2301      	movs	r3, #1
 8002388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002392:	f107 031c 	add.w	r3, r7, #28
 8002396:	4619      	mov	r1, r3
 8002398:	4822      	ldr	r0, [pc, #136]	; (8002424 <MX_GPIO_Init+0x1bc>)
 800239a:	f000 fce1 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800239e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ac:	2303      	movs	r3, #3
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023b0:	230b      	movs	r3, #11
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80023b4:	f107 031c 	add.w	r3, r7, #28
 80023b8:	4619      	mov	r1, r3
 80023ba:	481a      	ldr	r0, [pc, #104]	; (8002424 <MX_GPIO_Init+0x1bc>)
 80023bc:	f000 fcd0 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80023c0:	2340      	movs	r3, #64	; 0x40
 80023c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c4:	2301      	movs	r3, #1
 80023c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023cc:	2300      	movs	r3, #0
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80023d0:	f107 031c 	add.w	r3, r7, #28
 80023d4:	4619      	mov	r1, r3
 80023d6:	4814      	ldr	r0, [pc, #80]	; (8002428 <MX_GPIO_Init+0x1c0>)
 80023d8:	f000 fcc2 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e0:	2300      	movs	r3, #0
 80023e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023e8:	f107 031c 	add.w	r3, r7, #28
 80023ec:	4619      	mov	r1, r3
 80023ee:	480e      	ldr	r0, [pc, #56]	; (8002428 <MX_GPIO_Init+0x1c0>)
 80023f0:	f000 fcb6 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80023f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80023f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002402:	2303      	movs	r3, #3
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002406:	230b      	movs	r3, #11
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800240a:	f107 031c 	add.w	r3, r7, #28
 800240e:	4619      	mov	r1, r3
 8002410:	4805      	ldr	r0, [pc, #20]	; (8002428 <MX_GPIO_Init+0x1c0>)
 8002412:	f000 fca5 	bl	8002d60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002416:	bf00      	nop
 8002418:	3730      	adds	r7, #48	; 0x30
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	40020400 	.word	0x40020400
 8002428:	40021800 	.word	0x40021800
 800242c:	40020800 	.word	0x40020800
 8002430:	40020000 	.word	0x40020000

08002434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002438:	b672      	cpsid	i
}
 800243a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800243c:	e7fe      	b.n	800243c <Error_Handler+0x8>
	...

08002440 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <HAL_MspInit+0x44>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <HAL_MspInit+0x44>)
 800244c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002450:	6413      	str	r3, [r2, #64]	; 0x40
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_MspInit+0x44>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	607b      	str	r3, [r7, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_MspInit+0x44>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a08      	ldr	r2, [pc, #32]	; (8002484 <HAL_MspInit+0x44>)
 8002464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_MspInit+0x44>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800

08002488 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b0ac      	sub	sp, #176	; 0xb0
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024a0:	f107 0318 	add.w	r3, r7, #24
 80024a4:	2284      	movs	r2, #132	; 0x84
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f005 fd0a 	bl	8007ec2 <memset>
  if(hi2c->Instance==I2C1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a44      	ldr	r2, [pc, #272]	; (80025c4 <HAL_I2C_MspInit+0x13c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d13d      	bne.n	8002534 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80024b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80024be:	2300      	movs	r3, #0
 80024c0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024c2:	f107 0318 	add.w	r3, r7, #24
 80024c6:	4618      	mov	r0, r3
 80024c8:	f002 fb16 	bl	8004af8 <HAL_RCCEx_PeriphCLKConfig>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80024d2:	f7ff ffaf 	bl	8002434 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d6:	4b3c      	ldr	r3, [pc, #240]	; (80025c8 <HAL_I2C_MspInit+0x140>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a3b      	ldr	r2, [pc, #236]	; (80025c8 <HAL_I2C_MspInit+0x140>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b39      	ldr	r3, [pc, #228]	; (80025c8 <HAL_I2C_MspInit+0x140>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024f6:	2312      	movs	r3, #18
 80024f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002502:	2303      	movs	r3, #3
 8002504:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002508:	2304      	movs	r3, #4
 800250a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002512:	4619      	mov	r1, r3
 8002514:	482d      	ldr	r0, [pc, #180]	; (80025cc <HAL_I2C_MspInit+0x144>)
 8002516:	f000 fc23 	bl	8002d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800251a:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <HAL_I2C_MspInit+0x140>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	4a2a      	ldr	r2, [pc, #168]	; (80025c8 <HAL_I2C_MspInit+0x140>)
 8002520:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002524:	6413      	str	r3, [r2, #64]	; 0x40
 8002526:	4b28      	ldr	r3, [pc, #160]	; (80025c8 <HAL_I2C_MspInit+0x140>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002532:	e042      	b.n	80025ba <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C4)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a25      	ldr	r2, [pc, #148]	; (80025d0 <HAL_I2C_MspInit+0x148>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d13d      	bne.n	80025ba <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800253e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002542:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800254a:	f107 0318 	add.w	r3, r7, #24
 800254e:	4618      	mov	r0, r3
 8002550:	f002 fad2 	bl	8004af8 <HAL_RCCEx_PeriphCLKConfig>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800255a:	f7ff ff6b 	bl	8002434 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <HAL_I2C_MspInit+0x140>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	4a19      	ldr	r2, [pc, #100]	; (80025c8 <HAL_I2C_MspInit+0x140>)
 8002564:	f043 0308 	orr.w	r3, r3, #8
 8002568:	6313      	str	r3, [r2, #48]	; 0x30
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <HAL_I2C_MspInit+0x140>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002576:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800257a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800257e:	2312      	movs	r3, #18
 8002580:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002590:	2304      	movs	r3, #4
 8002592:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002596:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800259a:	4619      	mov	r1, r3
 800259c:	480d      	ldr	r0, [pc, #52]	; (80025d4 <HAL_I2C_MspInit+0x14c>)
 800259e:	f000 fbdf 	bl	8002d60 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_I2C_MspInit+0x140>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	4a08      	ldr	r2, [pc, #32]	; (80025c8 <HAL_I2C_MspInit+0x140>)
 80025a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ac:	6413      	str	r3, [r2, #64]	; 0x40
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_I2C_MspInit+0x140>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
}
 80025ba:	bf00      	nop
 80025bc:	37b0      	adds	r7, #176	; 0xb0
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40005400 	.word	0x40005400
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40020400 	.word	0x40020400
 80025d0:	40006000 	.word	0x40006000
 80025d4:	40020c00 	.word	0x40020c00

080025d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <HAL_TIM_Base_MspInit+0x38>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d10b      	bne.n	8002602 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_TIM_Base_MspInit+0x3c>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	4a09      	ldr	r2, [pc, #36]	; (8002614 <HAL_TIM_Base_MspInit+0x3c>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	6413      	str	r3, [r2, #64]	; 0x40
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <HAL_TIM_Base_MspInit+0x3c>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002602:	bf00      	nop
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40000400 	.word	0x40000400
 8002614:	40023800 	.word	0x40023800

08002618 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 030c 	add.w	r3, r7, #12
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a11      	ldr	r2, [pc, #68]	; (800267c <HAL_TIM_MspPostInit+0x64>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d11c      	bne.n	8002674 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800263a:	4b11      	ldr	r3, [pc, #68]	; (8002680 <HAL_TIM_MspPostInit+0x68>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	4a10      	ldr	r2, [pc, #64]	; (8002680 <HAL_TIM_MspPostInit+0x68>)
 8002640:	f043 0304 	orr.w	r3, r3, #4
 8002644:	6313      	str	r3, [r2, #48]	; 0x30
 8002646:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <HAL_TIM_MspPostInit+0x68>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002656:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002658:	2302      	movs	r3, #2
 800265a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002660:	2300      	movs	r3, #0
 8002662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002664:	2302      	movs	r3, #2
 8002666:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002668:	f107 030c 	add.w	r3, r7, #12
 800266c:	4619      	mov	r1, r3
 800266e:	4805      	ldr	r0, [pc, #20]	; (8002684 <HAL_TIM_MspPostInit+0x6c>)
 8002670:	f000 fb76 	bl	8002d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002674:	bf00      	nop
 8002676:	3720      	adds	r7, #32
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40000400 	.word	0x40000400
 8002680:	40023800 	.word	0x40023800
 8002684:	40020800 	.word	0x40020800

08002688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b0aa      	sub	sp, #168	; 0xa8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a0:	f107 0310 	add.w	r3, r7, #16
 80026a4:	2284      	movs	r2, #132	; 0x84
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f005 fc0a 	bl	8007ec2 <memset>
  if(huart->Instance==USART3)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a22      	ldr	r2, [pc, #136]	; (800273c <HAL_UART_MspInit+0xb4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d13c      	bne.n	8002732 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80026b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80026be:	2300      	movs	r3, #0
 80026c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026c2:	f107 0310 	add.w	r3, r7, #16
 80026c6:	4618      	mov	r0, r3
 80026c8:	f002 fa16 	bl	8004af8 <HAL_RCCEx_PeriphCLKConfig>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80026d2:	f7ff feaf 	bl	8002434 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80026d6:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <HAL_UART_MspInit+0xb8>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	4a19      	ldr	r2, [pc, #100]	; (8002740 <HAL_UART_MspInit+0xb8>)
 80026dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
 80026e2:	4b17      	ldr	r3, [pc, #92]	; (8002740 <HAL_UART_MspInit+0xb8>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ee:	4b14      	ldr	r3, [pc, #80]	; (8002740 <HAL_UART_MspInit+0xb8>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a13      	ldr	r2, [pc, #76]	; (8002740 <HAL_UART_MspInit+0xb8>)
 80026f4:	f043 0308 	orr.w	r3, r3, #8
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <HAL_UART_MspInit+0xb8>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002706:	f44f 7340 	mov.w	r3, #768	; 0x300
 800270a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002714:	2301      	movs	r3, #1
 8002716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271a:	2303      	movs	r3, #3
 800271c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002720:	2307      	movs	r3, #7
 8002722:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002726:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800272a:	4619      	mov	r1, r3
 800272c:	4805      	ldr	r0, [pc, #20]	; (8002744 <HAL_UART_MspInit+0xbc>)
 800272e:	f000 fb17 	bl	8002d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002732:	bf00      	nop
 8002734:	37a8      	adds	r7, #168	; 0xa8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40004800 	.word	0x40004800
 8002740:	40023800 	.word	0x40023800
 8002744:	40020c00 	.word	0x40020c00

08002748 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b0ac      	sub	sp, #176	; 0xb0
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002760:	f107 0318 	add.w	r3, r7, #24
 8002764:	2284      	movs	r2, #132	; 0x84
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f005 fbaa 	bl	8007ec2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002776:	d159      	bne.n	800282c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002778:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800277c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800277e:	2300      	movs	r3, #0
 8002780:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002784:	f107 0318 	add.w	r3, r7, #24
 8002788:	4618      	mov	r0, r3
 800278a:	f002 f9b5 	bl	8004af8 <HAL_RCCEx_PeriphCLKConfig>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002794:	f7ff fe4e 	bl	8002434 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002798:	4b26      	ldr	r3, [pc, #152]	; (8002834 <HAL_PCD_MspInit+0xec>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	4a25      	ldr	r2, [pc, #148]	; (8002834 <HAL_PCD_MspInit+0xec>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	6313      	str	r3, [r2, #48]	; 0x30
 80027a4:	4b23      	ldr	r3, [pc, #140]	; (8002834 <HAL_PCD_MspInit+0xec>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80027b0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80027b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c4:	2303      	movs	r3, #3
 80027c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80027ca:	230a      	movs	r3, #10
 80027cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027d4:	4619      	mov	r1, r3
 80027d6:	4818      	ldr	r0, [pc, #96]	; (8002838 <HAL_PCD_MspInit+0xf0>)
 80027d8:	f000 fac2 	bl	8002d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80027dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80027f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027f4:	4619      	mov	r1, r3
 80027f6:	4810      	ldr	r0, [pc, #64]	; (8002838 <HAL_PCD_MspInit+0xf0>)
 80027f8:	f000 fab2 	bl	8002d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80027fc:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <HAL_PCD_MspInit+0xec>)
 80027fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002800:	4a0c      	ldr	r2, [pc, #48]	; (8002834 <HAL_PCD_MspInit+0xec>)
 8002802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002806:	6353      	str	r3, [r2, #52]	; 0x34
 8002808:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <HAL_PCD_MspInit+0xec>)
 800280a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4b07      	ldr	r3, [pc, #28]	; (8002834 <HAL_PCD_MspInit+0xec>)
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	4a06      	ldr	r2, [pc, #24]	; (8002834 <HAL_PCD_MspInit+0xec>)
 800281a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800281e:	6453      	str	r3, [r2, #68]	; 0x44
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <HAL_PCD_MspInit+0xec>)
 8002822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800282c:	bf00      	nop
 800282e:	37b0      	adds	r7, #176	; 0xb0
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40023800 	.word	0x40023800
 8002838:	40020000 	.word	0x40020000

0800283c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002840:	e7fe      	b.n	8002840 <NMI_Handler+0x4>

08002842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002846:	e7fe      	b.n	8002846 <HardFault_Handler+0x4>

08002848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800284c:	e7fe      	b.n	800284c <MemManage_Handler+0x4>

0800284e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002852:	e7fe      	b.n	8002852 <BusFault_Handler+0x4>

08002854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002858:	e7fe      	b.n	8002858 <UsageFault_Handler+0x4>

0800285a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002888:	f000 f940 	bl	8002b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800288c:	bf00      	nop
 800288e:	bd80      	pop	{r7, pc}

08002890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return 1;
 8002894:	2301      	movs	r3, #1
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <_kill>:

int _kill(int pid, int sig)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028aa:	f005 fb5d 	bl	8007f68 <__errno>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2216      	movs	r2, #22
 80028b2:	601a      	str	r2, [r3, #0]
  return -1;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <_exit>:

void _exit (int status)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ffe7 	bl	80028a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028d2:	e7fe      	b.n	80028d2 <_exit+0x12>

080028d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	e00a      	b.n	80028fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028e6:	f3af 8000 	nop.w
 80028ea:	4601      	mov	r1, r0
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	60ba      	str	r2, [r7, #8]
 80028f2:	b2ca      	uxtb	r2, r1
 80028f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	3301      	adds	r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	dbf0      	blt.n	80028e6 <_read+0x12>
  }

  return len;
 8002904:	687b      	ldr	r3, [r7, #4]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	e009      	b.n	8002934 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	60ba      	str	r2, [r7, #8]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3301      	adds	r3, #1
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	dbf1      	blt.n	8002920 <_write+0x12>
  }
  return len;
 800293c:	687b      	ldr	r3, [r7, #4]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <_close>:

int _close(int file)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800296e:	605a      	str	r2, [r3, #4]
  return 0;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <_isatty>:

int _isatty(int file)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002986:	2301      	movs	r3, #1
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029b8:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <_sbrk+0x5c>)
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <_sbrk+0x60>)
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029c4:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <_sbrk+0x64>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d102      	bne.n	80029d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <_sbrk+0x64>)
 80029ce:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <_sbrk+0x68>)
 80029d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <_sbrk+0x64>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d207      	bcs.n	80029f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029e0:	f005 fac2 	bl	8007f68 <__errno>
 80029e4:	4603      	mov	r3, r0
 80029e6:	220c      	movs	r2, #12
 80029e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295
 80029ee:	e009      	b.n	8002a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029f0:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <_sbrk+0x64>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029f6:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <_sbrk+0x64>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	4a05      	ldr	r2, [pc, #20]	; (8002a14 <_sbrk+0x64>)
 8002a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a02:	68fb      	ldr	r3, [r7, #12]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20050000 	.word	0x20050000
 8002a10:	00000400 	.word	0x00000400
 8002a14:	200008a8 	.word	0x200008a8
 8002a18:	20000a00 	.word	0x20000a00

08002a1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <SystemInit+0x20>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a26:	4a05      	ldr	r2, [pc, #20]	; (8002a3c <SystemInit+0x20>)
 8002a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a44:	480d      	ldr	r0, [pc, #52]	; (8002a7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a46:	490e      	ldr	r1, [pc, #56]	; (8002a80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a48:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a4c:	e002      	b.n	8002a54 <LoopCopyDataInit>

08002a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a52:	3304      	adds	r3, #4

08002a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a58:	d3f9      	bcc.n	8002a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a5a:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a5c:	4c0b      	ldr	r4, [pc, #44]	; (8002a8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a60:	e001      	b.n	8002a66 <LoopFillZerobss>

08002a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a64:	3204      	adds	r2, #4

08002a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a68:	d3fb      	bcc.n	8002a62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a6a:	f7ff ffd7 	bl	8002a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a6e:	f005 fa81 	bl	8007f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a72:	f7ff f92d 	bl	8001cd0 <main>
  bx  lr    
 8002a76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a78:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a80:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002a84:	0800a4ac 	.word	0x0800a4ac
  ldr r2, =_sbss
 8002a88:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002a8c:	200009fc 	.word	0x200009fc

08002a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a90:	e7fe      	b.n	8002a90 <ADC_IRQHandler>

08002a92 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a96:	2003      	movs	r0, #3
 8002a98:	f000 f92e 	bl	8002cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f000 f805 	bl	8002aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aa2:	f7ff fccd 	bl	8002440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_InitTick+0x54>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <HAL_InitTick+0x58>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	4619      	mov	r1, r3
 8002abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f93b 	bl	8002d46 <HAL_SYSTICK_Config>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00e      	b.n	8002af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b0f      	cmp	r3, #15
 8002ade:	d80a      	bhi.n	8002af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	f000 f911 	bl	8002d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aec:	4a06      	ldr	r2, [pc, #24]	; (8002b08 <HAL_InitTick+0x5c>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	e000      	b.n	8002af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20000008 	.word	0x20000008
 8002b04:	20000010 	.word	0x20000010
 8002b08:	2000000c 	.word	0x2000000c

08002b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_IncTick+0x20>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_IncTick+0x24>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <HAL_IncTick+0x24>)
 8002b1e:	6013      	str	r3, [r2, #0]
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000010 	.word	0x20000010
 8002b30:	200008ac 	.word	0x200008ac

08002b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return uwTick;
 8002b38:	4b03      	ldr	r3, [pc, #12]	; (8002b48 <HAL_GetTick+0x14>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	200008ac 	.word	0x200008ac

08002b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b54:	f7ff ffee 	bl	8002b34 <HAL_GetTick>
 8002b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b64:	d005      	beq.n	8002b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <HAL_Delay+0x44>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b72:	bf00      	nop
 8002b74:	f7ff ffde 	bl	8002b34 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d8f7      	bhi.n	8002b74 <HAL_Delay+0x28>
  {
  }
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000010 	.word	0x20000010

08002b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc2:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <__NVIC_SetPriorityGrouping+0x40>)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	60d3      	str	r3, [r2, #12]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000ed00 	.word	0xe000ed00
 8002bd8:	05fa0000 	.word	0x05fa0000

08002bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	f003 0307 	and.w	r3, r3, #7
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	6039      	str	r1, [r7, #0]
 8002c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	db0a      	blt.n	8002c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	490c      	ldr	r1, [pc, #48]	; (8002c44 <__NVIC_SetPriority+0x4c>)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	0112      	lsls	r2, r2, #4
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c20:	e00a      	b.n	8002c38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4908      	ldr	r1, [pc, #32]	; (8002c48 <__NVIC_SetPriority+0x50>)
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	3b04      	subs	r3, #4
 8002c30:	0112      	lsls	r2, r2, #4
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	440b      	add	r3, r1
 8002c36:	761a      	strb	r2, [r3, #24]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000e100 	.word	0xe000e100
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b089      	sub	sp, #36	; 0x24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f1c3 0307 	rsb	r3, r3, #7
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	bf28      	it	cs
 8002c6a:	2304      	movcs	r3, #4
 8002c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3304      	adds	r3, #4
 8002c72:	2b06      	cmp	r3, #6
 8002c74:	d902      	bls.n	8002c7c <NVIC_EncodePriority+0x30>
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3b03      	subs	r3, #3
 8002c7a:	e000      	b.n	8002c7e <NVIC_EncodePriority+0x32>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43da      	mvns	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	401a      	ands	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c94:	f04f 31ff 	mov.w	r1, #4294967295
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9e:	43d9      	mvns	r1, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	4313      	orrs	r3, r2
         );
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3724      	adds	r7, #36	; 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc4:	d301      	bcc.n	8002cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e00f      	b.n	8002cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cca:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <SysTick_Config+0x40>)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cd2:	210f      	movs	r1, #15
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd8:	f7ff ff8e 	bl	8002bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <SysTick_Config+0x40>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce2:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <SysTick_Config+0x40>)
 8002ce4:	2207      	movs	r2, #7
 8002ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	e000e010 	.word	0xe000e010

08002cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff ff47 	bl	8002b94 <__NVIC_SetPriorityGrouping>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	4603      	mov	r3, r0
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d20:	f7ff ff5c 	bl	8002bdc <__NVIC_GetPriorityGrouping>
 8002d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	6978      	ldr	r0, [r7, #20]
 8002d2c:	f7ff ff8e 	bl	8002c4c <NVIC_EncodePriority>
 8002d30:	4602      	mov	r2, r0
 8002d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff5d 	bl	8002bf8 <__NVIC_SetPriority>
}
 8002d3e:	bf00      	nop
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff ffb0 	bl	8002cb4 <SysTick_Config>
 8002d54:	4603      	mov	r3, r0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	; 0x24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
 8002d7e:	e175      	b.n	800306c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d80:	2201      	movs	r2, #1
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	f040 8164 	bne.w	8003066 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d005      	beq.n	8002db6 <HAL_GPIO_Init+0x56>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d130      	bne.n	8002e18 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dec:	2201      	movs	r2, #1
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 0201 	and.w	r2, r3, #1
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d017      	beq.n	8002e54 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	2203      	movs	r2, #3
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d123      	bne.n	8002ea8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	08da      	lsrs	r2, r3, #3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3208      	adds	r2, #8
 8002e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	220f      	movs	r2, #15
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	08da      	lsrs	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3208      	adds	r2, #8
 8002ea2:	69b9      	ldr	r1, [r7, #24]
 8002ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0203 	and.w	r2, r3, #3
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80be 	beq.w	8003066 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eea:	4b66      	ldr	r3, [pc, #408]	; (8003084 <HAL_GPIO_Init+0x324>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	4a65      	ldr	r2, [pc, #404]	; (8003084 <HAL_GPIO_Init+0x324>)
 8002ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ef6:	4b63      	ldr	r3, [pc, #396]	; (8003084 <HAL_GPIO_Init+0x324>)
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f02:	4a61      	ldr	r2, [pc, #388]	; (8003088 <HAL_GPIO_Init+0x328>)
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	089b      	lsrs	r3, r3, #2
 8002f08:	3302      	adds	r3, #2
 8002f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	220f      	movs	r2, #15
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4013      	ands	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a58      	ldr	r2, [pc, #352]	; (800308c <HAL_GPIO_Init+0x32c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d037      	beq.n	8002f9e <HAL_GPIO_Init+0x23e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a57      	ldr	r2, [pc, #348]	; (8003090 <HAL_GPIO_Init+0x330>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d031      	beq.n	8002f9a <HAL_GPIO_Init+0x23a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a56      	ldr	r2, [pc, #344]	; (8003094 <HAL_GPIO_Init+0x334>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d02b      	beq.n	8002f96 <HAL_GPIO_Init+0x236>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a55      	ldr	r2, [pc, #340]	; (8003098 <HAL_GPIO_Init+0x338>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d025      	beq.n	8002f92 <HAL_GPIO_Init+0x232>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a54      	ldr	r2, [pc, #336]	; (800309c <HAL_GPIO_Init+0x33c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d01f      	beq.n	8002f8e <HAL_GPIO_Init+0x22e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a53      	ldr	r2, [pc, #332]	; (80030a0 <HAL_GPIO_Init+0x340>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d019      	beq.n	8002f8a <HAL_GPIO_Init+0x22a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a52      	ldr	r2, [pc, #328]	; (80030a4 <HAL_GPIO_Init+0x344>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d013      	beq.n	8002f86 <HAL_GPIO_Init+0x226>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a51      	ldr	r2, [pc, #324]	; (80030a8 <HAL_GPIO_Init+0x348>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00d      	beq.n	8002f82 <HAL_GPIO_Init+0x222>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a50      	ldr	r2, [pc, #320]	; (80030ac <HAL_GPIO_Init+0x34c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d007      	beq.n	8002f7e <HAL_GPIO_Init+0x21e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a4f      	ldr	r2, [pc, #316]	; (80030b0 <HAL_GPIO_Init+0x350>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d101      	bne.n	8002f7a <HAL_GPIO_Init+0x21a>
 8002f76:	2309      	movs	r3, #9
 8002f78:	e012      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f7a:	230a      	movs	r3, #10
 8002f7c:	e010      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f7e:	2308      	movs	r3, #8
 8002f80:	e00e      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f82:	2307      	movs	r3, #7
 8002f84:	e00c      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f86:	2306      	movs	r3, #6
 8002f88:	e00a      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f8a:	2305      	movs	r3, #5
 8002f8c:	e008      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f8e:	2304      	movs	r3, #4
 8002f90:	e006      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f92:	2303      	movs	r3, #3
 8002f94:	e004      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e002      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	69fa      	ldr	r2, [r7, #28]
 8002fa2:	f002 0203 	and.w	r2, r2, #3
 8002fa6:	0092      	lsls	r2, r2, #2
 8002fa8:	4093      	lsls	r3, r2
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fb0:	4935      	ldr	r1, [pc, #212]	; (8003088 <HAL_GPIO_Init+0x328>)
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	089b      	lsrs	r3, r3, #2
 8002fb6:	3302      	adds	r3, #2
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fbe:	4b3d      	ldr	r3, [pc, #244]	; (80030b4 <HAL_GPIO_Init+0x354>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fe2:	4a34      	ldr	r2, [pc, #208]	; (80030b4 <HAL_GPIO_Init+0x354>)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe8:	4b32      	ldr	r3, [pc, #200]	; (80030b4 <HAL_GPIO_Init+0x354>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800300c:	4a29      	ldr	r2, [pc, #164]	; (80030b4 <HAL_GPIO_Init+0x354>)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003012:	4b28      	ldr	r3, [pc, #160]	; (80030b4 <HAL_GPIO_Init+0x354>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	43db      	mvns	r3, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4013      	ands	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003036:	4a1f      	ldr	r2, [pc, #124]	; (80030b4 <HAL_GPIO_Init+0x354>)
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800303c:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <HAL_GPIO_Init+0x354>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003060:	4a14      	ldr	r2, [pc, #80]	; (80030b4 <HAL_GPIO_Init+0x354>)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3301      	adds	r3, #1
 800306a:	61fb      	str	r3, [r7, #28]
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	2b0f      	cmp	r3, #15
 8003070:	f67f ae86 	bls.w	8002d80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop
 8003078:	3724      	adds	r7, #36	; 0x24
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40023800 	.word	0x40023800
 8003088:	40013800 	.word	0x40013800
 800308c:	40020000 	.word	0x40020000
 8003090:	40020400 	.word	0x40020400
 8003094:	40020800 	.word	0x40020800
 8003098:	40020c00 	.word	0x40020c00
 800309c:	40021000 	.word	0x40021000
 80030a0:	40021400 	.word	0x40021400
 80030a4:	40021800 	.word	0x40021800
 80030a8:	40021c00 	.word	0x40021c00
 80030ac:	40022000 	.word	0x40022000
 80030b0:	40022400 	.word	0x40022400
 80030b4:	40013c00 	.word	0x40013c00

080030b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	807b      	strh	r3, [r7, #2]
 80030c4:	4613      	mov	r3, r2
 80030c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030c8:	787b      	ldrb	r3, [r7, #1]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ce:	887a      	ldrh	r2, [r7, #2]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030d4:	e003      	b.n	80030de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030d6:	887b      	ldrh	r3, [r7, #2]
 80030d8:	041a      	lsls	r2, r3, #16
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	619a      	str	r2, [r3, #24]
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e07f      	b.n	80031fe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7ff f9b8 	bl	8002488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2224      	movs	r2, #36	; 0x24
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800313c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800314c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d107      	bne.n	8003166 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	e006      	b.n	8003174 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003172:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d104      	bne.n	8003186 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003184:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <HAL_I2C_Init+0x11c>)
 8003192:	430b      	orrs	r3, r1
 8003194:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69d9      	ldr	r1, [r3, #28]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1a      	ldr	r2, [r3, #32]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	02008000 	.word	0x02008000

0800320c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af02      	add	r7, sp, #8
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	461a      	mov	r2, r3
 8003218:	460b      	mov	r3, r1
 800321a:	817b      	strh	r3, [r7, #10]
 800321c:	4613      	mov	r3, r2
 800321e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b20      	cmp	r3, #32
 800322a:	f040 80da 	bne.w	80033e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_I2C_Master_Transmit+0x30>
 8003238:	2302      	movs	r3, #2
 800323a:	e0d3      	b.n	80033e4 <HAL_I2C_Master_Transmit+0x1d8>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003244:	f7ff fc76 	bl	8002b34 <HAL_GetTick>
 8003248:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	2319      	movs	r3, #25
 8003250:	2201      	movs	r2, #1
 8003252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 fbc6 	bl	80039e8 <I2C_WaitOnFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e0be      	b.n	80033e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2221      	movs	r2, #33	; 0x21
 800326a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2210      	movs	r2, #16
 8003272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	893a      	ldrh	r2, [r7, #8]
 8003286:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	2bff      	cmp	r3, #255	; 0xff
 8003296:	d90e      	bls.n	80032b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	22ff      	movs	r2, #255	; 0xff
 800329c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	8979      	ldrh	r1, [r7, #10]
 80032a6:	4b51      	ldr	r3, [pc, #324]	; (80033ec <HAL_I2C_Master_Transmit+0x1e0>)
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fd36 	bl	8003d20 <I2C_TransferConfig>
 80032b4:	e06c      	b.n	8003390 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	8979      	ldrh	r1, [r7, #10]
 80032c8:	4b48      	ldr	r3, [pc, #288]	; (80033ec <HAL_I2C_Master_Transmit+0x1e0>)
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fd25 	bl	8003d20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80032d6:	e05b      	b.n	8003390 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	6a39      	ldr	r1, [r7, #32]
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 fbc3 	bl	8003a68 <I2C_WaitOnTXISFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e07b      	b.n	80033e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	781a      	ldrb	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d034      	beq.n	8003390 <HAL_I2C_Master_Transmit+0x184>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332a:	2b00      	cmp	r3, #0
 800332c:	d130      	bne.n	8003390 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	2200      	movs	r2, #0
 8003336:	2180      	movs	r1, #128	; 0x80
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 fb55 	bl	80039e8 <I2C_WaitOnFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e04d      	b.n	80033e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	2bff      	cmp	r3, #255	; 0xff
 8003350:	d90e      	bls.n	8003370 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	22ff      	movs	r2, #255	; 0xff
 8003356:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335c:	b2da      	uxtb	r2, r3
 800335e:	8979      	ldrh	r1, [r7, #10]
 8003360:	2300      	movs	r3, #0
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 fcd9 	bl	8003d20 <I2C_TransferConfig>
 800336e:	e00f      	b.n	8003390 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337e:	b2da      	uxtb	r2, r3
 8003380:	8979      	ldrh	r1, [r7, #10]
 8003382:	2300      	movs	r3, #0
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 fcc8 	bl	8003d20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d19e      	bne.n	80032d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	6a39      	ldr	r1, [r7, #32]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 fba2 	bl	8003ae8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e01a      	b.n	80033e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2220      	movs	r2, #32
 80033b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80033c2:	400b      	ands	r3, r1
 80033c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	e000      	b.n	80033e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
  }
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	80002000 	.word	0x80002000
 80033f0:	fe00e800 	.word	0xfe00e800

080033f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	4608      	mov	r0, r1
 80033fe:	4611      	mov	r1, r2
 8003400:	461a      	mov	r2, r3
 8003402:	4603      	mov	r3, r0
 8003404:	817b      	strh	r3, [r7, #10]
 8003406:	460b      	mov	r3, r1
 8003408:	813b      	strh	r3, [r7, #8]
 800340a:	4613      	mov	r3, r2
 800340c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b20      	cmp	r3, #32
 8003418:	f040 80f9 	bne.w	800360e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <HAL_I2C_Mem_Write+0x34>
 8003422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003424:	2b00      	cmp	r3, #0
 8003426:	d105      	bne.n	8003434 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800342e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0ed      	b.n	8003610 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_I2C_Mem_Write+0x4e>
 800343e:	2302      	movs	r3, #2
 8003440:	e0e6      	b.n	8003610 <HAL_I2C_Mem_Write+0x21c>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800344a:	f7ff fb73 	bl	8002b34 <HAL_GetTick>
 800344e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2319      	movs	r3, #25
 8003456:	2201      	movs	r2, #1
 8003458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 fac3 	bl	80039e8 <I2C_WaitOnFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0d1      	b.n	8003610 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2221      	movs	r2, #33	; 0x21
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2240      	movs	r2, #64	; 0x40
 8003478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a3a      	ldr	r2, [r7, #32]
 8003486:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800348c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003494:	88f8      	ldrh	r0, [r7, #6]
 8003496:	893a      	ldrh	r2, [r7, #8]
 8003498:	8979      	ldrh	r1, [r7, #10]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	4603      	mov	r3, r0
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f9d3 	bl	8003850 <I2C_RequestMemoryWrite>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0a9      	b.n	8003610 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2bff      	cmp	r3, #255	; 0xff
 80034c4:	d90e      	bls.n	80034e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	22ff      	movs	r2, #255	; 0xff
 80034ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	8979      	ldrh	r1, [r7, #10]
 80034d4:	2300      	movs	r3, #0
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 fc1f 	bl	8003d20 <I2C_TransferConfig>
 80034e2:	e00f      	b.n	8003504 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	8979      	ldrh	r1, [r7, #10]
 80034f6:	2300      	movs	r3, #0
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 fc0e 	bl	8003d20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 faad 	bl	8003a68 <I2C_WaitOnTXISFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e07b      	b.n	8003610 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	781a      	ldrb	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d034      	beq.n	80035bc <HAL_I2C_Mem_Write+0x1c8>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	2b00      	cmp	r3, #0
 8003558:	d130      	bne.n	80035bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	2200      	movs	r2, #0
 8003562:	2180      	movs	r1, #128	; 0x80
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fa3f 	bl	80039e8 <I2C_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e04d      	b.n	8003610 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	2bff      	cmp	r3, #255	; 0xff
 800357c:	d90e      	bls.n	800359c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	22ff      	movs	r2, #255	; 0xff
 8003582:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003588:	b2da      	uxtb	r2, r3
 800358a:	8979      	ldrh	r1, [r7, #10]
 800358c:	2300      	movs	r3, #0
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fbc3 	bl	8003d20 <I2C_TransferConfig>
 800359a:	e00f      	b.n	80035bc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	8979      	ldrh	r1, [r7, #10]
 80035ae:	2300      	movs	r3, #0
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fbb2 	bl	8003d20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d19e      	bne.n	8003504 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 fa8c 	bl	8003ae8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e01a      	b.n	8003610 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2220      	movs	r2, #32
 80035e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6859      	ldr	r1, [r3, #4]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <HAL_I2C_Mem_Write+0x224>)
 80035ee:	400b      	ands	r3, r1
 80035f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	e000      	b.n	8003610 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800360e:	2302      	movs	r3, #2
  }
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	fe00e800 	.word	0xfe00e800

0800361c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	4608      	mov	r0, r1
 8003626:	4611      	mov	r1, r2
 8003628:	461a      	mov	r2, r3
 800362a:	4603      	mov	r3, r0
 800362c:	817b      	strh	r3, [r7, #10]
 800362e:	460b      	mov	r3, r1
 8003630:	813b      	strh	r3, [r7, #8]
 8003632:	4613      	mov	r3, r2
 8003634:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b20      	cmp	r3, #32
 8003640:	f040 80fd 	bne.w	800383e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_I2C_Mem_Read+0x34>
 800364a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800364c:	2b00      	cmp	r3, #0
 800364e:	d105      	bne.n	800365c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003656:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0f1      	b.n	8003840 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <HAL_I2C_Mem_Read+0x4e>
 8003666:	2302      	movs	r3, #2
 8003668:	e0ea      	b.n	8003840 <HAL_I2C_Mem_Read+0x224>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003672:	f7ff fa5f 	bl	8002b34 <HAL_GetTick>
 8003676:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	2319      	movs	r3, #25
 800367e:	2201      	movs	r2, #1
 8003680:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f9af 	bl	80039e8 <I2C_WaitOnFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0d5      	b.n	8003840 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2222      	movs	r2, #34	; 0x22
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2240      	movs	r2, #64	; 0x40
 80036a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a3a      	ldr	r2, [r7, #32]
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036bc:	88f8      	ldrh	r0, [r7, #6]
 80036be:	893a      	ldrh	r2, [r7, #8]
 80036c0:	8979      	ldrh	r1, [r7, #10]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	9301      	str	r3, [sp, #4]
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	4603      	mov	r3, r0
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f913 	bl	80038f8 <I2C_RequestMemoryRead>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0ad      	b.n	8003840 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2bff      	cmp	r3, #255	; 0xff
 80036ec:	d90e      	bls.n	800370c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	22ff      	movs	r2, #255	; 0xff
 80036f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	8979      	ldrh	r1, [r7, #10]
 80036fc:	4b52      	ldr	r3, [pc, #328]	; (8003848 <HAL_I2C_Mem_Read+0x22c>)
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 fb0b 	bl	8003d20 <I2C_TransferConfig>
 800370a:	e00f      	b.n	800372c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371a:	b2da      	uxtb	r2, r3
 800371c:	8979      	ldrh	r1, [r7, #10]
 800371e:	4b4a      	ldr	r3, [pc, #296]	; (8003848 <HAL_I2C_Mem_Read+0x22c>)
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 fafa 	bl	8003d20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003732:	2200      	movs	r2, #0
 8003734:	2104      	movs	r1, #4
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f956 	bl	80039e8 <I2C_WaitOnFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e07c      	b.n	8003840 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d034      	beq.n	80037ec <HAL_I2C_Mem_Read+0x1d0>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	2b00      	cmp	r3, #0
 8003788:	d130      	bne.n	80037ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003790:	2200      	movs	r2, #0
 8003792:	2180      	movs	r1, #128	; 0x80
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f927 	bl	80039e8 <I2C_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e04d      	b.n	8003840 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2bff      	cmp	r3, #255	; 0xff
 80037ac:	d90e      	bls.n	80037cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	22ff      	movs	r2, #255	; 0xff
 80037b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	8979      	ldrh	r1, [r7, #10]
 80037bc:	2300      	movs	r3, #0
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 faab 	bl	8003d20 <I2C_TransferConfig>
 80037ca:	e00f      	b.n	80037ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	8979      	ldrh	r1, [r7, #10]
 80037de:	2300      	movs	r3, #0
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fa9a 	bl	8003d20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d19a      	bne.n	800372c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f974 	bl	8003ae8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e01a      	b.n	8003840 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2220      	movs	r2, #32
 8003810:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6859      	ldr	r1, [r3, #4]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_I2C_Mem_Read+0x230>)
 800381e:	400b      	ands	r3, r1
 8003820:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e000      	b.n	8003840 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
  }
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	80002400 	.word	0x80002400
 800384c:	fe00e800 	.word	0xfe00e800

08003850 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af02      	add	r7, sp, #8
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	4608      	mov	r0, r1
 800385a:	4611      	mov	r1, r2
 800385c:	461a      	mov	r2, r3
 800385e:	4603      	mov	r3, r0
 8003860:	817b      	strh	r3, [r7, #10]
 8003862:	460b      	mov	r3, r1
 8003864:	813b      	strh	r3, [r7, #8]
 8003866:	4613      	mov	r3, r2
 8003868:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800386a:	88fb      	ldrh	r3, [r7, #6]
 800386c:	b2da      	uxtb	r2, r3
 800386e:	8979      	ldrh	r1, [r7, #10]
 8003870:	4b20      	ldr	r3, [pc, #128]	; (80038f4 <I2C_RequestMemoryWrite+0xa4>)
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fa51 	bl	8003d20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	69b9      	ldr	r1, [r7, #24]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f8f0 	bl	8003a68 <I2C_WaitOnTXISFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e02c      	b.n	80038ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d105      	bne.n	80038a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003898:	893b      	ldrh	r3, [r7, #8]
 800389a:	b2da      	uxtb	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	629a      	str	r2, [r3, #40]	; 0x28
 80038a2:	e015      	b.n	80038d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038a4:	893b      	ldrh	r3, [r7, #8]
 80038a6:	0a1b      	lsrs	r3, r3, #8
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b2:	69fa      	ldr	r2, [r7, #28]
 80038b4:	69b9      	ldr	r1, [r7, #24]
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f8d6 	bl	8003a68 <I2C_WaitOnTXISFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e012      	b.n	80038ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038c6:	893b      	ldrh	r3, [r7, #8]
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	2200      	movs	r2, #0
 80038d8:	2180      	movs	r1, #128	; 0x80
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 f884 	bl	80039e8 <I2C_WaitOnFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	80002000 	.word	0x80002000

080038f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	4608      	mov	r0, r1
 8003902:	4611      	mov	r1, r2
 8003904:	461a      	mov	r2, r3
 8003906:	4603      	mov	r3, r0
 8003908:	817b      	strh	r3, [r7, #10]
 800390a:	460b      	mov	r3, r1
 800390c:	813b      	strh	r3, [r7, #8]
 800390e:	4613      	mov	r3, r2
 8003910:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	b2da      	uxtb	r2, r3
 8003916:	8979      	ldrh	r1, [r7, #10]
 8003918:	4b20      	ldr	r3, [pc, #128]	; (800399c <I2C_RequestMemoryRead+0xa4>)
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	2300      	movs	r3, #0
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f9fe 	bl	8003d20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	69b9      	ldr	r1, [r7, #24]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f89d 	bl	8003a68 <I2C_WaitOnTXISFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e02c      	b.n	8003992 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d105      	bne.n	800394a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800393e:	893b      	ldrh	r3, [r7, #8]
 8003940:	b2da      	uxtb	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	629a      	str	r2, [r3, #40]	; 0x28
 8003948:	e015      	b.n	8003976 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800394a:	893b      	ldrh	r3, [r7, #8]
 800394c:	0a1b      	lsrs	r3, r3, #8
 800394e:	b29b      	uxth	r3, r3
 8003950:	b2da      	uxtb	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	69b9      	ldr	r1, [r7, #24]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f883 	bl	8003a68 <I2C_WaitOnTXISFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e012      	b.n	8003992 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800396c:	893b      	ldrh	r3, [r7, #8]
 800396e:	b2da      	uxtb	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2200      	movs	r2, #0
 800397e:	2140      	movs	r1, #64	; 0x40
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f831 	bl	80039e8 <I2C_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	80002000 	.word	0x80002000

080039a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d103      	bne.n	80039be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2200      	movs	r2, #0
 80039bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d007      	beq.n	80039dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	619a      	str	r2, [r3, #24]
  }
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	4613      	mov	r3, r2
 80039f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039f8:	e022      	b.n	8003a40 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a00:	d01e      	beq.n	8003a40 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a02:	f7ff f897 	bl	8002b34 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d302      	bcc.n	8003a18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d113      	bne.n	8003a40 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1c:	f043 0220 	orr.w	r2, r3, #32
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e00f      	b.n	8003a60 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	bf0c      	ite	eq
 8003a50:	2301      	moveq	r3, #1
 8003a52:	2300      	movne	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	461a      	mov	r2, r3
 8003a58:	79fb      	ldrb	r3, [r7, #7]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d0cd      	beq.n	80039fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a74:	e02c      	b.n	8003ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f870 	bl	8003b60 <I2C_IsErrorOccurred>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e02a      	b.n	8003ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a90:	d01e      	beq.n	8003ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a92:	f7ff f84f 	bl	8002b34 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d302      	bcc.n	8003aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d113      	bne.n	8003ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aac:	f043 0220 	orr.w	r2, r3, #32
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e007      	b.n	8003ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d1cb      	bne.n	8003a76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003af4:	e028      	b.n	8003b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f830 	bl	8003b60 <I2C_IsErrorOccurred>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e026      	b.n	8003b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0a:	f7ff f813 	bl	8002b34 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d302      	bcc.n	8003b20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d113      	bne.n	8003b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	f043 0220 	orr.w	r2, r3, #32
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e007      	b.n	8003b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d1cf      	bne.n	8003af6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08a      	sub	sp, #40	; 0x28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d068      	beq.n	8003c5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2210      	movs	r2, #16
 8003b92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b94:	e049      	b.n	8003c2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9c:	d045      	beq.n	8003c2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b9e:	f7fe ffc9 	bl	8002b34 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d302      	bcc.n	8003bb4 <I2C_IsErrorOccurred+0x54>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d13a      	bne.n	8003c2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bc6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd6:	d121      	bne.n	8003c1c <I2C_IsErrorOccurred+0xbc>
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bde:	d01d      	beq.n	8003c1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003be0:	7cfb      	ldrb	r3, [r7, #19]
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	d01a      	beq.n	8003c1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bf4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003bf6:	f7fe ff9d 	bl	8002b34 <HAL_GetTick>
 8003bfa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bfc:	e00e      	b.n	8003c1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003bfe:	f7fe ff99 	bl	8002b34 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b19      	cmp	r3, #25
 8003c0a:	d907      	bls.n	8003c1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	f043 0320 	orr.w	r3, r3, #32
 8003c12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003c1a:	e006      	b.n	8003c2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d1e9      	bne.n	8003bfe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	d003      	beq.n	8003c40 <I2C_IsErrorOccurred+0xe0>
 8003c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0aa      	beq.n	8003b96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d103      	bne.n	8003c50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	f043 0304 	orr.w	r3, r3, #4
 8003c56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00b      	beq.n	8003c88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00b      	beq.n	8003caa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	f043 0308 	orr.w	r3, r3, #8
 8003c98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ca2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00b      	beq.n	8003ccc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	f043 0302 	orr.w	r3, r3, #2
 8003cba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01c      	beq.n	8003d0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7ff fe63 	bl	80039a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6859      	ldr	r1, [r3, #4]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <I2C_IsErrorOccurred+0x1bc>)
 8003ce6:	400b      	ands	r3, r1
 8003ce8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3728      	adds	r7, #40	; 0x28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	fe00e800 	.word	0xfe00e800

08003d20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	607b      	str	r3, [r7, #4]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	817b      	strh	r3, [r7, #10]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d32:	897b      	ldrh	r3, [r7, #10]
 8003d34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d38:	7a7b      	ldrb	r3, [r7, #9]
 8003d3a:	041b      	lsls	r3, r3, #16
 8003d3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	0d5b      	lsrs	r3, r3, #21
 8003d5a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d5e:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <I2C_TransferConfig+0x60>)
 8003d60:	430b      	orrs	r3, r1
 8003d62:	43db      	mvns	r3, r3
 8003d64:	ea02 0103 	and.w	r1, r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d72:	bf00      	nop
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	03ff63ff 	.word	0x03ff63ff

08003d84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	d138      	bne.n	8003e0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e032      	b.n	8003e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2224      	movs	r2, #36	; 0x24
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0201 	bic.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6819      	ldr	r1, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e000      	b.n	8003e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e0c:	2302      	movs	r3, #2
  }
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b085      	sub	sp, #20
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d139      	bne.n	8003ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e033      	b.n	8003ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2224      	movs	r2, #36	; 0x24
 8003e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0201 	bic.w	r2, r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	021b      	lsls	r3, r3, #8
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e000      	b.n	8003ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ea4:	2302      	movs	r3, #2
  }
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eb4:	b08f      	sub	sp, #60	; 0x3c
 8003eb6:	af0a      	add	r7, sp, #40	; 0x28
 8003eb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e116      	b.n	80040f2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fe fc32 	bl	8002748 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f002 ffb6 	bl	8006e74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	603b      	str	r3, [r7, #0]
 8003f0e:	687e      	ldr	r6, [r7, #4]
 8003f10:	466d      	mov	r5, sp
 8003f12:	f106 0410 	add.w	r4, r6, #16
 8003f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f22:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f26:	1d33      	adds	r3, r6, #4
 8003f28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f2a:	6838      	ldr	r0, [r7, #0]
 8003f2c:	f002 ff4a 	bl	8006dc4 <USB_CoreInit>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d005      	beq.n	8003f42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e0d7      	b.n	80040f2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2100      	movs	r1, #0
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f002 ffa4 	bl	8006e96 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]
 8003f52:	e04a      	b.n	8003fea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f54:	7bfa      	ldrb	r2, [r7, #15]
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	333d      	adds	r3, #61	; 0x3d
 8003f64:	2201      	movs	r2, #1
 8003f66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f68:	7bfa      	ldrb	r2, [r7, #15]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	333c      	adds	r3, #60	; 0x3c
 8003f78:	7bfa      	ldrb	r2, [r7, #15]
 8003f7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f7c:	7bfa      	ldrb	r2, [r7, #15]
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	b298      	uxth	r0, r3
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	3344      	adds	r3, #68	; 0x44
 8003f90:	4602      	mov	r2, r0
 8003f92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f94:	7bfa      	ldrb	r2, [r7, #15]
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	3340      	adds	r3, #64	; 0x40
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fa8:	7bfa      	ldrb	r2, [r7, #15]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	3348      	adds	r3, #72	; 0x48
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fbc:	7bfa      	ldrb	r2, [r7, #15]
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	334c      	adds	r3, #76	; 0x4c
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fd0:	7bfa      	ldrb	r2, [r7, #15]
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	3354      	adds	r3, #84	; 0x54
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]
 8003fea:	7bfa      	ldrb	r2, [r7, #15]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d3af      	bcc.n	8003f54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	73fb      	strb	r3, [r7, #15]
 8003ff8:	e044      	b.n	8004084 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ffa:	7bfa      	ldrb	r2, [r7, #15]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	4413      	add	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800400c:	2200      	movs	r2, #0
 800400e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004010:	7bfa      	ldrb	r2, [r7, #15]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004022:	7bfa      	ldrb	r2, [r7, #15]
 8004024:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004026:	7bfa      	ldrb	r2, [r7, #15]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800403c:	7bfa      	ldrb	r2, [r7, #15]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	4413      	add	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004052:	7bfa      	ldrb	r2, [r7, #15]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004068:	7bfa      	ldrb	r2, [r7, #15]
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	3301      	adds	r3, #1
 8004082:	73fb      	strb	r3, [r7, #15]
 8004084:	7bfa      	ldrb	r2, [r7, #15]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	429a      	cmp	r2, r3
 800408c:	d3b5      	bcc.n	8003ffa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	687e      	ldr	r6, [r7, #4]
 8004096:	466d      	mov	r5, sp
 8004098:	f106 0410 	add.w	r4, r6, #16
 800409c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800409e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80040ac:	1d33      	adds	r3, r6, #4
 80040ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040b0:	6838      	ldr	r0, [r7, #0]
 80040b2:	f002 ff3d 	bl	8006f30 <USB_DevInit>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e014      	b.n	80040f2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d102      	bne.n	80040e6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f80b 	bl	80040fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f003 f8fb 	bl	80072e6 <USB_DevDisconnect>

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080040fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800412a:	4b05      	ldr	r3, [pc, #20]	; (8004140 <HAL_PCDEx_ActivateLPM+0x44>)
 800412c:	4313      	orrs	r3, r2
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	10000003 	.word	0x10000003

08004144 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a04      	ldr	r2, [pc, #16]	; (8004160 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800414e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004152:	6013      	str	r3, [r2, #0]
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40007000 	.word	0x40007000

08004164 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800416c:	2300      	movs	r3, #0
 800416e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e291      	b.n	800469e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 8087 	beq.w	8004296 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004188:	4b96      	ldr	r3, [pc, #600]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 030c 	and.w	r3, r3, #12
 8004190:	2b04      	cmp	r3, #4
 8004192:	d00c      	beq.n	80041ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004194:	4b93      	ldr	r3, [pc, #588]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 030c 	and.w	r3, r3, #12
 800419c:	2b08      	cmp	r3, #8
 800419e:	d112      	bne.n	80041c6 <HAL_RCC_OscConfig+0x62>
 80041a0:	4b90      	ldr	r3, [pc, #576]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ac:	d10b      	bne.n	80041c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ae:	4b8d      	ldr	r3, [pc, #564]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d06c      	beq.n	8004294 <HAL_RCC_OscConfig+0x130>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d168      	bne.n	8004294 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e26b      	b.n	800469e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ce:	d106      	bne.n	80041de <HAL_RCC_OscConfig+0x7a>
 80041d0:	4b84      	ldr	r3, [pc, #528]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a83      	ldr	r2, [pc, #524]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 80041d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	e02e      	b.n	800423c <HAL_RCC_OscConfig+0xd8>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10c      	bne.n	8004200 <HAL_RCC_OscConfig+0x9c>
 80041e6:	4b7f      	ldr	r3, [pc, #508]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a7e      	ldr	r2, [pc, #504]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 80041ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	4b7c      	ldr	r3, [pc, #496]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a7b      	ldr	r2, [pc, #492]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 80041f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	e01d      	b.n	800423c <HAL_RCC_OscConfig+0xd8>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004208:	d10c      	bne.n	8004224 <HAL_RCC_OscConfig+0xc0>
 800420a:	4b76      	ldr	r3, [pc, #472]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a75      	ldr	r2, [pc, #468]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	4b73      	ldr	r3, [pc, #460]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a72      	ldr	r2, [pc, #456]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 800421c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	e00b      	b.n	800423c <HAL_RCC_OscConfig+0xd8>
 8004224:	4b6f      	ldr	r3, [pc, #444]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a6e      	ldr	r2, [pc, #440]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 800422a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	4b6c      	ldr	r3, [pc, #432]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a6b      	ldr	r2, [pc, #428]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800423a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d013      	beq.n	800426c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fe fc76 	bl	8002b34 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800424c:	f7fe fc72 	bl	8002b34 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b64      	cmp	r3, #100	; 0x64
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e21f      	b.n	800469e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425e:	4b61      	ldr	r3, [pc, #388]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0f0      	beq.n	800424c <HAL_RCC_OscConfig+0xe8>
 800426a:	e014      	b.n	8004296 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fe fc62 	bl	8002b34 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004274:	f7fe fc5e 	bl	8002b34 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b64      	cmp	r3, #100	; 0x64
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e20b      	b.n	800469e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004286:	4b57      	ldr	r3, [pc, #348]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f0      	bne.n	8004274 <HAL_RCC_OscConfig+0x110>
 8004292:	e000      	b.n	8004296 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d069      	beq.n	8004376 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042a2:	4b50      	ldr	r3, [pc, #320]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 030c 	and.w	r3, r3, #12
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00b      	beq.n	80042c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ae:	4b4d      	ldr	r3, [pc, #308]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 030c 	and.w	r3, r3, #12
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d11c      	bne.n	80042f4 <HAL_RCC_OscConfig+0x190>
 80042ba:	4b4a      	ldr	r3, [pc, #296]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d116      	bne.n	80042f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042c6:	4b47      	ldr	r3, [pc, #284]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <HAL_RCC_OscConfig+0x17a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d001      	beq.n	80042de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e1df      	b.n	800469e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042de:	4b41      	ldr	r3, [pc, #260]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	493d      	ldr	r1, [pc, #244]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042f2:	e040      	b.n	8004376 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d023      	beq.n	8004344 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042fc:	4b39      	ldr	r3, [pc, #228]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a38      	ldr	r2, [pc, #224]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fe fc14 	bl	8002b34 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004310:	f7fe fc10 	bl	8002b34 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e1bd      	b.n	800469e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004322:	4b30      	ldr	r3, [pc, #192]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432e:	4b2d      	ldr	r3, [pc, #180]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	4929      	ldr	r1, [pc, #164]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]
 8004342:	e018      	b.n	8004376 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004344:	4b27      	ldr	r3, [pc, #156]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a26      	ldr	r2, [pc, #152]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fe fbf0 	bl	8002b34 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004358:	f7fe fbec 	bl	8002b34 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e199      	b.n	800469e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436a:	4b1e      	ldr	r3, [pc, #120]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d038      	beq.n	80043f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d019      	beq.n	80043be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438a:	4b16      	ldr	r3, [pc, #88]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 800438c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438e:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004396:	f7fe fbcd 	bl	8002b34 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439c:	e008      	b.n	80043b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800439e:	f7fe fbc9 	bl	8002b34 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e176      	b.n	800469e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b0:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 80043b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0f0      	beq.n	800439e <HAL_RCC_OscConfig+0x23a>
 80043bc:	e01a      	b.n	80043f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043be:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 80043c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c2:	4a08      	ldr	r2, [pc, #32]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 80043c4:	f023 0301 	bic.w	r3, r3, #1
 80043c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ca:	f7fe fbb3 	bl	8002b34 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d0:	e00a      	b.n	80043e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d2:	f7fe fbaf 	bl	8002b34 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d903      	bls.n	80043e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e15c      	b.n	800469e <HAL_RCC_OscConfig+0x53a>
 80043e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e8:	4b91      	ldr	r3, [pc, #580]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 80043ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1ee      	bne.n	80043d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 80a4 	beq.w	800454a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004402:	4b8b      	ldr	r3, [pc, #556]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10d      	bne.n	800442a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800440e:	4b88      	ldr	r3, [pc, #544]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	4a87      	ldr	r2, [pc, #540]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 8004414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004418:	6413      	str	r3, [r2, #64]	; 0x40
 800441a:	4b85      	ldr	r3, [pc, #532]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004422:	60bb      	str	r3, [r7, #8]
 8004424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004426:	2301      	movs	r3, #1
 8004428:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800442a:	4b82      	ldr	r3, [pc, #520]	; (8004634 <HAL_RCC_OscConfig+0x4d0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004432:	2b00      	cmp	r3, #0
 8004434:	d118      	bne.n	8004468 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004436:	4b7f      	ldr	r3, [pc, #508]	; (8004634 <HAL_RCC_OscConfig+0x4d0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a7e      	ldr	r2, [pc, #504]	; (8004634 <HAL_RCC_OscConfig+0x4d0>)
 800443c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004442:	f7fe fb77 	bl	8002b34 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800444a:	f7fe fb73 	bl	8002b34 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b64      	cmp	r3, #100	; 0x64
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e120      	b.n	800469e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800445c:	4b75      	ldr	r3, [pc, #468]	; (8004634 <HAL_RCC_OscConfig+0x4d0>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0f0      	beq.n	800444a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d106      	bne.n	800447e <HAL_RCC_OscConfig+0x31a>
 8004470:	4b6f      	ldr	r3, [pc, #444]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004474:	4a6e      	ldr	r2, [pc, #440]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	6713      	str	r3, [r2, #112]	; 0x70
 800447c:	e02d      	b.n	80044da <HAL_RCC_OscConfig+0x376>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10c      	bne.n	80044a0 <HAL_RCC_OscConfig+0x33c>
 8004486:	4b6a      	ldr	r3, [pc, #424]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	4a69      	ldr	r2, [pc, #420]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	6713      	str	r3, [r2, #112]	; 0x70
 8004492:	4b67      	ldr	r3, [pc, #412]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004496:	4a66      	ldr	r2, [pc, #408]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 8004498:	f023 0304 	bic.w	r3, r3, #4
 800449c:	6713      	str	r3, [r2, #112]	; 0x70
 800449e:	e01c      	b.n	80044da <HAL_RCC_OscConfig+0x376>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b05      	cmp	r3, #5
 80044a6:	d10c      	bne.n	80044c2 <HAL_RCC_OscConfig+0x35e>
 80044a8:	4b61      	ldr	r3, [pc, #388]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ac:	4a60      	ldr	r2, [pc, #384]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 80044ae:	f043 0304 	orr.w	r3, r3, #4
 80044b2:	6713      	str	r3, [r2, #112]	; 0x70
 80044b4:	4b5e      	ldr	r3, [pc, #376]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	4a5d      	ldr	r2, [pc, #372]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	6713      	str	r3, [r2, #112]	; 0x70
 80044c0:	e00b      	b.n	80044da <HAL_RCC_OscConfig+0x376>
 80044c2:	4b5b      	ldr	r3, [pc, #364]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	4a5a      	ldr	r2, [pc, #360]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 80044c8:	f023 0301 	bic.w	r3, r3, #1
 80044cc:	6713      	str	r3, [r2, #112]	; 0x70
 80044ce:	4b58      	ldr	r3, [pc, #352]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	4a57      	ldr	r2, [pc, #348]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 80044d4:	f023 0304 	bic.w	r3, r3, #4
 80044d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d015      	beq.n	800450e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e2:	f7fe fb27 	bl	8002b34 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e8:	e00a      	b.n	8004500 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ea:	f7fe fb23 	bl	8002b34 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e0ce      	b.n	800469e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004500:	4b4b      	ldr	r3, [pc, #300]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 8004502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0ee      	beq.n	80044ea <HAL_RCC_OscConfig+0x386>
 800450c:	e014      	b.n	8004538 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450e:	f7fe fb11 	bl	8002b34 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004514:	e00a      	b.n	800452c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004516:	f7fe fb0d 	bl	8002b34 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	f241 3288 	movw	r2, #5000	; 0x1388
 8004524:	4293      	cmp	r3, r2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e0b8      	b.n	800469e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452c:	4b40      	ldr	r3, [pc, #256]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 800452e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1ee      	bne.n	8004516 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004538:	7dfb      	ldrb	r3, [r7, #23]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d105      	bne.n	800454a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800453e:	4b3c      	ldr	r3, [pc, #240]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	4a3b      	ldr	r2, [pc, #236]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 8004544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004548:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 80a4 	beq.w	800469c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004554:	4b36      	ldr	r3, [pc, #216]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 030c 	and.w	r3, r3, #12
 800455c:	2b08      	cmp	r3, #8
 800455e:	d06b      	beq.n	8004638 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d149      	bne.n	80045fc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004568:	4b31      	ldr	r3, [pc, #196]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a30      	ldr	r2, [pc, #192]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 800456e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fe fade 	bl	8002b34 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800457c:	f7fe fada 	bl	8002b34 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e087      	b.n	800469e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458e:	4b28      	ldr	r3, [pc, #160]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f0      	bne.n	800457c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69da      	ldr	r2, [r3, #28]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	019b      	lsls	r3, r3, #6
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b0:	085b      	lsrs	r3, r3, #1
 80045b2:	3b01      	subs	r3, #1
 80045b4:	041b      	lsls	r3, r3, #16
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	061b      	lsls	r3, r3, #24
 80045be:	4313      	orrs	r3, r2
 80045c0:	4a1b      	ldr	r2, [pc, #108]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 80045c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045c6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045c8:	4b19      	ldr	r3, [pc, #100]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a18      	ldr	r2, [pc, #96]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 80045ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fe faae 	bl	8002b34 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045dc:	f7fe faaa 	bl	8002b34 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e057      	b.n	800469e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ee:	4b10      	ldr	r3, [pc, #64]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0f0      	beq.n	80045dc <HAL_RCC_OscConfig+0x478>
 80045fa:	e04f      	b.n	800469c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fc:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a0b      	ldr	r2, [pc, #44]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 8004602:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fe fa94 	bl	8002b34 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004610:	f7fe fa90 	bl	8002b34 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e03d      	b.n	800469e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004622:	4b03      	ldr	r3, [pc, #12]	; (8004630 <HAL_RCC_OscConfig+0x4cc>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x4ac>
 800462e:	e035      	b.n	800469c <HAL_RCC_OscConfig+0x538>
 8004630:	40023800 	.word	0x40023800
 8004634:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004638:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <HAL_RCC_OscConfig+0x544>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d028      	beq.n	8004698 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004650:	429a      	cmp	r2, r3
 8004652:	d121      	bne.n	8004698 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465e:	429a      	cmp	r2, r3
 8004660:	d11a      	bne.n	8004698 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004668:	4013      	ands	r3, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800466e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004670:	4293      	cmp	r3, r2
 8004672:	d111      	bne.n	8004698 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	085b      	lsrs	r3, r3, #1
 8004680:	3b01      	subs	r3, #1
 8004682:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004684:	429a      	cmp	r2, r3
 8004686:	d107      	bne.n	8004698 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d001      	beq.n	800469c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40023800 	.word	0x40023800

080046ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0d0      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046c4:	4b6a      	ldr	r3, [pc, #424]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 030f 	and.w	r3, r3, #15
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d910      	bls.n	80046f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d2:	4b67      	ldr	r3, [pc, #412]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f023 020f 	bic.w	r2, r3, #15
 80046da:	4965      	ldr	r1, [pc, #404]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	4313      	orrs	r3, r2
 80046e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e2:	4b63      	ldr	r3, [pc, #396]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d001      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0b8      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d020      	beq.n	8004742 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800470c:	4b59      	ldr	r3, [pc, #356]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	4a58      	ldr	r2, [pc, #352]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 8004712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004716:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004724:	4b53      	ldr	r3, [pc, #332]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	4a52      	ldr	r2, [pc, #328]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 800472a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800472e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004730:	4b50      	ldr	r3, [pc, #320]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	494d      	ldr	r1, [pc, #308]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d040      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d107      	bne.n	8004766 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004756:	4b47      	ldr	r3, [pc, #284]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d115      	bne.n	800478e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e07f      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d107      	bne.n	800477e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476e:	4b41      	ldr	r3, [pc, #260]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e073      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477e:	4b3d      	ldr	r3, [pc, #244]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e06b      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800478e:	4b39      	ldr	r3, [pc, #228]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f023 0203 	bic.w	r2, r3, #3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	4936      	ldr	r1, [pc, #216]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 800479c:	4313      	orrs	r3, r2
 800479e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a0:	f7fe f9c8 	bl	8002b34 <HAL_GetTick>
 80047a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a6:	e00a      	b.n	80047be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a8:	f7fe f9c4 	bl	8002b34 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e053      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047be:	4b2d      	ldr	r3, [pc, #180]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 020c 	and.w	r2, r3, #12
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d1eb      	bne.n	80047a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047d0:	4b27      	ldr	r3, [pc, #156]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d210      	bcs.n	8004800 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b24      	ldr	r3, [pc, #144]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 020f 	bic.w	r2, r3, #15
 80047e6:	4922      	ldr	r1, [pc, #136]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ee:	4b20      	ldr	r3, [pc, #128]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e032      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800480c:	4b19      	ldr	r3, [pc, #100]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4916      	ldr	r1, [pc, #88]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d009      	beq.n	800483e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800482a:	4b12      	ldr	r3, [pc, #72]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	490e      	ldr	r1, [pc, #56]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 800483a:	4313      	orrs	r3, r2
 800483c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800483e:	f000 f821 	bl	8004884 <HAL_RCC_GetSysClockFreq>
 8004842:	4602      	mov	r2, r0
 8004844:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	490a      	ldr	r1, [pc, #40]	; (8004878 <HAL_RCC_ClockConfig+0x1cc>)
 8004850:	5ccb      	ldrb	r3, [r1, r3]
 8004852:	fa22 f303 	lsr.w	r3, r2, r3
 8004856:	4a09      	ldr	r2, [pc, #36]	; (800487c <HAL_RCC_ClockConfig+0x1d0>)
 8004858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800485a:	4b09      	ldr	r3, [pc, #36]	; (8004880 <HAL_RCC_ClockConfig+0x1d4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f7fe f924 	bl	8002aac <HAL_InitTick>

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40023c00 	.word	0x40023c00
 8004874:	40023800 	.word	0x40023800
 8004878:	0800a110 	.word	0x0800a110
 800487c:	20000008 	.word	0x20000008
 8004880:	2000000c 	.word	0x2000000c

08004884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004888:	b094      	sub	sp, #80	; 0x50
 800488a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	647b      	str	r3, [r7, #68]	; 0x44
 8004890:	2300      	movs	r3, #0
 8004892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004894:	2300      	movs	r3, #0
 8004896:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800489c:	4b79      	ldr	r3, [pc, #484]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x200>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 030c 	and.w	r3, r3, #12
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d00d      	beq.n	80048c4 <HAL_RCC_GetSysClockFreq+0x40>
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	f200 80e1 	bhi.w	8004a70 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <HAL_RCC_GetSysClockFreq+0x34>
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d003      	beq.n	80048be <HAL_RCC_GetSysClockFreq+0x3a>
 80048b6:	e0db      	b.n	8004a70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048b8:	4b73      	ldr	r3, [pc, #460]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x204>)
 80048ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048bc:	e0db      	b.n	8004a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048be:	4b73      	ldr	r3, [pc, #460]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x208>)
 80048c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048c2:	e0d8      	b.n	8004a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048c4:	4b6f      	ldr	r3, [pc, #444]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048cc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80048ce:	4b6d      	ldr	r3, [pc, #436]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d063      	beq.n	80049a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048da:	4b6a      	ldr	r3, [pc, #424]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	099b      	lsrs	r3, r3, #6
 80048e0:	2200      	movs	r2, #0
 80048e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ec:	633b      	str	r3, [r7, #48]	; 0x30
 80048ee:	2300      	movs	r3, #0
 80048f0:	637b      	str	r3, [r7, #52]	; 0x34
 80048f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048f6:	4622      	mov	r2, r4
 80048f8:	462b      	mov	r3, r5
 80048fa:	f04f 0000 	mov.w	r0, #0
 80048fe:	f04f 0100 	mov.w	r1, #0
 8004902:	0159      	lsls	r1, r3, #5
 8004904:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004908:	0150      	lsls	r0, r2, #5
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	4621      	mov	r1, r4
 8004910:	1a51      	subs	r1, r2, r1
 8004912:	6139      	str	r1, [r7, #16]
 8004914:	4629      	mov	r1, r5
 8004916:	eb63 0301 	sbc.w	r3, r3, r1
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004928:	4659      	mov	r1, fp
 800492a:	018b      	lsls	r3, r1, #6
 800492c:	4651      	mov	r1, sl
 800492e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004932:	4651      	mov	r1, sl
 8004934:	018a      	lsls	r2, r1, #6
 8004936:	4651      	mov	r1, sl
 8004938:	ebb2 0801 	subs.w	r8, r2, r1
 800493c:	4659      	mov	r1, fp
 800493e:	eb63 0901 	sbc.w	r9, r3, r1
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800494e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004956:	4690      	mov	r8, r2
 8004958:	4699      	mov	r9, r3
 800495a:	4623      	mov	r3, r4
 800495c:	eb18 0303 	adds.w	r3, r8, r3
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	462b      	mov	r3, r5
 8004964:	eb49 0303 	adc.w	r3, r9, r3
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	f04f 0300 	mov.w	r3, #0
 8004972:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004976:	4629      	mov	r1, r5
 8004978:	024b      	lsls	r3, r1, #9
 800497a:	4621      	mov	r1, r4
 800497c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004980:	4621      	mov	r1, r4
 8004982:	024a      	lsls	r2, r1, #9
 8004984:	4610      	mov	r0, r2
 8004986:	4619      	mov	r1, r3
 8004988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498a:	2200      	movs	r2, #0
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
 800498e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004990:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004994:	f7fc f9c8 	bl	8000d28 <__aeabi_uldivmod>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4613      	mov	r3, r2
 800499e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a0:	e058      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049a2:	4b38      	ldr	r3, [pc, #224]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	099b      	lsrs	r3, r3, #6
 80049a8:	2200      	movs	r2, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	4611      	mov	r1, r2
 80049ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049b2:	623b      	str	r3, [r7, #32]
 80049b4:	2300      	movs	r3, #0
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
 80049b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049bc:	4642      	mov	r2, r8
 80049be:	464b      	mov	r3, r9
 80049c0:	f04f 0000 	mov.w	r0, #0
 80049c4:	f04f 0100 	mov.w	r1, #0
 80049c8:	0159      	lsls	r1, r3, #5
 80049ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ce:	0150      	lsls	r0, r2, #5
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4641      	mov	r1, r8
 80049d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80049da:	4649      	mov	r1, r9
 80049dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049f4:	ebb2 040a 	subs.w	r4, r2, sl
 80049f8:	eb63 050b 	sbc.w	r5, r3, fp
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	00eb      	lsls	r3, r5, #3
 8004a06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a0a:	00e2      	lsls	r2, r4, #3
 8004a0c:	4614      	mov	r4, r2
 8004a0e:	461d      	mov	r5, r3
 8004a10:	4643      	mov	r3, r8
 8004a12:	18e3      	adds	r3, r4, r3
 8004a14:	603b      	str	r3, [r7, #0]
 8004a16:	464b      	mov	r3, r9
 8004a18:	eb45 0303 	adc.w	r3, r5, r3
 8004a1c:	607b      	str	r3, [r7, #4]
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	028b      	lsls	r3, r1, #10
 8004a2e:	4621      	mov	r1, r4
 8004a30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a34:	4621      	mov	r1, r4
 8004a36:	028a      	lsls	r2, r1, #10
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a3e:	2200      	movs	r2, #0
 8004a40:	61bb      	str	r3, [r7, #24]
 8004a42:	61fa      	str	r2, [r7, #28]
 8004a44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a48:	f7fc f96e 	bl	8000d28 <__aeabi_uldivmod>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4613      	mov	r3, r2
 8004a52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a54:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	0c1b      	lsrs	r3, r3, #16
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	3301      	adds	r3, #1
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004a64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a6e:	e002      	b.n	8004a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3750      	adds	r7, #80	; 0x50
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a82:	bf00      	nop
 8004a84:	40023800 	.word	0x40023800
 8004a88:	00f42400 	.word	0x00f42400
 8004a8c:	007a1200 	.word	0x007a1200

08004a90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a94:	4b03      	ldr	r3, [pc, #12]	; (8004aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a96:	681b      	ldr	r3, [r3, #0]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	20000008 	.word	0x20000008

08004aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004aac:	f7ff fff0 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	0a9b      	lsrs	r3, r3, #10
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	4903      	ldr	r1, [pc, #12]	; (8004acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004abe:	5ccb      	ldrb	r3, [r1, r3]
 8004ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	0800a120 	.word	0x0800a120

08004ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ad4:	f7ff ffdc 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	0b5b      	lsrs	r3, r3, #13
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	4903      	ldr	r1, [pc, #12]	; (8004af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ae6:	5ccb      	ldrb	r3, [r1, r3]
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40023800 	.word	0x40023800
 8004af4:	0800a120 	.word	0x0800a120

08004af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d012      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b20:	4b69      	ldr	r3, [pc, #420]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	4a68      	ldr	r2, [pc, #416]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b2a:	6093      	str	r3, [r2, #8]
 8004b2c:	4b66      	ldr	r3, [pc, #408]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b34:	4964      	ldr	r1, [pc, #400]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b42:	2301      	movs	r3, #1
 8004b44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d017      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b52:	4b5d      	ldr	r3, [pc, #372]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b60:	4959      	ldr	r1, [pc, #356]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b70:	d101      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004b72:	2301      	movs	r3, #1
 8004b74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d017      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b8e:	4b4e      	ldr	r3, [pc, #312]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	494a      	ldr	r1, [pc, #296]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bac:	d101      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 808b 	beq.w	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bdc:	4b3a      	ldr	r3, [pc, #232]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	4a39      	ldr	r2, [pc, #228]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be6:	6413      	str	r3, [r2, #64]	; 0x40
 8004be8:	4b37      	ldr	r3, [pc, #220]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf0:	60bb      	str	r3, [r7, #8]
 8004bf2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bf4:	4b35      	ldr	r3, [pc, #212]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a34      	ldr	r2, [pc, #208]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c00:	f7fd ff98 	bl	8002b34 <HAL_GetTick>
 8004c04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c06:	e008      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c08:	f7fd ff94 	bl	8002b34 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b64      	cmp	r3, #100	; 0x64
 8004c14:	d901      	bls.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e357      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c1a:	4b2c      	ldr	r3, [pc, #176]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c26:	4b28      	ldr	r3, [pc, #160]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d035      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d02e      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c44:	4b20      	ldr	r3, [pc, #128]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c4e:	4b1e      	ldr	r3, [pc, #120]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	4a1d      	ldr	r2, [pc, #116]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c58:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c5a:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	4a1a      	ldr	r2, [pc, #104]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c66:	4a18      	ldr	r2, [pc, #96]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c6c:	4b16      	ldr	r3, [pc, #88]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d114      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c78:	f7fd ff5c 	bl	8002b34 <HAL_GetTick>
 8004c7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c7e:	e00a      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c80:	f7fd ff58 	bl	8002b34 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e319      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c96:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0ee      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cae:	d111      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004cb0:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004cbc:	4b04      	ldr	r3, [pc, #16]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cbe:	400b      	ands	r3, r1
 8004cc0:	4901      	ldr	r1, [pc, #4]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	608b      	str	r3, [r1, #8]
 8004cc6:	e00b      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	40007000 	.word	0x40007000
 8004cd0:	0ffffcff 	.word	0x0ffffcff
 8004cd4:	4baa      	ldr	r3, [pc, #680]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	4aa9      	ldr	r2, [pc, #676]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004cde:	6093      	str	r3, [r2, #8]
 8004ce0:	4ba7      	ldr	r3, [pc, #668]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ce2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cec:	49a4      	ldr	r1, [pc, #656]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d010      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cfe:	4ba0      	ldr	r3, [pc, #640]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d04:	4a9e      	ldr	r2, [pc, #632]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d0e:	4b9c      	ldr	r3, [pc, #624]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	4999      	ldr	r1, [pc, #612]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d2c:	4b94      	ldr	r3, [pc, #592]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d3a:	4991      	ldr	r1, [pc, #580]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d4e:	4b8c      	ldr	r3, [pc, #560]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d5c:	4988      	ldr	r1, [pc, #544]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d70:	4b83      	ldr	r3, [pc, #524]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d7e:	4980      	ldr	r1, [pc, #512]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d92:	4b7b      	ldr	r3, [pc, #492]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da0:	4977      	ldr	r1, [pc, #476]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004db4:	4b72      	ldr	r3, [pc, #456]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dba:	f023 0203 	bic.w	r2, r3, #3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc2:	496f      	ldr	r1, [pc, #444]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dd6:	4b6a      	ldr	r3, [pc, #424]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ddc:	f023 020c 	bic.w	r2, r3, #12
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de4:	4966      	ldr	r1, [pc, #408]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004df8:	4b61      	ldr	r3, [pc, #388]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e06:	495e      	ldr	r1, [pc, #376]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e1a:	4b59      	ldr	r3, [pc, #356]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e20:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e28:	4955      	ldr	r1, [pc, #340]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e3c:	4b50      	ldr	r3, [pc, #320]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4a:	494d      	ldr	r1, [pc, #308]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e5e:	4b48      	ldr	r3, [pc, #288]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6c:	4944      	ldr	r1, [pc, #272]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e80:	4b3f      	ldr	r3, [pc, #252]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e8e:	493c      	ldr	r1, [pc, #240]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004ea2:	4b37      	ldr	r3, [pc, #220]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb0:	4933      	ldr	r1, [pc, #204]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ec4:	4b2e      	ldr	r3, [pc, #184]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ed2:	492b      	ldr	r1, [pc, #172]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d011      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ee6:	4b26      	ldr	r3, [pc, #152]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ef4:	4922      	ldr	r1, [pc, #136]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f04:	d101      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f06:	2301      	movs	r3, #1
 8004f08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004f16:	2301      	movs	r3, #1
 8004f18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f26:	4b16      	ldr	r3, [pc, #88]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f34:	4912      	ldr	r1, [pc, #72]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00b      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f48:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f58:	4909      	ldr	r1, [pc, #36]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d006      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 80d9 	beq.w	8005126 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f74:	4b02      	ldr	r3, [pc, #8]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a01      	ldr	r2, [pc, #4]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f7e:	e001      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004f80:	40023800 	.word	0x40023800
 8004f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f86:	f7fd fdd5 	bl	8002b34 <HAL_GetTick>
 8004f8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f8e:	f7fd fdd1 	bl	8002b34 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b64      	cmp	r3, #100	; 0x64
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e194      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fa0:	4b6c      	ldr	r3, [pc, #432]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1f0      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d021      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d11d      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fc0:	4b64      	ldr	r3, [pc, #400]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fc6:	0c1b      	lsrs	r3, r3, #16
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fce:	4b61      	ldr	r3, [pc, #388]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd4:	0e1b      	lsrs	r3, r3, #24
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	019a      	lsls	r2, r3, #6
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	041b      	lsls	r3, r3, #16
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	061b      	lsls	r3, r3, #24
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	071b      	lsls	r3, r3, #28
 8004ff4:	4957      	ldr	r1, [pc, #348]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d004      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005010:	d00a      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800501a:	2b00      	cmp	r3, #0
 800501c:	d02e      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005026:	d129      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005028:	4b4a      	ldr	r3, [pc, #296]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800502a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800502e:	0c1b      	lsrs	r3, r3, #16
 8005030:	f003 0303 	and.w	r3, r3, #3
 8005034:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005036:	4b47      	ldr	r3, [pc, #284]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800503c:	0f1b      	lsrs	r3, r3, #28
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	019a      	lsls	r2, r3, #6
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	041b      	lsls	r3, r3, #16
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	061b      	lsls	r3, r3, #24
 8005056:	431a      	orrs	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	071b      	lsls	r3, r3, #28
 800505c:	493d      	ldr	r1, [pc, #244]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005064:	4b3b      	ldr	r3, [pc, #236]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005066:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800506a:	f023 021f 	bic.w	r2, r3, #31
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	3b01      	subs	r3, #1
 8005074:	4937      	ldr	r1, [pc, #220]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01d      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005088:	4b32      	ldr	r3, [pc, #200]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800508a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800508e:	0e1b      	lsrs	r3, r3, #24
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005096:	4b2f      	ldr	r3, [pc, #188]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800509c:	0f1b      	lsrs	r3, r3, #28
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	019a      	lsls	r2, r3, #6
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	041b      	lsls	r3, r3, #16
 80050b0:	431a      	orrs	r2, r3
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	061b      	lsls	r3, r3, #24
 80050b6:	431a      	orrs	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	071b      	lsls	r3, r3, #28
 80050bc:	4925      	ldr	r1, [pc, #148]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d011      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	019a      	lsls	r2, r3, #6
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	041b      	lsls	r3, r3, #16
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	061b      	lsls	r3, r3, #24
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	071b      	lsls	r3, r3, #28
 80050ec:	4919      	ldr	r1, [pc, #100]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050f4:	4b17      	ldr	r3, [pc, #92]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a16      	ldr	r2, [pc, #88]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005100:	f7fd fd18 	bl	8002b34 <HAL_GetTick>
 8005104:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005106:	e008      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005108:	f7fd fd14 	bl	8002b34 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b64      	cmp	r3, #100	; 0x64
 8005114:	d901      	bls.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e0d7      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800511a:	4b0e      	ldr	r3, [pc, #56]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0f0      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	2b01      	cmp	r3, #1
 800512a:	f040 80cd 	bne.w	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800512e:	4b09      	ldr	r3, [pc, #36]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a08      	ldr	r2, [pc, #32]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800513a:	f7fd fcfb 	bl	8002b34 <HAL_GetTick>
 800513e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005140:	e00a      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005142:	f7fd fcf7 	bl	8002b34 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b64      	cmp	r3, #100	; 0x64
 800514e:	d903      	bls.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e0ba      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005154:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005158:	4b5e      	ldr	r3, [pc, #376]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005164:	d0ed      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d009      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005182:	2b00      	cmp	r3, #0
 8005184:	d02e      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	2b00      	cmp	r3, #0
 800518c:	d12a      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800518e:	4b51      	ldr	r3, [pc, #324]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005194:	0c1b      	lsrs	r3, r3, #16
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800519c:	4b4d      	ldr	r3, [pc, #308]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a2:	0f1b      	lsrs	r3, r3, #28
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	019a      	lsls	r2, r3, #6
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	041b      	lsls	r3, r3, #16
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	061b      	lsls	r3, r3, #24
 80051bc:	431a      	orrs	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	071b      	lsls	r3, r3, #28
 80051c2:	4944      	ldr	r1, [pc, #272]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051ca:	4b42      	ldr	r3, [pc, #264]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	3b01      	subs	r3, #1
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	493d      	ldr	r1, [pc, #244]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d022      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051f8:	d11d      	bne.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051fa:	4b36      	ldr	r3, [pc, #216]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005200:	0e1b      	lsrs	r3, r3, #24
 8005202:	f003 030f 	and.w	r3, r3, #15
 8005206:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005208:	4b32      	ldr	r3, [pc, #200]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800520a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520e:	0f1b      	lsrs	r3, r3, #28
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	019a      	lsls	r2, r3, #6
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	041b      	lsls	r3, r3, #16
 8005222:	431a      	orrs	r2, r3
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	061b      	lsls	r3, r3, #24
 8005228:	431a      	orrs	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	071b      	lsls	r3, r3, #28
 800522e:	4929      	ldr	r1, [pc, #164]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d028      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005242:	4b24      	ldr	r3, [pc, #144]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005248:	0e1b      	lsrs	r3, r3, #24
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005250:	4b20      	ldr	r3, [pc, #128]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005256:	0c1b      	lsrs	r3, r3, #16
 8005258:	f003 0303 	and.w	r3, r3, #3
 800525c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	019a      	lsls	r2, r3, #6
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	041b      	lsls	r3, r3, #16
 8005268:	431a      	orrs	r2, r3
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	061b      	lsls	r3, r3, #24
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	071b      	lsls	r3, r3, #28
 8005276:	4917      	ldr	r1, [pc, #92]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800527e:	4b15      	ldr	r3, [pc, #84]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005284:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	4911      	ldr	r1, [pc, #68]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005294:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a0e      	ldr	r2, [pc, #56]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800529a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800529e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a0:	f7fd fc48 	bl	8002b34 <HAL_GetTick>
 80052a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052a6:	e008      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052a8:	f7fd fc44 	bl	8002b34 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b64      	cmp	r3, #100	; 0x64
 80052b4:	d901      	bls.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e007      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052ba:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052c6:	d1ef      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3720      	adds	r7, #32
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	40023800 	.word	0x40023800

080052d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e049      	b.n	800537e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fd f96a 	bl	80025d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3304      	adds	r3, #4
 8005314:	4619      	mov	r1, r3
 8005316:	4610      	mov	r0, r2
 8005318:	f000 fb6e 	bl	80059f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e049      	b.n	800542c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f841 	bl	8005434 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2202      	movs	r2, #2
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3304      	adds	r3, #4
 80053c2:	4619      	mov	r1, r3
 80053c4:	4610      	mov	r0, r2
 80053c6:	f000 fb17 	bl	80059f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d109      	bne.n	800546c <HAL_TIM_PWM_Start+0x24>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b01      	cmp	r3, #1
 8005462:	bf14      	ite	ne
 8005464:	2301      	movne	r3, #1
 8005466:	2300      	moveq	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	e03c      	b.n	80054e6 <HAL_TIM_PWM_Start+0x9e>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2b04      	cmp	r3, #4
 8005470:	d109      	bne.n	8005486 <HAL_TIM_PWM_Start+0x3e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b01      	cmp	r3, #1
 800547c:	bf14      	ite	ne
 800547e:	2301      	movne	r3, #1
 8005480:	2300      	moveq	r3, #0
 8005482:	b2db      	uxtb	r3, r3
 8005484:	e02f      	b.n	80054e6 <HAL_TIM_PWM_Start+0x9e>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b08      	cmp	r3, #8
 800548a:	d109      	bne.n	80054a0 <HAL_TIM_PWM_Start+0x58>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b01      	cmp	r3, #1
 8005496:	bf14      	ite	ne
 8005498:	2301      	movne	r3, #1
 800549a:	2300      	moveq	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	e022      	b.n	80054e6 <HAL_TIM_PWM_Start+0x9e>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2b0c      	cmp	r3, #12
 80054a4:	d109      	bne.n	80054ba <HAL_TIM_PWM_Start+0x72>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	bf14      	ite	ne
 80054b2:	2301      	movne	r3, #1
 80054b4:	2300      	moveq	r3, #0
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	e015      	b.n	80054e6 <HAL_TIM_PWM_Start+0x9e>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d109      	bne.n	80054d4 <HAL_TIM_PWM_Start+0x8c>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	bf14      	ite	ne
 80054cc:	2301      	movne	r3, #1
 80054ce:	2300      	moveq	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	e008      	b.n	80054e6 <HAL_TIM_PWM_Start+0x9e>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	bf14      	ite	ne
 80054e0:	2301      	movne	r3, #1
 80054e2:	2300      	moveq	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e092      	b.n	8005614 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d104      	bne.n	80054fe <HAL_TIM_PWM_Start+0xb6>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054fc:	e023      	b.n	8005546 <HAL_TIM_PWM_Start+0xfe>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b04      	cmp	r3, #4
 8005502:	d104      	bne.n	800550e <HAL_TIM_PWM_Start+0xc6>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800550c:	e01b      	b.n	8005546 <HAL_TIM_PWM_Start+0xfe>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b08      	cmp	r3, #8
 8005512:	d104      	bne.n	800551e <HAL_TIM_PWM_Start+0xd6>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800551c:	e013      	b.n	8005546 <HAL_TIM_PWM_Start+0xfe>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b0c      	cmp	r3, #12
 8005522:	d104      	bne.n	800552e <HAL_TIM_PWM_Start+0xe6>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800552c:	e00b      	b.n	8005546 <HAL_TIM_PWM_Start+0xfe>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b10      	cmp	r3, #16
 8005532:	d104      	bne.n	800553e <HAL_TIM_PWM_Start+0xf6>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800553c:	e003      	b.n	8005546 <HAL_TIM_PWM_Start+0xfe>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2202      	movs	r2, #2
 8005542:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2201      	movs	r2, #1
 800554c:	6839      	ldr	r1, [r7, #0]
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fdea 	bl	8006128 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a30      	ldr	r2, [pc, #192]	; (800561c <HAL_TIM_PWM_Start+0x1d4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d004      	beq.n	8005568 <HAL_TIM_PWM_Start+0x120>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a2f      	ldr	r2, [pc, #188]	; (8005620 <HAL_TIM_PWM_Start+0x1d8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d101      	bne.n	800556c <HAL_TIM_PWM_Start+0x124>
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <HAL_TIM_PWM_Start+0x126>
 800556c:	2300      	movs	r3, #0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d007      	beq.n	8005582 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005580:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a25      	ldr	r2, [pc, #148]	; (800561c <HAL_TIM_PWM_Start+0x1d4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d022      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x18a>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005594:	d01d      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x18a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a22      	ldr	r2, [pc, #136]	; (8005624 <HAL_TIM_PWM_Start+0x1dc>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d018      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x18a>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a20      	ldr	r2, [pc, #128]	; (8005628 <HAL_TIM_PWM_Start+0x1e0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x18a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a1f      	ldr	r2, [pc, #124]	; (800562c <HAL_TIM_PWM_Start+0x1e4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00e      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x18a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a19      	ldr	r2, [pc, #100]	; (8005620 <HAL_TIM_PWM_Start+0x1d8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d009      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x18a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1b      	ldr	r2, [pc, #108]	; (8005630 <HAL_TIM_PWM_Start+0x1e8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x18a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a19      	ldr	r2, [pc, #100]	; (8005634 <HAL_TIM_PWM_Start+0x1ec>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d115      	bne.n	80055fe <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	4b17      	ldr	r3, [pc, #92]	; (8005638 <HAL_TIM_PWM_Start+0x1f0>)
 80055da:	4013      	ands	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b06      	cmp	r3, #6
 80055e2:	d015      	beq.n	8005610 <HAL_TIM_PWM_Start+0x1c8>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ea:	d011      	beq.n	8005610 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fc:	e008      	b.n	8005610 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0201 	orr.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	e000      	b.n	8005612 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005610:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40010000 	.word	0x40010000
 8005620:	40010400 	.word	0x40010400
 8005624:	40000400 	.word	0x40000400
 8005628:	40000800 	.word	0x40000800
 800562c:	40000c00 	.word	0x40000c00
 8005630:	40014000 	.word	0x40014000
 8005634:	40001800 	.word	0x40001800
 8005638:	00010007 	.word	0x00010007

0800563c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005656:	2302      	movs	r3, #2
 8005658:	e0ff      	b.n	800585a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b14      	cmp	r3, #20
 8005666:	f200 80f0 	bhi.w	800584a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800566a:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800566c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005670:	080056c5 	.word	0x080056c5
 8005674:	0800584b 	.word	0x0800584b
 8005678:	0800584b 	.word	0x0800584b
 800567c:	0800584b 	.word	0x0800584b
 8005680:	08005705 	.word	0x08005705
 8005684:	0800584b 	.word	0x0800584b
 8005688:	0800584b 	.word	0x0800584b
 800568c:	0800584b 	.word	0x0800584b
 8005690:	08005747 	.word	0x08005747
 8005694:	0800584b 	.word	0x0800584b
 8005698:	0800584b 	.word	0x0800584b
 800569c:	0800584b 	.word	0x0800584b
 80056a0:	08005787 	.word	0x08005787
 80056a4:	0800584b 	.word	0x0800584b
 80056a8:	0800584b 	.word	0x0800584b
 80056ac:	0800584b 	.word	0x0800584b
 80056b0:	080057c9 	.word	0x080057c9
 80056b4:	0800584b 	.word	0x0800584b
 80056b8:	0800584b 	.word	0x0800584b
 80056bc:	0800584b 	.word	0x0800584b
 80056c0:	08005809 	.word	0x08005809
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fa34 	bl	8005b38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0208 	orr.w	r2, r2, #8
 80056de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0204 	bic.w	r2, r2, #4
 80056ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6999      	ldr	r1, [r3, #24]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	691a      	ldr	r2, [r3, #16]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	619a      	str	r2, [r3, #24]
      break;
 8005702:	e0a5      	b.n	8005850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fa86 	bl	8005c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800571e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699a      	ldr	r2, [r3, #24]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800572e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6999      	ldr	r1, [r3, #24]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	021a      	lsls	r2, r3, #8
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	619a      	str	r2, [r3, #24]
      break;
 8005744:	e084      	b.n	8005850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68b9      	ldr	r1, [r7, #8]
 800574c:	4618      	mov	r0, r3
 800574e:	f000 fadd 	bl	8005d0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0208 	orr.w	r2, r2, #8
 8005760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	69da      	ldr	r2, [r3, #28]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0204 	bic.w	r2, r2, #4
 8005770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69d9      	ldr	r1, [r3, #28]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	691a      	ldr	r2, [r3, #16]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	61da      	str	r2, [r3, #28]
      break;
 8005784:	e064      	b.n	8005850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	4618      	mov	r0, r3
 800578e:	f000 fb33 	bl	8005df8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69da      	ldr	r2, [r3, #28]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69da      	ldr	r2, [r3, #28]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69d9      	ldr	r1, [r3, #28]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	021a      	lsls	r2, r3, #8
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	61da      	str	r2, [r3, #28]
      break;
 80057c6:	e043      	b.n	8005850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fb6a 	bl	8005ea8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0208 	orr.w	r2, r2, #8
 80057e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0204 	bic.w	r2, r2, #4
 80057f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005806:	e023      	b.n	8005850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fb9c 	bl	8005f4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005822:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005832:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	021a      	lsls	r2, r3, #8
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005848:	e002      	b.n	8005850 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	75fb      	strb	r3, [r7, #23]
      break;
 800584e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005858:	7dfb      	ldrb	r3, [r7, #23]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop

08005864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005878:	2b01      	cmp	r3, #1
 800587a:	d101      	bne.n	8005880 <HAL_TIM_ConfigClockSource+0x1c>
 800587c:	2302      	movs	r3, #2
 800587e:	e0b4      	b.n	80059ea <HAL_TIM_ConfigClockSource+0x186>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	4b56      	ldr	r3, [pc, #344]	; (80059f4 <HAL_TIM_ConfigClockSource+0x190>)
 800589c:	4013      	ands	r3, r2
 800589e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b8:	d03e      	beq.n	8005938 <HAL_TIM_ConfigClockSource+0xd4>
 80058ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058be:	f200 8087 	bhi.w	80059d0 <HAL_TIM_ConfigClockSource+0x16c>
 80058c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c6:	f000 8086 	beq.w	80059d6 <HAL_TIM_ConfigClockSource+0x172>
 80058ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ce:	d87f      	bhi.n	80059d0 <HAL_TIM_ConfigClockSource+0x16c>
 80058d0:	2b70      	cmp	r3, #112	; 0x70
 80058d2:	d01a      	beq.n	800590a <HAL_TIM_ConfigClockSource+0xa6>
 80058d4:	2b70      	cmp	r3, #112	; 0x70
 80058d6:	d87b      	bhi.n	80059d0 <HAL_TIM_ConfigClockSource+0x16c>
 80058d8:	2b60      	cmp	r3, #96	; 0x60
 80058da:	d050      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x11a>
 80058dc:	2b60      	cmp	r3, #96	; 0x60
 80058de:	d877      	bhi.n	80059d0 <HAL_TIM_ConfigClockSource+0x16c>
 80058e0:	2b50      	cmp	r3, #80	; 0x50
 80058e2:	d03c      	beq.n	800595e <HAL_TIM_ConfigClockSource+0xfa>
 80058e4:	2b50      	cmp	r3, #80	; 0x50
 80058e6:	d873      	bhi.n	80059d0 <HAL_TIM_ConfigClockSource+0x16c>
 80058e8:	2b40      	cmp	r3, #64	; 0x40
 80058ea:	d058      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x13a>
 80058ec:	2b40      	cmp	r3, #64	; 0x40
 80058ee:	d86f      	bhi.n	80059d0 <HAL_TIM_ConfigClockSource+0x16c>
 80058f0:	2b30      	cmp	r3, #48	; 0x30
 80058f2:	d064      	beq.n	80059be <HAL_TIM_ConfigClockSource+0x15a>
 80058f4:	2b30      	cmp	r3, #48	; 0x30
 80058f6:	d86b      	bhi.n	80059d0 <HAL_TIM_ConfigClockSource+0x16c>
 80058f8:	2b20      	cmp	r3, #32
 80058fa:	d060      	beq.n	80059be <HAL_TIM_ConfigClockSource+0x15a>
 80058fc:	2b20      	cmp	r3, #32
 80058fe:	d867      	bhi.n	80059d0 <HAL_TIM_ConfigClockSource+0x16c>
 8005900:	2b00      	cmp	r3, #0
 8005902:	d05c      	beq.n	80059be <HAL_TIM_ConfigClockSource+0x15a>
 8005904:	2b10      	cmp	r3, #16
 8005906:	d05a      	beq.n	80059be <HAL_TIM_ConfigClockSource+0x15a>
 8005908:	e062      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800591a:	f000 fbe5 	bl	80060e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800592c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	609a      	str	r2, [r3, #8]
      break;
 8005936:	e04f      	b.n	80059d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005948:	f000 fbce 	bl	80060e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689a      	ldr	r2, [r3, #8]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800595a:	609a      	str	r2, [r3, #8]
      break;
 800595c:	e03c      	b.n	80059d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800596a:	461a      	mov	r2, r3
 800596c:	f000 fb42 	bl	8005ff4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2150      	movs	r1, #80	; 0x50
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fb9b 	bl	80060b2 <TIM_ITRx_SetConfig>
      break;
 800597c:	e02c      	b.n	80059d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800598a:	461a      	mov	r2, r3
 800598c:	f000 fb61 	bl	8006052 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2160      	movs	r1, #96	; 0x60
 8005996:	4618      	mov	r0, r3
 8005998:	f000 fb8b 	bl	80060b2 <TIM_ITRx_SetConfig>
      break;
 800599c:	e01c      	b.n	80059d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059aa:	461a      	mov	r2, r3
 80059ac:	f000 fb22 	bl	8005ff4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2140      	movs	r1, #64	; 0x40
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fb7b 	bl	80060b2 <TIM_ITRx_SetConfig>
      break;
 80059bc:	e00c      	b.n	80059d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4619      	mov	r1, r3
 80059c8:	4610      	mov	r0, r2
 80059ca:	f000 fb72 	bl	80060b2 <TIM_ITRx_SetConfig>
      break;
 80059ce:	e003      	b.n	80059d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	73fb      	strb	r3, [r7, #15]
      break;
 80059d4:	e000      	b.n	80059d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	fffeff88 	.word	0xfffeff88

080059f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a40      	ldr	r2, [pc, #256]	; (8005b0c <TIM_Base_SetConfig+0x114>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d013      	beq.n	8005a38 <TIM_Base_SetConfig+0x40>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a16:	d00f      	beq.n	8005a38 <TIM_Base_SetConfig+0x40>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a3d      	ldr	r2, [pc, #244]	; (8005b10 <TIM_Base_SetConfig+0x118>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00b      	beq.n	8005a38 <TIM_Base_SetConfig+0x40>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a3c      	ldr	r2, [pc, #240]	; (8005b14 <TIM_Base_SetConfig+0x11c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d007      	beq.n	8005a38 <TIM_Base_SetConfig+0x40>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a3b      	ldr	r2, [pc, #236]	; (8005b18 <TIM_Base_SetConfig+0x120>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d003      	beq.n	8005a38 <TIM_Base_SetConfig+0x40>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a3a      	ldr	r2, [pc, #232]	; (8005b1c <TIM_Base_SetConfig+0x124>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d108      	bne.n	8005a4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a2f      	ldr	r2, [pc, #188]	; (8005b0c <TIM_Base_SetConfig+0x114>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d02b      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a58:	d027      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a2c      	ldr	r2, [pc, #176]	; (8005b10 <TIM_Base_SetConfig+0x118>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d023      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a2b      	ldr	r2, [pc, #172]	; (8005b14 <TIM_Base_SetConfig+0x11c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01f      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a2a      	ldr	r2, [pc, #168]	; (8005b18 <TIM_Base_SetConfig+0x120>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d01b      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a29      	ldr	r2, [pc, #164]	; (8005b1c <TIM_Base_SetConfig+0x124>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d017      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a28      	ldr	r2, [pc, #160]	; (8005b20 <TIM_Base_SetConfig+0x128>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d013      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a27      	ldr	r2, [pc, #156]	; (8005b24 <TIM_Base_SetConfig+0x12c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00f      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a26      	ldr	r2, [pc, #152]	; (8005b28 <TIM_Base_SetConfig+0x130>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00b      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a25      	ldr	r2, [pc, #148]	; (8005b2c <TIM_Base_SetConfig+0x134>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d007      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a24      	ldr	r2, [pc, #144]	; (8005b30 <TIM_Base_SetConfig+0x138>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d003      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a23      	ldr	r2, [pc, #140]	; (8005b34 <TIM_Base_SetConfig+0x13c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d108      	bne.n	8005abc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a0a      	ldr	r2, [pc, #40]	; (8005b0c <TIM_Base_SetConfig+0x114>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d003      	beq.n	8005af0 <TIM_Base_SetConfig+0xf8>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a0c      	ldr	r2, [pc, #48]	; (8005b1c <TIM_Base_SetConfig+0x124>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d103      	bne.n	8005af8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	691a      	ldr	r2, [r3, #16]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	615a      	str	r2, [r3, #20]
}
 8005afe:	bf00      	nop
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40010000 	.word	0x40010000
 8005b10:	40000400 	.word	0x40000400
 8005b14:	40000800 	.word	0x40000800
 8005b18:	40000c00 	.word	0x40000c00
 8005b1c:	40010400 	.word	0x40010400
 8005b20:	40014000 	.word	0x40014000
 8005b24:	40014400 	.word	0x40014400
 8005b28:	40014800 	.word	0x40014800
 8005b2c:	40001800 	.word	0x40001800
 8005b30:	40001c00 	.word	0x40001c00
 8005b34:	40002000 	.word	0x40002000

08005b38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f023 0201 	bic.w	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4b2b      	ldr	r3, [pc, #172]	; (8005c10 <TIM_OC1_SetConfig+0xd8>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0303 	bic.w	r3, r3, #3
 8005b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f023 0302 	bic.w	r3, r3, #2
 8005b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a21      	ldr	r2, [pc, #132]	; (8005c14 <TIM_OC1_SetConfig+0xdc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d003      	beq.n	8005b9c <TIM_OC1_SetConfig+0x64>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a20      	ldr	r2, [pc, #128]	; (8005c18 <TIM_OC1_SetConfig+0xe0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d10c      	bne.n	8005bb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f023 0308 	bic.w	r3, r3, #8
 8005ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f023 0304 	bic.w	r3, r3, #4
 8005bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a16      	ldr	r2, [pc, #88]	; (8005c14 <TIM_OC1_SetConfig+0xdc>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d003      	beq.n	8005bc6 <TIM_OC1_SetConfig+0x8e>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a15      	ldr	r2, [pc, #84]	; (8005c18 <TIM_OC1_SetConfig+0xe0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d111      	bne.n	8005bea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	621a      	str	r2, [r3, #32]
}
 8005c04:	bf00      	nop
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	fffeff8f 	.word	0xfffeff8f
 8005c14:	40010000 	.word	0x40010000
 8005c18:	40010400 	.word	0x40010400

08005c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f023 0210 	bic.w	r2, r3, #16
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4b2e      	ldr	r3, [pc, #184]	; (8005d00 <TIM_OC2_SetConfig+0xe4>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	021b      	lsls	r3, r3, #8
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f023 0320 	bic.w	r3, r3, #32
 8005c66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a23      	ldr	r2, [pc, #140]	; (8005d04 <TIM_OC2_SetConfig+0xe8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d003      	beq.n	8005c84 <TIM_OC2_SetConfig+0x68>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a22      	ldr	r2, [pc, #136]	; (8005d08 <TIM_OC2_SetConfig+0xec>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d10d      	bne.n	8005ca0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a18      	ldr	r2, [pc, #96]	; (8005d04 <TIM_OC2_SetConfig+0xe8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d003      	beq.n	8005cb0 <TIM_OC2_SetConfig+0x94>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a17      	ldr	r2, [pc, #92]	; (8005d08 <TIM_OC2_SetConfig+0xec>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d113      	bne.n	8005cd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	621a      	str	r2, [r3, #32]
}
 8005cf2:	bf00      	nop
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	feff8fff 	.word	0xfeff8fff
 8005d04:	40010000 	.word	0x40010000
 8005d08:	40010400 	.word	0x40010400

08005d0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4b2d      	ldr	r3, [pc, #180]	; (8005dec <TIM_OC3_SetConfig+0xe0>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0303 	bic.w	r3, r3, #3
 8005d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	021b      	lsls	r3, r3, #8
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a22      	ldr	r2, [pc, #136]	; (8005df0 <TIM_OC3_SetConfig+0xe4>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d003      	beq.n	8005d72 <TIM_OC3_SetConfig+0x66>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a21      	ldr	r2, [pc, #132]	; (8005df4 <TIM_OC3_SetConfig+0xe8>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d10d      	bne.n	8005d8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	021b      	lsls	r3, r3, #8
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a17      	ldr	r2, [pc, #92]	; (8005df0 <TIM_OC3_SetConfig+0xe4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d003      	beq.n	8005d9e <TIM_OC3_SetConfig+0x92>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a16      	ldr	r2, [pc, #88]	; (8005df4 <TIM_OC3_SetConfig+0xe8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d113      	bne.n	8005dc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	621a      	str	r2, [r3, #32]
}
 8005de0:	bf00      	nop
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	fffeff8f 	.word	0xfffeff8f
 8005df0:	40010000 	.word	0x40010000
 8005df4:	40010400 	.word	0x40010400

08005df8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4b1e      	ldr	r3, [pc, #120]	; (8005e9c <TIM_OC4_SetConfig+0xa4>)
 8005e24:	4013      	ands	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	021b      	lsls	r3, r3, #8
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	031b      	lsls	r3, r3, #12
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a13      	ldr	r2, [pc, #76]	; (8005ea0 <TIM_OC4_SetConfig+0xa8>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d003      	beq.n	8005e60 <TIM_OC4_SetConfig+0x68>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a12      	ldr	r2, [pc, #72]	; (8005ea4 <TIM_OC4_SetConfig+0xac>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d109      	bne.n	8005e74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	019b      	lsls	r3, r3, #6
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	621a      	str	r2, [r3, #32]
}
 8005e8e:	bf00      	nop
 8005e90:	371c      	adds	r7, #28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	feff8fff 	.word	0xfeff8fff
 8005ea0:	40010000 	.word	0x40010000
 8005ea4:	40010400 	.word	0x40010400

08005ea8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4b1b      	ldr	r3, [pc, #108]	; (8005f40 <TIM_OC5_SetConfig+0x98>)
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ee8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	041b      	lsls	r3, r3, #16
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a12      	ldr	r2, [pc, #72]	; (8005f44 <TIM_OC5_SetConfig+0x9c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d003      	beq.n	8005f06 <TIM_OC5_SetConfig+0x5e>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a11      	ldr	r2, [pc, #68]	; (8005f48 <TIM_OC5_SetConfig+0xa0>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d109      	bne.n	8005f1a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	621a      	str	r2, [r3, #32]
}
 8005f34:	bf00      	nop
 8005f36:	371c      	adds	r7, #28
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	fffeff8f 	.word	0xfffeff8f
 8005f44:	40010000 	.word	0x40010000
 8005f48:	40010400 	.word	0x40010400

08005f4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4b1c      	ldr	r3, [pc, #112]	; (8005fe8 <TIM_OC6_SetConfig+0x9c>)
 8005f78:	4013      	ands	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	021b      	lsls	r3, r3, #8
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	051b      	lsls	r3, r3, #20
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a13      	ldr	r2, [pc, #76]	; (8005fec <TIM_OC6_SetConfig+0xa0>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d003      	beq.n	8005fac <TIM_OC6_SetConfig+0x60>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a12      	ldr	r2, [pc, #72]	; (8005ff0 <TIM_OC6_SetConfig+0xa4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d109      	bne.n	8005fc0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	029b      	lsls	r3, r3, #10
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	621a      	str	r2, [r3, #32]
}
 8005fda:	bf00      	nop
 8005fdc:	371c      	adds	r7, #28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	feff8fff 	.word	0xfeff8fff
 8005fec:	40010000 	.word	0x40010000
 8005ff0:	40010400 	.word	0x40010400

08005ff4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	f023 0201 	bic.w	r2, r3, #1
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800601e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	011b      	lsls	r3, r3, #4
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	4313      	orrs	r3, r2
 8006028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f023 030a 	bic.w	r3, r3, #10
 8006030:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	621a      	str	r2, [r3, #32]
}
 8006046:	bf00      	nop
 8006048:	371c      	adds	r7, #28
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006052:	b480      	push	{r7}
 8006054:	b087      	sub	sp, #28
 8006056:	af00      	add	r7, sp, #0
 8006058:	60f8      	str	r0, [r7, #12]
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f023 0210 	bic.w	r2, r3, #16
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800607c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	031b      	lsls	r3, r3, #12
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	4313      	orrs	r3, r2
 8006086:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800608e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	011b      	lsls	r3, r3, #4
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	621a      	str	r2, [r3, #32]
}
 80060a6:	bf00      	nop
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b085      	sub	sp, #20
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f043 0307 	orr.w	r3, r3, #7
 80060d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	609a      	str	r2, [r3, #8]
}
 80060dc:	bf00      	nop
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006102:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	021a      	lsls	r2, r3, #8
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	431a      	orrs	r2, r3
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4313      	orrs	r3, r2
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	4313      	orrs	r3, r2
 8006114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	609a      	str	r2, [r3, #8]
}
 800611c:	bf00      	nop
 800611e:	371c      	adds	r7, #28
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f003 031f 	and.w	r3, r3, #31
 800613a:	2201      	movs	r2, #1
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a1a      	ldr	r2, [r3, #32]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	43db      	mvns	r3, r3
 800614a:	401a      	ands	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a1a      	ldr	r2, [r3, #32]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f003 031f 	and.w	r3, r3, #31
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	fa01 f303 	lsl.w	r3, r1, r3
 8006160:	431a      	orrs	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	621a      	str	r2, [r3, #32]
}
 8006166:	bf00      	nop
 8006168:	371c      	adds	r7, #28
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
	...

08006174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006184:	2b01      	cmp	r3, #1
 8006186:	d101      	bne.n	800618c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006188:	2302      	movs	r3, #2
 800618a:	e06d      	b.n	8006268 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a30      	ldr	r2, [pc, #192]	; (8006274 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d004      	beq.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a2f      	ldr	r2, [pc, #188]	; (8006278 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d108      	bne.n	80061d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a20      	ldr	r2, [pc, #128]	; (8006274 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d022      	beq.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fe:	d01d      	beq.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1d      	ldr	r2, [pc, #116]	; (800627c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d018      	beq.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1c      	ldr	r2, [pc, #112]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d013      	beq.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1a      	ldr	r2, [pc, #104]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00e      	beq.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a15      	ldr	r2, [pc, #84]	; (8006278 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d009      	beq.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a16      	ldr	r2, [pc, #88]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d004      	beq.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a15      	ldr	r2, [pc, #84]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d10c      	bne.n	8006256 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006242:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	4313      	orrs	r3, r2
 800624c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	40010000 	.word	0x40010000
 8006278:	40010400 	.word	0x40010400
 800627c:	40000400 	.word	0x40000400
 8006280:	40000800 	.word	0x40000800
 8006284:	40000c00 	.word	0x40000c00
 8006288:	40014000 	.word	0x40014000
 800628c:	40001800 	.word	0x40001800

08006290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e040      	b.n	8006324 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d106      	bne.n	80062b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fc f9e8 	bl	8002688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2224      	movs	r2, #36	; 0x24
 80062bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0201 	bic.w	r2, r2, #1
 80062cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f974 	bl	80065bc <UART_SetConfig>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e022      	b.n	8006324 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fbcc 	bl	8006a84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800630a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0201 	orr.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fc53 	bl	8006bc8 <UART_CheckIdleState>
 8006322:	4603      	mov	r3, r0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b08a      	sub	sp, #40	; 0x28
 8006330:	af02      	add	r7, sp, #8
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	603b      	str	r3, [r7, #0]
 8006338:	4613      	mov	r3, r2
 800633a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006340:	2b20      	cmp	r3, #32
 8006342:	d171      	bne.n	8006428 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <HAL_UART_Transmit+0x24>
 800634a:	88fb      	ldrh	r3, [r7, #6]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e06a      	b.n	800642a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2221      	movs	r2, #33	; 0x21
 8006360:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006362:	f7fc fbe7 	bl	8002b34 <HAL_GetTick>
 8006366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	88fa      	ldrh	r2, [r7, #6]
 800636c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	88fa      	ldrh	r2, [r7, #6]
 8006374:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006380:	d108      	bne.n	8006394 <HAL_UART_Transmit+0x68>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d104      	bne.n	8006394 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800638a:	2300      	movs	r3, #0
 800638c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	61bb      	str	r3, [r7, #24]
 8006392:	e003      	b.n	800639c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006398:	2300      	movs	r3, #0
 800639a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800639c:	e02c      	b.n	80063f8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2200      	movs	r2, #0
 80063a6:	2180      	movs	r1, #128	; 0x80
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 fc44 	bl	8006c36 <UART_WaitOnFlagUntilTimeout>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e038      	b.n	800642a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10b      	bne.n	80063d6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	3302      	adds	r3, #2
 80063d2:	61bb      	str	r3, [r7, #24]
 80063d4:	e007      	b.n	80063e6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	781a      	ldrb	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	3301      	adds	r3, #1
 80063e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063fe:	b29b      	uxth	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1cc      	bne.n	800639e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2200      	movs	r2, #0
 800640c:	2140      	movs	r1, #64	; 0x40
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fc11 	bl	8006c36 <UART_WaitOnFlagUntilTimeout>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e005      	b.n	800642a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2220      	movs	r2, #32
 8006422:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	e000      	b.n	800642a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006428:	2302      	movs	r3, #2
  }
}
 800642a:	4618      	mov	r0, r3
 800642c:	3720      	adds	r7, #32
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b08a      	sub	sp, #40	; 0x28
 8006436:	af02      	add	r7, sp, #8
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	603b      	str	r3, [r7, #0]
 800643e:	4613      	mov	r3, r2
 8006440:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006448:	2b20      	cmp	r3, #32
 800644a:	f040 80b1 	bne.w	80065b0 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <HAL_UART_Receive+0x28>
 8006454:	88fb      	ldrh	r3, [r7, #6]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e0a9      	b.n	80065b2 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2222      	movs	r2, #34	; 0x22
 800646a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006474:	f7fc fb5e 	bl	8002b34 <HAL_GetTick>
 8006478:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	88fa      	ldrh	r2, [r7, #6]
 800647e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	88fa      	ldrh	r2, [r7, #6]
 8006486:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006492:	d10e      	bne.n	80064b2 <HAL_UART_Receive+0x80>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d105      	bne.n	80064a8 <HAL_UART_Receive+0x76>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80064a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064a6:	e02d      	b.n	8006504 <HAL_UART_Receive+0xd2>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	22ff      	movs	r2, #255	; 0xff
 80064ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064b0:	e028      	b.n	8006504 <HAL_UART_Receive+0xd2>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10d      	bne.n	80064d6 <HAL_UART_Receive+0xa4>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d104      	bne.n	80064cc <HAL_UART_Receive+0x9a>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	22ff      	movs	r2, #255	; 0xff
 80064c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064ca:	e01b      	b.n	8006504 <HAL_UART_Receive+0xd2>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	227f      	movs	r2, #127	; 0x7f
 80064d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064d4:	e016      	b.n	8006504 <HAL_UART_Receive+0xd2>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064de:	d10d      	bne.n	80064fc <HAL_UART_Receive+0xca>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d104      	bne.n	80064f2 <HAL_UART_Receive+0xc0>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	227f      	movs	r2, #127	; 0x7f
 80064ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064f0:	e008      	b.n	8006504 <HAL_UART_Receive+0xd2>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	223f      	movs	r2, #63	; 0x3f
 80064f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064fa:	e003      	b.n	8006504 <HAL_UART_Receive+0xd2>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800650a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006514:	d108      	bne.n	8006528 <HAL_UART_Receive+0xf6>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d104      	bne.n	8006528 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800651e:	2300      	movs	r3, #0
 8006520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	61bb      	str	r3, [r7, #24]
 8006526:	e003      	b.n	8006530 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800652c:	2300      	movs	r3, #0
 800652e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006530:	e032      	b.n	8006598 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2200      	movs	r2, #0
 800653a:	2120      	movs	r1, #32
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 fb7a 	bl	8006c36 <UART_WaitOnFlagUntilTimeout>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e032      	b.n	80065b2 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10c      	bne.n	800656c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	b29a      	uxth	r2, r3
 800655a:	8a7b      	ldrh	r3, [r7, #18]
 800655c:	4013      	ands	r3, r2
 800655e:	b29a      	uxth	r2, r3
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	3302      	adds	r3, #2
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	e00c      	b.n	8006586 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006572:	b2da      	uxtb	r2, r3
 8006574:	8a7b      	ldrh	r3, [r7, #18]
 8006576:	b2db      	uxtb	r3, r3
 8006578:	4013      	ands	r3, r2
 800657a:	b2da      	uxtb	r2, r3
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	3301      	adds	r3, #1
 8006584:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800658c:	b29b      	uxth	r3, r3
 800658e:	3b01      	subs	r3, #1
 8006590:	b29a      	uxth	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800659e:	b29b      	uxth	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1c6      	bne.n	8006532 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	e000      	b.n	80065b2 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80065b0:	2302      	movs	r3, #2
  }
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3720      	adds	r7, #32
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b088      	sub	sp, #32
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065c4:	2300      	movs	r3, #0
 80065c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	431a      	orrs	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	4313      	orrs	r3, r2
 80065de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	4ba6      	ldr	r3, [pc, #664]	; (8006880 <UART_SetConfig+0x2c4>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6812      	ldr	r2, [r2, #0]
 80065ee:	6979      	ldr	r1, [r7, #20]
 80065f0:	430b      	orrs	r3, r1
 80065f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	430a      	orrs	r2, r1
 800662c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a94      	ldr	r2, [pc, #592]	; (8006884 <UART_SetConfig+0x2c8>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d120      	bne.n	800667a <UART_SetConfig+0xbe>
 8006638:	4b93      	ldr	r3, [pc, #588]	; (8006888 <UART_SetConfig+0x2cc>)
 800663a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800663e:	f003 0303 	and.w	r3, r3, #3
 8006642:	2b03      	cmp	r3, #3
 8006644:	d816      	bhi.n	8006674 <UART_SetConfig+0xb8>
 8006646:	a201      	add	r2, pc, #4	; (adr r2, 800664c <UART_SetConfig+0x90>)
 8006648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664c:	0800665d 	.word	0x0800665d
 8006650:	08006669 	.word	0x08006669
 8006654:	08006663 	.word	0x08006663
 8006658:	0800666f 	.word	0x0800666f
 800665c:	2301      	movs	r3, #1
 800665e:	77fb      	strb	r3, [r7, #31]
 8006660:	e150      	b.n	8006904 <UART_SetConfig+0x348>
 8006662:	2302      	movs	r3, #2
 8006664:	77fb      	strb	r3, [r7, #31]
 8006666:	e14d      	b.n	8006904 <UART_SetConfig+0x348>
 8006668:	2304      	movs	r3, #4
 800666a:	77fb      	strb	r3, [r7, #31]
 800666c:	e14a      	b.n	8006904 <UART_SetConfig+0x348>
 800666e:	2308      	movs	r3, #8
 8006670:	77fb      	strb	r3, [r7, #31]
 8006672:	e147      	b.n	8006904 <UART_SetConfig+0x348>
 8006674:	2310      	movs	r3, #16
 8006676:	77fb      	strb	r3, [r7, #31]
 8006678:	e144      	b.n	8006904 <UART_SetConfig+0x348>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a83      	ldr	r2, [pc, #524]	; (800688c <UART_SetConfig+0x2d0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d132      	bne.n	80066ea <UART_SetConfig+0x12e>
 8006684:	4b80      	ldr	r3, [pc, #512]	; (8006888 <UART_SetConfig+0x2cc>)
 8006686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668a:	f003 030c 	and.w	r3, r3, #12
 800668e:	2b0c      	cmp	r3, #12
 8006690:	d828      	bhi.n	80066e4 <UART_SetConfig+0x128>
 8006692:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <UART_SetConfig+0xdc>)
 8006694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006698:	080066cd 	.word	0x080066cd
 800669c:	080066e5 	.word	0x080066e5
 80066a0:	080066e5 	.word	0x080066e5
 80066a4:	080066e5 	.word	0x080066e5
 80066a8:	080066d9 	.word	0x080066d9
 80066ac:	080066e5 	.word	0x080066e5
 80066b0:	080066e5 	.word	0x080066e5
 80066b4:	080066e5 	.word	0x080066e5
 80066b8:	080066d3 	.word	0x080066d3
 80066bc:	080066e5 	.word	0x080066e5
 80066c0:	080066e5 	.word	0x080066e5
 80066c4:	080066e5 	.word	0x080066e5
 80066c8:	080066df 	.word	0x080066df
 80066cc:	2300      	movs	r3, #0
 80066ce:	77fb      	strb	r3, [r7, #31]
 80066d0:	e118      	b.n	8006904 <UART_SetConfig+0x348>
 80066d2:	2302      	movs	r3, #2
 80066d4:	77fb      	strb	r3, [r7, #31]
 80066d6:	e115      	b.n	8006904 <UART_SetConfig+0x348>
 80066d8:	2304      	movs	r3, #4
 80066da:	77fb      	strb	r3, [r7, #31]
 80066dc:	e112      	b.n	8006904 <UART_SetConfig+0x348>
 80066de:	2308      	movs	r3, #8
 80066e0:	77fb      	strb	r3, [r7, #31]
 80066e2:	e10f      	b.n	8006904 <UART_SetConfig+0x348>
 80066e4:	2310      	movs	r3, #16
 80066e6:	77fb      	strb	r3, [r7, #31]
 80066e8:	e10c      	b.n	8006904 <UART_SetConfig+0x348>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a68      	ldr	r2, [pc, #416]	; (8006890 <UART_SetConfig+0x2d4>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d120      	bne.n	8006736 <UART_SetConfig+0x17a>
 80066f4:	4b64      	ldr	r3, [pc, #400]	; (8006888 <UART_SetConfig+0x2cc>)
 80066f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066fe:	2b30      	cmp	r3, #48	; 0x30
 8006700:	d013      	beq.n	800672a <UART_SetConfig+0x16e>
 8006702:	2b30      	cmp	r3, #48	; 0x30
 8006704:	d814      	bhi.n	8006730 <UART_SetConfig+0x174>
 8006706:	2b20      	cmp	r3, #32
 8006708:	d009      	beq.n	800671e <UART_SetConfig+0x162>
 800670a:	2b20      	cmp	r3, #32
 800670c:	d810      	bhi.n	8006730 <UART_SetConfig+0x174>
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <UART_SetConfig+0x15c>
 8006712:	2b10      	cmp	r3, #16
 8006714:	d006      	beq.n	8006724 <UART_SetConfig+0x168>
 8006716:	e00b      	b.n	8006730 <UART_SetConfig+0x174>
 8006718:	2300      	movs	r3, #0
 800671a:	77fb      	strb	r3, [r7, #31]
 800671c:	e0f2      	b.n	8006904 <UART_SetConfig+0x348>
 800671e:	2302      	movs	r3, #2
 8006720:	77fb      	strb	r3, [r7, #31]
 8006722:	e0ef      	b.n	8006904 <UART_SetConfig+0x348>
 8006724:	2304      	movs	r3, #4
 8006726:	77fb      	strb	r3, [r7, #31]
 8006728:	e0ec      	b.n	8006904 <UART_SetConfig+0x348>
 800672a:	2308      	movs	r3, #8
 800672c:	77fb      	strb	r3, [r7, #31]
 800672e:	e0e9      	b.n	8006904 <UART_SetConfig+0x348>
 8006730:	2310      	movs	r3, #16
 8006732:	77fb      	strb	r3, [r7, #31]
 8006734:	e0e6      	b.n	8006904 <UART_SetConfig+0x348>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a56      	ldr	r2, [pc, #344]	; (8006894 <UART_SetConfig+0x2d8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d120      	bne.n	8006782 <UART_SetConfig+0x1c6>
 8006740:	4b51      	ldr	r3, [pc, #324]	; (8006888 <UART_SetConfig+0x2cc>)
 8006742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006746:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800674a:	2bc0      	cmp	r3, #192	; 0xc0
 800674c:	d013      	beq.n	8006776 <UART_SetConfig+0x1ba>
 800674e:	2bc0      	cmp	r3, #192	; 0xc0
 8006750:	d814      	bhi.n	800677c <UART_SetConfig+0x1c0>
 8006752:	2b80      	cmp	r3, #128	; 0x80
 8006754:	d009      	beq.n	800676a <UART_SetConfig+0x1ae>
 8006756:	2b80      	cmp	r3, #128	; 0x80
 8006758:	d810      	bhi.n	800677c <UART_SetConfig+0x1c0>
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <UART_SetConfig+0x1a8>
 800675e:	2b40      	cmp	r3, #64	; 0x40
 8006760:	d006      	beq.n	8006770 <UART_SetConfig+0x1b4>
 8006762:	e00b      	b.n	800677c <UART_SetConfig+0x1c0>
 8006764:	2300      	movs	r3, #0
 8006766:	77fb      	strb	r3, [r7, #31]
 8006768:	e0cc      	b.n	8006904 <UART_SetConfig+0x348>
 800676a:	2302      	movs	r3, #2
 800676c:	77fb      	strb	r3, [r7, #31]
 800676e:	e0c9      	b.n	8006904 <UART_SetConfig+0x348>
 8006770:	2304      	movs	r3, #4
 8006772:	77fb      	strb	r3, [r7, #31]
 8006774:	e0c6      	b.n	8006904 <UART_SetConfig+0x348>
 8006776:	2308      	movs	r3, #8
 8006778:	77fb      	strb	r3, [r7, #31]
 800677a:	e0c3      	b.n	8006904 <UART_SetConfig+0x348>
 800677c:	2310      	movs	r3, #16
 800677e:	77fb      	strb	r3, [r7, #31]
 8006780:	e0c0      	b.n	8006904 <UART_SetConfig+0x348>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a44      	ldr	r2, [pc, #272]	; (8006898 <UART_SetConfig+0x2dc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d125      	bne.n	80067d8 <UART_SetConfig+0x21c>
 800678c:	4b3e      	ldr	r3, [pc, #248]	; (8006888 <UART_SetConfig+0x2cc>)
 800678e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800679a:	d017      	beq.n	80067cc <UART_SetConfig+0x210>
 800679c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067a0:	d817      	bhi.n	80067d2 <UART_SetConfig+0x216>
 80067a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a6:	d00b      	beq.n	80067c0 <UART_SetConfig+0x204>
 80067a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ac:	d811      	bhi.n	80067d2 <UART_SetConfig+0x216>
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <UART_SetConfig+0x1fe>
 80067b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b6:	d006      	beq.n	80067c6 <UART_SetConfig+0x20a>
 80067b8:	e00b      	b.n	80067d2 <UART_SetConfig+0x216>
 80067ba:	2300      	movs	r3, #0
 80067bc:	77fb      	strb	r3, [r7, #31]
 80067be:	e0a1      	b.n	8006904 <UART_SetConfig+0x348>
 80067c0:	2302      	movs	r3, #2
 80067c2:	77fb      	strb	r3, [r7, #31]
 80067c4:	e09e      	b.n	8006904 <UART_SetConfig+0x348>
 80067c6:	2304      	movs	r3, #4
 80067c8:	77fb      	strb	r3, [r7, #31]
 80067ca:	e09b      	b.n	8006904 <UART_SetConfig+0x348>
 80067cc:	2308      	movs	r3, #8
 80067ce:	77fb      	strb	r3, [r7, #31]
 80067d0:	e098      	b.n	8006904 <UART_SetConfig+0x348>
 80067d2:	2310      	movs	r3, #16
 80067d4:	77fb      	strb	r3, [r7, #31]
 80067d6:	e095      	b.n	8006904 <UART_SetConfig+0x348>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a2f      	ldr	r2, [pc, #188]	; (800689c <UART_SetConfig+0x2e0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d125      	bne.n	800682e <UART_SetConfig+0x272>
 80067e2:	4b29      	ldr	r3, [pc, #164]	; (8006888 <UART_SetConfig+0x2cc>)
 80067e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067f0:	d017      	beq.n	8006822 <UART_SetConfig+0x266>
 80067f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067f6:	d817      	bhi.n	8006828 <UART_SetConfig+0x26c>
 80067f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067fc:	d00b      	beq.n	8006816 <UART_SetConfig+0x25a>
 80067fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006802:	d811      	bhi.n	8006828 <UART_SetConfig+0x26c>
 8006804:	2b00      	cmp	r3, #0
 8006806:	d003      	beq.n	8006810 <UART_SetConfig+0x254>
 8006808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800680c:	d006      	beq.n	800681c <UART_SetConfig+0x260>
 800680e:	e00b      	b.n	8006828 <UART_SetConfig+0x26c>
 8006810:	2301      	movs	r3, #1
 8006812:	77fb      	strb	r3, [r7, #31]
 8006814:	e076      	b.n	8006904 <UART_SetConfig+0x348>
 8006816:	2302      	movs	r3, #2
 8006818:	77fb      	strb	r3, [r7, #31]
 800681a:	e073      	b.n	8006904 <UART_SetConfig+0x348>
 800681c:	2304      	movs	r3, #4
 800681e:	77fb      	strb	r3, [r7, #31]
 8006820:	e070      	b.n	8006904 <UART_SetConfig+0x348>
 8006822:	2308      	movs	r3, #8
 8006824:	77fb      	strb	r3, [r7, #31]
 8006826:	e06d      	b.n	8006904 <UART_SetConfig+0x348>
 8006828:	2310      	movs	r3, #16
 800682a:	77fb      	strb	r3, [r7, #31]
 800682c:	e06a      	b.n	8006904 <UART_SetConfig+0x348>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a1b      	ldr	r2, [pc, #108]	; (80068a0 <UART_SetConfig+0x2e4>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d138      	bne.n	80068aa <UART_SetConfig+0x2ee>
 8006838:	4b13      	ldr	r3, [pc, #76]	; (8006888 <UART_SetConfig+0x2cc>)
 800683a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800683e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006842:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006846:	d017      	beq.n	8006878 <UART_SetConfig+0x2bc>
 8006848:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800684c:	d82a      	bhi.n	80068a4 <UART_SetConfig+0x2e8>
 800684e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006852:	d00b      	beq.n	800686c <UART_SetConfig+0x2b0>
 8006854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006858:	d824      	bhi.n	80068a4 <UART_SetConfig+0x2e8>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <UART_SetConfig+0x2aa>
 800685e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006862:	d006      	beq.n	8006872 <UART_SetConfig+0x2b6>
 8006864:	e01e      	b.n	80068a4 <UART_SetConfig+0x2e8>
 8006866:	2300      	movs	r3, #0
 8006868:	77fb      	strb	r3, [r7, #31]
 800686a:	e04b      	b.n	8006904 <UART_SetConfig+0x348>
 800686c:	2302      	movs	r3, #2
 800686e:	77fb      	strb	r3, [r7, #31]
 8006870:	e048      	b.n	8006904 <UART_SetConfig+0x348>
 8006872:	2304      	movs	r3, #4
 8006874:	77fb      	strb	r3, [r7, #31]
 8006876:	e045      	b.n	8006904 <UART_SetConfig+0x348>
 8006878:	2308      	movs	r3, #8
 800687a:	77fb      	strb	r3, [r7, #31]
 800687c:	e042      	b.n	8006904 <UART_SetConfig+0x348>
 800687e:	bf00      	nop
 8006880:	efff69f3 	.word	0xefff69f3
 8006884:	40011000 	.word	0x40011000
 8006888:	40023800 	.word	0x40023800
 800688c:	40004400 	.word	0x40004400
 8006890:	40004800 	.word	0x40004800
 8006894:	40004c00 	.word	0x40004c00
 8006898:	40005000 	.word	0x40005000
 800689c:	40011400 	.word	0x40011400
 80068a0:	40007800 	.word	0x40007800
 80068a4:	2310      	movs	r3, #16
 80068a6:	77fb      	strb	r3, [r7, #31]
 80068a8:	e02c      	b.n	8006904 <UART_SetConfig+0x348>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a72      	ldr	r2, [pc, #456]	; (8006a78 <UART_SetConfig+0x4bc>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d125      	bne.n	8006900 <UART_SetConfig+0x344>
 80068b4:	4b71      	ldr	r3, [pc, #452]	; (8006a7c <UART_SetConfig+0x4c0>)
 80068b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80068be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068c2:	d017      	beq.n	80068f4 <UART_SetConfig+0x338>
 80068c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068c8:	d817      	bhi.n	80068fa <UART_SetConfig+0x33e>
 80068ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ce:	d00b      	beq.n	80068e8 <UART_SetConfig+0x32c>
 80068d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068d4:	d811      	bhi.n	80068fa <UART_SetConfig+0x33e>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <UART_SetConfig+0x326>
 80068da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068de:	d006      	beq.n	80068ee <UART_SetConfig+0x332>
 80068e0:	e00b      	b.n	80068fa <UART_SetConfig+0x33e>
 80068e2:	2300      	movs	r3, #0
 80068e4:	77fb      	strb	r3, [r7, #31]
 80068e6:	e00d      	b.n	8006904 <UART_SetConfig+0x348>
 80068e8:	2302      	movs	r3, #2
 80068ea:	77fb      	strb	r3, [r7, #31]
 80068ec:	e00a      	b.n	8006904 <UART_SetConfig+0x348>
 80068ee:	2304      	movs	r3, #4
 80068f0:	77fb      	strb	r3, [r7, #31]
 80068f2:	e007      	b.n	8006904 <UART_SetConfig+0x348>
 80068f4:	2308      	movs	r3, #8
 80068f6:	77fb      	strb	r3, [r7, #31]
 80068f8:	e004      	b.n	8006904 <UART_SetConfig+0x348>
 80068fa:	2310      	movs	r3, #16
 80068fc:	77fb      	strb	r3, [r7, #31]
 80068fe:	e001      	b.n	8006904 <UART_SetConfig+0x348>
 8006900:	2310      	movs	r3, #16
 8006902:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800690c:	d15b      	bne.n	80069c6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800690e:	7ffb      	ldrb	r3, [r7, #31]
 8006910:	2b08      	cmp	r3, #8
 8006912:	d828      	bhi.n	8006966 <UART_SetConfig+0x3aa>
 8006914:	a201      	add	r2, pc, #4	; (adr r2, 800691c <UART_SetConfig+0x360>)
 8006916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691a:	bf00      	nop
 800691c:	08006941 	.word	0x08006941
 8006920:	08006949 	.word	0x08006949
 8006924:	08006951 	.word	0x08006951
 8006928:	08006967 	.word	0x08006967
 800692c:	08006957 	.word	0x08006957
 8006930:	08006967 	.word	0x08006967
 8006934:	08006967 	.word	0x08006967
 8006938:	08006967 	.word	0x08006967
 800693c:	0800695f 	.word	0x0800695f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006940:	f7fe f8b2 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 8006944:	61b8      	str	r0, [r7, #24]
        break;
 8006946:	e013      	b.n	8006970 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006948:	f7fe f8c2 	bl	8004ad0 <HAL_RCC_GetPCLK2Freq>
 800694c:	61b8      	str	r0, [r7, #24]
        break;
 800694e:	e00f      	b.n	8006970 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006950:	4b4b      	ldr	r3, [pc, #300]	; (8006a80 <UART_SetConfig+0x4c4>)
 8006952:	61bb      	str	r3, [r7, #24]
        break;
 8006954:	e00c      	b.n	8006970 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006956:	f7fd ff95 	bl	8004884 <HAL_RCC_GetSysClockFreq>
 800695a:	61b8      	str	r0, [r7, #24]
        break;
 800695c:	e008      	b.n	8006970 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800695e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006962:	61bb      	str	r3, [r7, #24]
        break;
 8006964:	e004      	b.n	8006970 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	77bb      	strb	r3, [r7, #30]
        break;
 800696e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d074      	beq.n	8006a60 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	005a      	lsls	r2, r3, #1
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	085b      	lsrs	r3, r3, #1
 8006980:	441a      	add	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	fbb2 f3f3 	udiv	r3, r2, r3
 800698a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	2b0f      	cmp	r3, #15
 8006990:	d916      	bls.n	80069c0 <UART_SetConfig+0x404>
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006998:	d212      	bcs.n	80069c0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	b29b      	uxth	r3, r3
 800699e:	f023 030f 	bic.w	r3, r3, #15
 80069a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	085b      	lsrs	r3, r3, #1
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	89fb      	ldrh	r3, [r7, #14]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	89fa      	ldrh	r2, [r7, #14]
 80069bc:	60da      	str	r2, [r3, #12]
 80069be:	e04f      	b.n	8006a60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	77bb      	strb	r3, [r7, #30]
 80069c4:	e04c      	b.n	8006a60 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069c6:	7ffb      	ldrb	r3, [r7, #31]
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d828      	bhi.n	8006a1e <UART_SetConfig+0x462>
 80069cc:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <UART_SetConfig+0x418>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	080069f9 	.word	0x080069f9
 80069d8:	08006a01 	.word	0x08006a01
 80069dc:	08006a09 	.word	0x08006a09
 80069e0:	08006a1f 	.word	0x08006a1f
 80069e4:	08006a0f 	.word	0x08006a0f
 80069e8:	08006a1f 	.word	0x08006a1f
 80069ec:	08006a1f 	.word	0x08006a1f
 80069f0:	08006a1f 	.word	0x08006a1f
 80069f4:	08006a17 	.word	0x08006a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069f8:	f7fe f856 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 80069fc:	61b8      	str	r0, [r7, #24]
        break;
 80069fe:	e013      	b.n	8006a28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a00:	f7fe f866 	bl	8004ad0 <HAL_RCC_GetPCLK2Freq>
 8006a04:	61b8      	str	r0, [r7, #24]
        break;
 8006a06:	e00f      	b.n	8006a28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a08:	4b1d      	ldr	r3, [pc, #116]	; (8006a80 <UART_SetConfig+0x4c4>)
 8006a0a:	61bb      	str	r3, [r7, #24]
        break;
 8006a0c:	e00c      	b.n	8006a28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a0e:	f7fd ff39 	bl	8004884 <HAL_RCC_GetSysClockFreq>
 8006a12:	61b8      	str	r0, [r7, #24]
        break;
 8006a14:	e008      	b.n	8006a28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a1a:	61bb      	str	r3, [r7, #24]
        break;
 8006a1c:	e004      	b.n	8006a28 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	77bb      	strb	r3, [r7, #30]
        break;
 8006a26:	bf00      	nop
    }

    if (pclk != 0U)
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d018      	beq.n	8006a60 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	085a      	lsrs	r2, r3, #1
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	441a      	add	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	2b0f      	cmp	r3, #15
 8006a46:	d909      	bls.n	8006a5c <UART_SetConfig+0x4a0>
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a4e:	d205      	bcs.n	8006a5c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	60da      	str	r2, [r3, #12]
 8006a5a:	e001      	b.n	8006a60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006a6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3720      	adds	r7, #32
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	40007c00 	.word	0x40007c00
 8006a7c:	40023800 	.word	0x40023800
 8006a80:	00f42400 	.word	0x00f42400

08006a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00a      	beq.n	8006aae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00a      	beq.n	8006ad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00a      	beq.n	8006af2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	f003 0308 	and.w	r3, r3, #8
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00a      	beq.n	8006b14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	f003 0310 	and.w	r3, r3, #16
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00a      	beq.n	8006b36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00a      	beq.n	8006b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01a      	beq.n	8006b9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b82:	d10a      	bne.n	8006b9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	605a      	str	r2, [r3, #4]
  }
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af02      	add	r7, sp, #8
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bd8:	f7fb ffac 	bl	8002b34 <HAL_GetTick>
 8006bdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0308 	and.w	r3, r3, #8
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d10e      	bne.n	8006c0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f81b 	bl	8006c36 <UART_WaitOnFlagUntilTimeout>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e011      	b.n	8006c2e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b09c      	sub	sp, #112	; 0x70
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	60f8      	str	r0, [r7, #12]
 8006c3e:	60b9      	str	r1, [r7, #8]
 8006c40:	603b      	str	r3, [r7, #0]
 8006c42:	4613      	mov	r3, r2
 8006c44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c46:	e0a7      	b.n	8006d98 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4e:	f000 80a3 	beq.w	8006d98 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c52:	f7fb ff6f 	bl	8002b34 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d302      	bcc.n	8006c68 <UART_WaitOnFlagUntilTimeout+0x32>
 8006c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d13f      	bne.n	8006ce8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c7c:	667b      	str	r3, [r7, #100]	; 0x64
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c88:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e6      	bne.n	8006c68 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	3308      	adds	r3, #8
 8006ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	f023 0301 	bic.w	r3, r3, #1
 8006cb0:	663b      	str	r3, [r7, #96]	; 0x60
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3308      	adds	r3, #8
 8006cb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006cba:	64ba      	str	r2, [r7, #72]	; 0x48
 8006cbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cc2:	e841 2300 	strex	r3, r2, [r1]
 8006cc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e5      	bne.n	8006c9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e068      	b.n	8006dba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0304 	and.w	r3, r3, #4
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d050      	beq.n	8006d98 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d04:	d148      	bne.n	8006d98 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d0e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d18:	e853 3f00 	ldrex	r3, [r3]
 8006d1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d30:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d36:	e841 2300 	strex	r3, r2, [r1]
 8006d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1e6      	bne.n	8006d10 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3308      	adds	r3, #8
 8006d48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	613b      	str	r3, [r7, #16]
   return(result);
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f023 0301 	bic.w	r3, r3, #1
 8006d58:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d62:	623a      	str	r2, [r7, #32]
 8006d64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	69f9      	ldr	r1, [r7, #28]
 8006d68:	6a3a      	ldr	r2, [r7, #32]
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e5      	bne.n	8006d42 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e010      	b.n	8006dba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	69da      	ldr	r2, [r3, #28]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	4013      	ands	r3, r2
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	bf0c      	ite	eq
 8006da8:	2301      	moveq	r3, #1
 8006daa:	2300      	movne	r3, #0
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	461a      	mov	r2, r3
 8006db0:	79fb      	ldrb	r3, [r7, #7]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	f43f af48 	beq.w	8006c48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3770      	adds	r7, #112	; 0x70
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
	...

08006dc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	f107 001c 	add.w	r0, r7, #28
 8006dd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d120      	bne.n	8006e1e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	4b20      	ldr	r3, [pc, #128]	; (8006e70 <USB_CoreInit+0xac>)
 8006dee:	4013      	ands	r3, r2
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d105      	bne.n	8006e12 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fa96 	bl	8007344 <USB_CoreReset>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	73fb      	strb	r3, [r7, #15]
 8006e1c:	e010      	b.n	8006e40 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fa8a 	bl	8007344 <USB_CoreReset>
 8006e30:	4603      	mov	r3, r0
 8006e32:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d10b      	bne.n	8006e5e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f043 0206 	orr.w	r2, r3, #6
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f043 0220 	orr.w	r2, r3, #32
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e6a:	b004      	add	sp, #16
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	ffbdffbf 	.word	0xffbdffbf

08006e74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f023 0201 	bic.w	r2, r3, #1
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b084      	sub	sp, #16
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006eb2:	78fb      	ldrb	r3, [r7, #3]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d115      	bne.n	8006ee4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ec4:	2001      	movs	r0, #1
 8006ec6:	f7fb fe41 	bl	8002b4c <HAL_Delay>
      ms++;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fa29 	bl	8007328 <USB_GetMode>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d01e      	beq.n	8006f1a <USB_SetCurrentMode+0x84>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2b31      	cmp	r3, #49	; 0x31
 8006ee0:	d9f0      	bls.n	8006ec4 <USB_SetCurrentMode+0x2e>
 8006ee2:	e01a      	b.n	8006f1a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ee4:	78fb      	ldrb	r3, [r7, #3]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d115      	bne.n	8006f16 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ef6:	2001      	movs	r0, #1
 8006ef8:	f7fb fe28 	bl	8002b4c <HAL_Delay>
      ms++;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	3301      	adds	r3, #1
 8006f00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fa10 	bl	8007328 <USB_GetMode>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d005      	beq.n	8006f1a <USB_SetCurrentMode+0x84>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b31      	cmp	r3, #49	; 0x31
 8006f12:	d9f0      	bls.n	8006ef6 <USB_SetCurrentMode+0x60>
 8006f14:	e001      	b.n	8006f1a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e005      	b.n	8006f26 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b32      	cmp	r3, #50	; 0x32
 8006f1e:	d101      	bne.n	8006f24 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e000      	b.n	8006f26 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f30:	b084      	sub	sp, #16
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b086      	sub	sp, #24
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	613b      	str	r3, [r7, #16]
 8006f4e:	e009      	b.n	8006f64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	3340      	adds	r3, #64	; 0x40
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	3301      	adds	r3, #1
 8006f62:	613b      	str	r3, [r7, #16]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	2b0e      	cmp	r3, #14
 8006f68:	d9f2      	bls.n	8006f50 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d11c      	bne.n	8006faa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f7e:	f043 0302 	orr.w	r3, r3, #2
 8006f82:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f88:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	e005      	b.n	8006fb6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc8:	4619      	mov	r1, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	680b      	ldr	r3, [r1, #0]
 8006fd4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d10c      	bne.n	8006ff6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d104      	bne.n	8006fec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f965 	bl	80072b4 <USB_SetDevSpeed>
 8006fea:	e008      	b.n	8006ffe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006fec:	2101      	movs	r1, #1
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f960 	bl	80072b4 <USB_SetDevSpeed>
 8006ff4:	e003      	b.n	8006ffe <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ff6:	2103      	movs	r1, #3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f95b 	bl	80072b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ffe:	2110      	movs	r1, #16
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f8f3 	bl	80071ec <USB_FlushTxFifo>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f91f 	bl	8007254 <USB_FlushRxFifo>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007026:	461a      	mov	r2, r3
 8007028:	2300      	movs	r3, #0
 800702a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007032:	461a      	mov	r2, r3
 8007034:	2300      	movs	r3, #0
 8007036:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800703e:	461a      	mov	r2, r3
 8007040:	2300      	movs	r3, #0
 8007042:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007044:	2300      	movs	r3, #0
 8007046:	613b      	str	r3, [r7, #16]
 8007048:	e043      	b.n	80070d2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4413      	add	r3, r2
 8007052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800705c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007060:	d118      	bne.n	8007094 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10a      	bne.n	800707e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007074:	461a      	mov	r2, r3
 8007076:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800707a:	6013      	str	r3, [r2, #0]
 800707c:	e013      	b.n	80070a6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	015a      	lsls	r2, r3, #5
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	4413      	add	r3, r2
 8007086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708a:	461a      	mov	r2, r3
 800708c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	e008      	b.n	80070a6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a0:	461a      	mov	r2, r3
 80070a2:	2300      	movs	r3, #0
 80070a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b2:	461a      	mov	r2, r3
 80070b4:	2300      	movs	r3, #0
 80070b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c4:	461a      	mov	r2, r3
 80070c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	3301      	adds	r3, #1
 80070d0:	613b      	str	r3, [r7, #16]
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d3b7      	bcc.n	800704a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070da:	2300      	movs	r3, #0
 80070dc:	613b      	str	r3, [r7, #16]
 80070de:	e043      	b.n	8007168 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070f6:	d118      	bne.n	800712a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10a      	bne.n	8007114 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710a:	461a      	mov	r2, r3
 800710c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007110:	6013      	str	r3, [r2, #0]
 8007112:	e013      	b.n	800713c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007120:	461a      	mov	r2, r3
 8007122:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	e008      	b.n	800713c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007136:	461a      	mov	r2, r3
 8007138:	2300      	movs	r3, #0
 800713a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	4413      	add	r3, r2
 8007144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007148:	461a      	mov	r2, r3
 800714a:	2300      	movs	r3, #0
 800714c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	4413      	add	r3, r2
 8007156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715a:	461a      	mov	r2, r3
 800715c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007160:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	3301      	adds	r3, #1
 8007166:	613b      	str	r3, [r7, #16]
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	429a      	cmp	r2, r3
 800716e:	d3b7      	bcc.n	80070e0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800717e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007182:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007190:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007194:	2b00      	cmp	r3, #0
 8007196:	d105      	bne.n	80071a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	f043 0210 	orr.w	r2, r3, #16
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	699a      	ldr	r2, [r3, #24]
 80071a8:	4b0e      	ldr	r3, [pc, #56]	; (80071e4 <USB_DevInit+0x2b4>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d005      	beq.n	80071c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	f043 0208 	orr.w	r2, r3, #8
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d105      	bne.n	80071d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	699a      	ldr	r2, [r3, #24]
 80071cc:	4b06      	ldr	r3, [pc, #24]	; (80071e8 <USB_DevInit+0x2b8>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071e0:	b004      	add	sp, #16
 80071e2:	4770      	bx	lr
 80071e4:	803c3800 	.word	0x803c3800
 80071e8:	40000004 	.word	0x40000004

080071ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3301      	adds	r3, #1
 80071fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4a13      	ldr	r2, [pc, #76]	; (8007250 <USB_FlushTxFifo+0x64>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d901      	bls.n	800720c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e01b      	b.n	8007244 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	daf2      	bge.n	80071fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	019b      	lsls	r3, r3, #6
 800721c:	f043 0220 	orr.w	r2, r3, #32
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	3301      	adds	r3, #1
 8007228:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4a08      	ldr	r2, [pc, #32]	; (8007250 <USB_FlushTxFifo+0x64>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d901      	bls.n	8007236 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e006      	b.n	8007244 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f003 0320 	and.w	r3, r3, #32
 800723e:	2b20      	cmp	r3, #32
 8007240:	d0f0      	beq.n	8007224 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	00030d40 	.word	0x00030d40

08007254 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3301      	adds	r3, #1
 8007264:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4a11      	ldr	r2, [pc, #68]	; (80072b0 <USB_FlushRxFifo+0x5c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d901      	bls.n	8007272 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e018      	b.n	80072a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	daf2      	bge.n	8007260 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2210      	movs	r2, #16
 8007282:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3301      	adds	r3, #1
 8007288:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4a08      	ldr	r2, [pc, #32]	; (80072b0 <USB_FlushRxFifo+0x5c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d901      	bls.n	8007296 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e006      	b.n	80072a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f003 0310 	and.w	r3, r3, #16
 800729e:	2b10      	cmp	r3, #16
 80072a0:	d0f0      	beq.n	8007284 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	00030d40 	.word	0x00030d40

080072b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	78fb      	ldrb	r3, [r7, #3]
 80072ce:	68f9      	ldr	r1, [r7, #12]
 80072d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072d4:	4313      	orrs	r3, r2
 80072d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b085      	sub	sp, #20
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007300:	f023 0303 	bic.w	r3, r3, #3
 8007304:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007314:	f043 0302 	orr.w	r3, r3, #2
 8007318:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	f003 0301 	and.w	r3, r3, #1
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	3301      	adds	r3, #1
 8007354:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4a13      	ldr	r2, [pc, #76]	; (80073a8 <USB_CoreReset+0x64>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d901      	bls.n	8007362 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e01b      	b.n	800739a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	daf2      	bge.n	8007350 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	f043 0201 	orr.w	r2, r3, #1
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3301      	adds	r3, #1
 800737e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4a09      	ldr	r2, [pc, #36]	; (80073a8 <USB_CoreReset+0x64>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d901      	bls.n	800738c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e006      	b.n	800739a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b01      	cmp	r3, #1
 8007396:	d0f0      	beq.n	800737a <USB_CoreReset+0x36>

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	00030d40 	.word	0x00030d40

080073ac <__cvt>:
 80073ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073b0:	ec55 4b10 	vmov	r4, r5, d0
 80073b4:	2d00      	cmp	r5, #0
 80073b6:	460e      	mov	r6, r1
 80073b8:	4619      	mov	r1, r3
 80073ba:	462b      	mov	r3, r5
 80073bc:	bfbb      	ittet	lt
 80073be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80073c2:	461d      	movlt	r5, r3
 80073c4:	2300      	movge	r3, #0
 80073c6:	232d      	movlt	r3, #45	; 0x2d
 80073c8:	700b      	strb	r3, [r1, #0]
 80073ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80073d0:	4691      	mov	r9, r2
 80073d2:	f023 0820 	bic.w	r8, r3, #32
 80073d6:	bfbc      	itt	lt
 80073d8:	4622      	movlt	r2, r4
 80073da:	4614      	movlt	r4, r2
 80073dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073e0:	d005      	beq.n	80073ee <__cvt+0x42>
 80073e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80073e6:	d100      	bne.n	80073ea <__cvt+0x3e>
 80073e8:	3601      	adds	r6, #1
 80073ea:	2102      	movs	r1, #2
 80073ec:	e000      	b.n	80073f0 <__cvt+0x44>
 80073ee:	2103      	movs	r1, #3
 80073f0:	ab03      	add	r3, sp, #12
 80073f2:	9301      	str	r3, [sp, #4]
 80073f4:	ab02      	add	r3, sp, #8
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	ec45 4b10 	vmov	d0, r4, r5
 80073fc:	4653      	mov	r3, sl
 80073fe:	4632      	mov	r2, r6
 8007400:	f000 fe6a 	bl	80080d8 <_dtoa_r>
 8007404:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007408:	4607      	mov	r7, r0
 800740a:	d102      	bne.n	8007412 <__cvt+0x66>
 800740c:	f019 0f01 	tst.w	r9, #1
 8007410:	d022      	beq.n	8007458 <__cvt+0xac>
 8007412:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007416:	eb07 0906 	add.w	r9, r7, r6
 800741a:	d110      	bne.n	800743e <__cvt+0x92>
 800741c:	783b      	ldrb	r3, [r7, #0]
 800741e:	2b30      	cmp	r3, #48	; 0x30
 8007420:	d10a      	bne.n	8007438 <__cvt+0x8c>
 8007422:	2200      	movs	r2, #0
 8007424:	2300      	movs	r3, #0
 8007426:	4620      	mov	r0, r4
 8007428:	4629      	mov	r1, r5
 800742a:	f7f9 fb6d 	bl	8000b08 <__aeabi_dcmpeq>
 800742e:	b918      	cbnz	r0, 8007438 <__cvt+0x8c>
 8007430:	f1c6 0601 	rsb	r6, r6, #1
 8007434:	f8ca 6000 	str.w	r6, [sl]
 8007438:	f8da 3000 	ldr.w	r3, [sl]
 800743c:	4499      	add	r9, r3
 800743e:	2200      	movs	r2, #0
 8007440:	2300      	movs	r3, #0
 8007442:	4620      	mov	r0, r4
 8007444:	4629      	mov	r1, r5
 8007446:	f7f9 fb5f 	bl	8000b08 <__aeabi_dcmpeq>
 800744a:	b108      	cbz	r0, 8007450 <__cvt+0xa4>
 800744c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007450:	2230      	movs	r2, #48	; 0x30
 8007452:	9b03      	ldr	r3, [sp, #12]
 8007454:	454b      	cmp	r3, r9
 8007456:	d307      	bcc.n	8007468 <__cvt+0xbc>
 8007458:	9b03      	ldr	r3, [sp, #12]
 800745a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800745c:	1bdb      	subs	r3, r3, r7
 800745e:	4638      	mov	r0, r7
 8007460:	6013      	str	r3, [r2, #0]
 8007462:	b004      	add	sp, #16
 8007464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007468:	1c59      	adds	r1, r3, #1
 800746a:	9103      	str	r1, [sp, #12]
 800746c:	701a      	strb	r2, [r3, #0]
 800746e:	e7f0      	b.n	8007452 <__cvt+0xa6>

08007470 <__exponent>:
 8007470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007472:	4603      	mov	r3, r0
 8007474:	2900      	cmp	r1, #0
 8007476:	bfb8      	it	lt
 8007478:	4249      	neglt	r1, r1
 800747a:	f803 2b02 	strb.w	r2, [r3], #2
 800747e:	bfb4      	ite	lt
 8007480:	222d      	movlt	r2, #45	; 0x2d
 8007482:	222b      	movge	r2, #43	; 0x2b
 8007484:	2909      	cmp	r1, #9
 8007486:	7042      	strb	r2, [r0, #1]
 8007488:	dd2a      	ble.n	80074e0 <__exponent+0x70>
 800748a:	f10d 0207 	add.w	r2, sp, #7
 800748e:	4617      	mov	r7, r2
 8007490:	260a      	movs	r6, #10
 8007492:	4694      	mov	ip, r2
 8007494:	fb91 f5f6 	sdiv	r5, r1, r6
 8007498:	fb06 1415 	mls	r4, r6, r5, r1
 800749c:	3430      	adds	r4, #48	; 0x30
 800749e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80074a2:	460c      	mov	r4, r1
 80074a4:	2c63      	cmp	r4, #99	; 0x63
 80074a6:	f102 32ff 	add.w	r2, r2, #4294967295
 80074aa:	4629      	mov	r1, r5
 80074ac:	dcf1      	bgt.n	8007492 <__exponent+0x22>
 80074ae:	3130      	adds	r1, #48	; 0x30
 80074b0:	f1ac 0402 	sub.w	r4, ip, #2
 80074b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80074b8:	1c41      	adds	r1, r0, #1
 80074ba:	4622      	mov	r2, r4
 80074bc:	42ba      	cmp	r2, r7
 80074be:	d30a      	bcc.n	80074d6 <__exponent+0x66>
 80074c0:	f10d 0209 	add.w	r2, sp, #9
 80074c4:	eba2 020c 	sub.w	r2, r2, ip
 80074c8:	42bc      	cmp	r4, r7
 80074ca:	bf88      	it	hi
 80074cc:	2200      	movhi	r2, #0
 80074ce:	4413      	add	r3, r2
 80074d0:	1a18      	subs	r0, r3, r0
 80074d2:	b003      	add	sp, #12
 80074d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80074da:	f801 5f01 	strb.w	r5, [r1, #1]!
 80074de:	e7ed      	b.n	80074bc <__exponent+0x4c>
 80074e0:	2330      	movs	r3, #48	; 0x30
 80074e2:	3130      	adds	r1, #48	; 0x30
 80074e4:	7083      	strb	r3, [r0, #2]
 80074e6:	70c1      	strb	r1, [r0, #3]
 80074e8:	1d03      	adds	r3, r0, #4
 80074ea:	e7f1      	b.n	80074d0 <__exponent+0x60>

080074ec <_printf_float>:
 80074ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f0:	ed2d 8b02 	vpush	{d8}
 80074f4:	b08d      	sub	sp, #52	; 0x34
 80074f6:	460c      	mov	r4, r1
 80074f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80074fc:	4616      	mov	r6, r2
 80074fe:	461f      	mov	r7, r3
 8007500:	4605      	mov	r5, r0
 8007502:	f000 fce7 	bl	8007ed4 <_localeconv_r>
 8007506:	f8d0 a000 	ldr.w	sl, [r0]
 800750a:	4650      	mov	r0, sl
 800750c:	f7f8 fed0 	bl	80002b0 <strlen>
 8007510:	2300      	movs	r3, #0
 8007512:	930a      	str	r3, [sp, #40]	; 0x28
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	9305      	str	r3, [sp, #20]
 8007518:	f8d8 3000 	ldr.w	r3, [r8]
 800751c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007520:	3307      	adds	r3, #7
 8007522:	f023 0307 	bic.w	r3, r3, #7
 8007526:	f103 0208 	add.w	r2, r3, #8
 800752a:	f8c8 2000 	str.w	r2, [r8]
 800752e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007532:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007536:	9307      	str	r3, [sp, #28]
 8007538:	f8cd 8018 	str.w	r8, [sp, #24]
 800753c:	ee08 0a10 	vmov	s16, r0
 8007540:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007544:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007548:	4b9e      	ldr	r3, [pc, #632]	; (80077c4 <_printf_float+0x2d8>)
 800754a:	f04f 32ff 	mov.w	r2, #4294967295
 800754e:	f7f9 fb0d 	bl	8000b6c <__aeabi_dcmpun>
 8007552:	bb88      	cbnz	r0, 80075b8 <_printf_float+0xcc>
 8007554:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007558:	4b9a      	ldr	r3, [pc, #616]	; (80077c4 <_printf_float+0x2d8>)
 800755a:	f04f 32ff 	mov.w	r2, #4294967295
 800755e:	f7f9 fae7 	bl	8000b30 <__aeabi_dcmple>
 8007562:	bb48      	cbnz	r0, 80075b8 <_printf_float+0xcc>
 8007564:	2200      	movs	r2, #0
 8007566:	2300      	movs	r3, #0
 8007568:	4640      	mov	r0, r8
 800756a:	4649      	mov	r1, r9
 800756c:	f7f9 fad6 	bl	8000b1c <__aeabi_dcmplt>
 8007570:	b110      	cbz	r0, 8007578 <_printf_float+0x8c>
 8007572:	232d      	movs	r3, #45	; 0x2d
 8007574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007578:	4a93      	ldr	r2, [pc, #588]	; (80077c8 <_printf_float+0x2dc>)
 800757a:	4b94      	ldr	r3, [pc, #592]	; (80077cc <_printf_float+0x2e0>)
 800757c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007580:	bf94      	ite	ls
 8007582:	4690      	movls	r8, r2
 8007584:	4698      	movhi	r8, r3
 8007586:	2303      	movs	r3, #3
 8007588:	6123      	str	r3, [r4, #16]
 800758a:	9b05      	ldr	r3, [sp, #20]
 800758c:	f023 0304 	bic.w	r3, r3, #4
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	f04f 0900 	mov.w	r9, #0
 8007596:	9700      	str	r7, [sp, #0]
 8007598:	4633      	mov	r3, r6
 800759a:	aa0b      	add	r2, sp, #44	; 0x2c
 800759c:	4621      	mov	r1, r4
 800759e:	4628      	mov	r0, r5
 80075a0:	f000 f9da 	bl	8007958 <_printf_common>
 80075a4:	3001      	adds	r0, #1
 80075a6:	f040 8090 	bne.w	80076ca <_printf_float+0x1de>
 80075aa:	f04f 30ff 	mov.w	r0, #4294967295
 80075ae:	b00d      	add	sp, #52	; 0x34
 80075b0:	ecbd 8b02 	vpop	{d8}
 80075b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b8:	4642      	mov	r2, r8
 80075ba:	464b      	mov	r3, r9
 80075bc:	4640      	mov	r0, r8
 80075be:	4649      	mov	r1, r9
 80075c0:	f7f9 fad4 	bl	8000b6c <__aeabi_dcmpun>
 80075c4:	b140      	cbz	r0, 80075d8 <_printf_float+0xec>
 80075c6:	464b      	mov	r3, r9
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	bfbc      	itt	lt
 80075cc:	232d      	movlt	r3, #45	; 0x2d
 80075ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80075d2:	4a7f      	ldr	r2, [pc, #508]	; (80077d0 <_printf_float+0x2e4>)
 80075d4:	4b7f      	ldr	r3, [pc, #508]	; (80077d4 <_printf_float+0x2e8>)
 80075d6:	e7d1      	b.n	800757c <_printf_float+0x90>
 80075d8:	6863      	ldr	r3, [r4, #4]
 80075da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80075de:	9206      	str	r2, [sp, #24]
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	d13f      	bne.n	8007664 <_printf_float+0x178>
 80075e4:	2306      	movs	r3, #6
 80075e6:	6063      	str	r3, [r4, #4]
 80075e8:	9b05      	ldr	r3, [sp, #20]
 80075ea:	6861      	ldr	r1, [r4, #4]
 80075ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80075f0:	2300      	movs	r3, #0
 80075f2:	9303      	str	r3, [sp, #12]
 80075f4:	ab0a      	add	r3, sp, #40	; 0x28
 80075f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80075fa:	ab09      	add	r3, sp, #36	; 0x24
 80075fc:	ec49 8b10 	vmov	d0, r8, r9
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	6022      	str	r2, [r4, #0]
 8007604:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007608:	4628      	mov	r0, r5
 800760a:	f7ff fecf 	bl	80073ac <__cvt>
 800760e:	9b06      	ldr	r3, [sp, #24]
 8007610:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007612:	2b47      	cmp	r3, #71	; 0x47
 8007614:	4680      	mov	r8, r0
 8007616:	d108      	bne.n	800762a <_printf_float+0x13e>
 8007618:	1cc8      	adds	r0, r1, #3
 800761a:	db02      	blt.n	8007622 <_printf_float+0x136>
 800761c:	6863      	ldr	r3, [r4, #4]
 800761e:	4299      	cmp	r1, r3
 8007620:	dd41      	ble.n	80076a6 <_printf_float+0x1ba>
 8007622:	f1ab 0302 	sub.w	r3, fp, #2
 8007626:	fa5f fb83 	uxtb.w	fp, r3
 800762a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800762e:	d820      	bhi.n	8007672 <_printf_float+0x186>
 8007630:	3901      	subs	r1, #1
 8007632:	465a      	mov	r2, fp
 8007634:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007638:	9109      	str	r1, [sp, #36]	; 0x24
 800763a:	f7ff ff19 	bl	8007470 <__exponent>
 800763e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007640:	1813      	adds	r3, r2, r0
 8007642:	2a01      	cmp	r2, #1
 8007644:	4681      	mov	r9, r0
 8007646:	6123      	str	r3, [r4, #16]
 8007648:	dc02      	bgt.n	8007650 <_printf_float+0x164>
 800764a:	6822      	ldr	r2, [r4, #0]
 800764c:	07d2      	lsls	r2, r2, #31
 800764e:	d501      	bpl.n	8007654 <_printf_float+0x168>
 8007650:	3301      	adds	r3, #1
 8007652:	6123      	str	r3, [r4, #16]
 8007654:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007658:	2b00      	cmp	r3, #0
 800765a:	d09c      	beq.n	8007596 <_printf_float+0xaa>
 800765c:	232d      	movs	r3, #45	; 0x2d
 800765e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007662:	e798      	b.n	8007596 <_printf_float+0xaa>
 8007664:	9a06      	ldr	r2, [sp, #24]
 8007666:	2a47      	cmp	r2, #71	; 0x47
 8007668:	d1be      	bne.n	80075e8 <_printf_float+0xfc>
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1bc      	bne.n	80075e8 <_printf_float+0xfc>
 800766e:	2301      	movs	r3, #1
 8007670:	e7b9      	b.n	80075e6 <_printf_float+0xfa>
 8007672:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007676:	d118      	bne.n	80076aa <_printf_float+0x1be>
 8007678:	2900      	cmp	r1, #0
 800767a:	6863      	ldr	r3, [r4, #4]
 800767c:	dd0b      	ble.n	8007696 <_printf_float+0x1aa>
 800767e:	6121      	str	r1, [r4, #16]
 8007680:	b913      	cbnz	r3, 8007688 <_printf_float+0x19c>
 8007682:	6822      	ldr	r2, [r4, #0]
 8007684:	07d0      	lsls	r0, r2, #31
 8007686:	d502      	bpl.n	800768e <_printf_float+0x1a2>
 8007688:	3301      	adds	r3, #1
 800768a:	440b      	add	r3, r1
 800768c:	6123      	str	r3, [r4, #16]
 800768e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007690:	f04f 0900 	mov.w	r9, #0
 8007694:	e7de      	b.n	8007654 <_printf_float+0x168>
 8007696:	b913      	cbnz	r3, 800769e <_printf_float+0x1b2>
 8007698:	6822      	ldr	r2, [r4, #0]
 800769a:	07d2      	lsls	r2, r2, #31
 800769c:	d501      	bpl.n	80076a2 <_printf_float+0x1b6>
 800769e:	3302      	adds	r3, #2
 80076a0:	e7f4      	b.n	800768c <_printf_float+0x1a0>
 80076a2:	2301      	movs	r3, #1
 80076a4:	e7f2      	b.n	800768c <_printf_float+0x1a0>
 80076a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80076aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ac:	4299      	cmp	r1, r3
 80076ae:	db05      	blt.n	80076bc <_printf_float+0x1d0>
 80076b0:	6823      	ldr	r3, [r4, #0]
 80076b2:	6121      	str	r1, [r4, #16]
 80076b4:	07d8      	lsls	r0, r3, #31
 80076b6:	d5ea      	bpl.n	800768e <_printf_float+0x1a2>
 80076b8:	1c4b      	adds	r3, r1, #1
 80076ba:	e7e7      	b.n	800768c <_printf_float+0x1a0>
 80076bc:	2900      	cmp	r1, #0
 80076be:	bfd4      	ite	le
 80076c0:	f1c1 0202 	rsble	r2, r1, #2
 80076c4:	2201      	movgt	r2, #1
 80076c6:	4413      	add	r3, r2
 80076c8:	e7e0      	b.n	800768c <_printf_float+0x1a0>
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	055a      	lsls	r2, r3, #21
 80076ce:	d407      	bmi.n	80076e0 <_printf_float+0x1f4>
 80076d0:	6923      	ldr	r3, [r4, #16]
 80076d2:	4642      	mov	r2, r8
 80076d4:	4631      	mov	r1, r6
 80076d6:	4628      	mov	r0, r5
 80076d8:	47b8      	blx	r7
 80076da:	3001      	adds	r0, #1
 80076dc:	d12c      	bne.n	8007738 <_printf_float+0x24c>
 80076de:	e764      	b.n	80075aa <_printf_float+0xbe>
 80076e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80076e4:	f240 80e0 	bls.w	80078a8 <_printf_float+0x3bc>
 80076e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076ec:	2200      	movs	r2, #0
 80076ee:	2300      	movs	r3, #0
 80076f0:	f7f9 fa0a 	bl	8000b08 <__aeabi_dcmpeq>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	d034      	beq.n	8007762 <_printf_float+0x276>
 80076f8:	4a37      	ldr	r2, [pc, #220]	; (80077d8 <_printf_float+0x2ec>)
 80076fa:	2301      	movs	r3, #1
 80076fc:	4631      	mov	r1, r6
 80076fe:	4628      	mov	r0, r5
 8007700:	47b8      	blx	r7
 8007702:	3001      	adds	r0, #1
 8007704:	f43f af51 	beq.w	80075aa <_printf_float+0xbe>
 8007708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800770c:	429a      	cmp	r2, r3
 800770e:	db02      	blt.n	8007716 <_printf_float+0x22a>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	07d8      	lsls	r0, r3, #31
 8007714:	d510      	bpl.n	8007738 <_printf_float+0x24c>
 8007716:	ee18 3a10 	vmov	r3, s16
 800771a:	4652      	mov	r2, sl
 800771c:	4631      	mov	r1, r6
 800771e:	4628      	mov	r0, r5
 8007720:	47b8      	blx	r7
 8007722:	3001      	adds	r0, #1
 8007724:	f43f af41 	beq.w	80075aa <_printf_float+0xbe>
 8007728:	f04f 0800 	mov.w	r8, #0
 800772c:	f104 091a 	add.w	r9, r4, #26
 8007730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007732:	3b01      	subs	r3, #1
 8007734:	4543      	cmp	r3, r8
 8007736:	dc09      	bgt.n	800774c <_printf_float+0x260>
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	079b      	lsls	r3, r3, #30
 800773c:	f100 8107 	bmi.w	800794e <_printf_float+0x462>
 8007740:	68e0      	ldr	r0, [r4, #12]
 8007742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007744:	4298      	cmp	r0, r3
 8007746:	bfb8      	it	lt
 8007748:	4618      	movlt	r0, r3
 800774a:	e730      	b.n	80075ae <_printf_float+0xc2>
 800774c:	2301      	movs	r3, #1
 800774e:	464a      	mov	r2, r9
 8007750:	4631      	mov	r1, r6
 8007752:	4628      	mov	r0, r5
 8007754:	47b8      	blx	r7
 8007756:	3001      	adds	r0, #1
 8007758:	f43f af27 	beq.w	80075aa <_printf_float+0xbe>
 800775c:	f108 0801 	add.w	r8, r8, #1
 8007760:	e7e6      	b.n	8007730 <_printf_float+0x244>
 8007762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007764:	2b00      	cmp	r3, #0
 8007766:	dc39      	bgt.n	80077dc <_printf_float+0x2f0>
 8007768:	4a1b      	ldr	r2, [pc, #108]	; (80077d8 <_printf_float+0x2ec>)
 800776a:	2301      	movs	r3, #1
 800776c:	4631      	mov	r1, r6
 800776e:	4628      	mov	r0, r5
 8007770:	47b8      	blx	r7
 8007772:	3001      	adds	r0, #1
 8007774:	f43f af19 	beq.w	80075aa <_printf_float+0xbe>
 8007778:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800777c:	4313      	orrs	r3, r2
 800777e:	d102      	bne.n	8007786 <_printf_float+0x29a>
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	07d9      	lsls	r1, r3, #31
 8007784:	d5d8      	bpl.n	8007738 <_printf_float+0x24c>
 8007786:	ee18 3a10 	vmov	r3, s16
 800778a:	4652      	mov	r2, sl
 800778c:	4631      	mov	r1, r6
 800778e:	4628      	mov	r0, r5
 8007790:	47b8      	blx	r7
 8007792:	3001      	adds	r0, #1
 8007794:	f43f af09 	beq.w	80075aa <_printf_float+0xbe>
 8007798:	f04f 0900 	mov.w	r9, #0
 800779c:	f104 0a1a 	add.w	sl, r4, #26
 80077a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a2:	425b      	negs	r3, r3
 80077a4:	454b      	cmp	r3, r9
 80077a6:	dc01      	bgt.n	80077ac <_printf_float+0x2c0>
 80077a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077aa:	e792      	b.n	80076d2 <_printf_float+0x1e6>
 80077ac:	2301      	movs	r3, #1
 80077ae:	4652      	mov	r2, sl
 80077b0:	4631      	mov	r1, r6
 80077b2:	4628      	mov	r0, r5
 80077b4:	47b8      	blx	r7
 80077b6:	3001      	adds	r0, #1
 80077b8:	f43f aef7 	beq.w	80075aa <_printf_float+0xbe>
 80077bc:	f109 0901 	add.w	r9, r9, #1
 80077c0:	e7ee      	b.n	80077a0 <_printf_float+0x2b4>
 80077c2:	bf00      	nop
 80077c4:	7fefffff 	.word	0x7fefffff
 80077c8:	0800a128 	.word	0x0800a128
 80077cc:	0800a12c 	.word	0x0800a12c
 80077d0:	0800a130 	.word	0x0800a130
 80077d4:	0800a134 	.word	0x0800a134
 80077d8:	0800a138 	.word	0x0800a138
 80077dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077e0:	429a      	cmp	r2, r3
 80077e2:	bfa8      	it	ge
 80077e4:	461a      	movge	r2, r3
 80077e6:	2a00      	cmp	r2, #0
 80077e8:	4691      	mov	r9, r2
 80077ea:	dc37      	bgt.n	800785c <_printf_float+0x370>
 80077ec:	f04f 0b00 	mov.w	fp, #0
 80077f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077f4:	f104 021a 	add.w	r2, r4, #26
 80077f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077fa:	9305      	str	r3, [sp, #20]
 80077fc:	eba3 0309 	sub.w	r3, r3, r9
 8007800:	455b      	cmp	r3, fp
 8007802:	dc33      	bgt.n	800786c <_printf_float+0x380>
 8007804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007808:	429a      	cmp	r2, r3
 800780a:	db3b      	blt.n	8007884 <_printf_float+0x398>
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	07da      	lsls	r2, r3, #31
 8007810:	d438      	bmi.n	8007884 <_printf_float+0x398>
 8007812:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007816:	eba2 0903 	sub.w	r9, r2, r3
 800781a:	9b05      	ldr	r3, [sp, #20]
 800781c:	1ad2      	subs	r2, r2, r3
 800781e:	4591      	cmp	r9, r2
 8007820:	bfa8      	it	ge
 8007822:	4691      	movge	r9, r2
 8007824:	f1b9 0f00 	cmp.w	r9, #0
 8007828:	dc35      	bgt.n	8007896 <_printf_float+0x3aa>
 800782a:	f04f 0800 	mov.w	r8, #0
 800782e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007832:	f104 0a1a 	add.w	sl, r4, #26
 8007836:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800783a:	1a9b      	subs	r3, r3, r2
 800783c:	eba3 0309 	sub.w	r3, r3, r9
 8007840:	4543      	cmp	r3, r8
 8007842:	f77f af79 	ble.w	8007738 <_printf_float+0x24c>
 8007846:	2301      	movs	r3, #1
 8007848:	4652      	mov	r2, sl
 800784a:	4631      	mov	r1, r6
 800784c:	4628      	mov	r0, r5
 800784e:	47b8      	blx	r7
 8007850:	3001      	adds	r0, #1
 8007852:	f43f aeaa 	beq.w	80075aa <_printf_float+0xbe>
 8007856:	f108 0801 	add.w	r8, r8, #1
 800785a:	e7ec      	b.n	8007836 <_printf_float+0x34a>
 800785c:	4613      	mov	r3, r2
 800785e:	4631      	mov	r1, r6
 8007860:	4642      	mov	r2, r8
 8007862:	4628      	mov	r0, r5
 8007864:	47b8      	blx	r7
 8007866:	3001      	adds	r0, #1
 8007868:	d1c0      	bne.n	80077ec <_printf_float+0x300>
 800786a:	e69e      	b.n	80075aa <_printf_float+0xbe>
 800786c:	2301      	movs	r3, #1
 800786e:	4631      	mov	r1, r6
 8007870:	4628      	mov	r0, r5
 8007872:	9205      	str	r2, [sp, #20]
 8007874:	47b8      	blx	r7
 8007876:	3001      	adds	r0, #1
 8007878:	f43f ae97 	beq.w	80075aa <_printf_float+0xbe>
 800787c:	9a05      	ldr	r2, [sp, #20]
 800787e:	f10b 0b01 	add.w	fp, fp, #1
 8007882:	e7b9      	b.n	80077f8 <_printf_float+0x30c>
 8007884:	ee18 3a10 	vmov	r3, s16
 8007888:	4652      	mov	r2, sl
 800788a:	4631      	mov	r1, r6
 800788c:	4628      	mov	r0, r5
 800788e:	47b8      	blx	r7
 8007890:	3001      	adds	r0, #1
 8007892:	d1be      	bne.n	8007812 <_printf_float+0x326>
 8007894:	e689      	b.n	80075aa <_printf_float+0xbe>
 8007896:	9a05      	ldr	r2, [sp, #20]
 8007898:	464b      	mov	r3, r9
 800789a:	4442      	add	r2, r8
 800789c:	4631      	mov	r1, r6
 800789e:	4628      	mov	r0, r5
 80078a0:	47b8      	blx	r7
 80078a2:	3001      	adds	r0, #1
 80078a4:	d1c1      	bne.n	800782a <_printf_float+0x33e>
 80078a6:	e680      	b.n	80075aa <_printf_float+0xbe>
 80078a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078aa:	2a01      	cmp	r2, #1
 80078ac:	dc01      	bgt.n	80078b2 <_printf_float+0x3c6>
 80078ae:	07db      	lsls	r3, r3, #31
 80078b0:	d53a      	bpl.n	8007928 <_printf_float+0x43c>
 80078b2:	2301      	movs	r3, #1
 80078b4:	4642      	mov	r2, r8
 80078b6:	4631      	mov	r1, r6
 80078b8:	4628      	mov	r0, r5
 80078ba:	47b8      	blx	r7
 80078bc:	3001      	adds	r0, #1
 80078be:	f43f ae74 	beq.w	80075aa <_printf_float+0xbe>
 80078c2:	ee18 3a10 	vmov	r3, s16
 80078c6:	4652      	mov	r2, sl
 80078c8:	4631      	mov	r1, r6
 80078ca:	4628      	mov	r0, r5
 80078cc:	47b8      	blx	r7
 80078ce:	3001      	adds	r0, #1
 80078d0:	f43f ae6b 	beq.w	80075aa <_printf_float+0xbe>
 80078d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078d8:	2200      	movs	r2, #0
 80078da:	2300      	movs	r3, #0
 80078dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80078e0:	f7f9 f912 	bl	8000b08 <__aeabi_dcmpeq>
 80078e4:	b9d8      	cbnz	r0, 800791e <_printf_float+0x432>
 80078e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80078ea:	f108 0201 	add.w	r2, r8, #1
 80078ee:	4631      	mov	r1, r6
 80078f0:	4628      	mov	r0, r5
 80078f2:	47b8      	blx	r7
 80078f4:	3001      	adds	r0, #1
 80078f6:	d10e      	bne.n	8007916 <_printf_float+0x42a>
 80078f8:	e657      	b.n	80075aa <_printf_float+0xbe>
 80078fa:	2301      	movs	r3, #1
 80078fc:	4652      	mov	r2, sl
 80078fe:	4631      	mov	r1, r6
 8007900:	4628      	mov	r0, r5
 8007902:	47b8      	blx	r7
 8007904:	3001      	adds	r0, #1
 8007906:	f43f ae50 	beq.w	80075aa <_printf_float+0xbe>
 800790a:	f108 0801 	add.w	r8, r8, #1
 800790e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007910:	3b01      	subs	r3, #1
 8007912:	4543      	cmp	r3, r8
 8007914:	dcf1      	bgt.n	80078fa <_printf_float+0x40e>
 8007916:	464b      	mov	r3, r9
 8007918:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800791c:	e6da      	b.n	80076d4 <_printf_float+0x1e8>
 800791e:	f04f 0800 	mov.w	r8, #0
 8007922:	f104 0a1a 	add.w	sl, r4, #26
 8007926:	e7f2      	b.n	800790e <_printf_float+0x422>
 8007928:	2301      	movs	r3, #1
 800792a:	4642      	mov	r2, r8
 800792c:	e7df      	b.n	80078ee <_printf_float+0x402>
 800792e:	2301      	movs	r3, #1
 8007930:	464a      	mov	r2, r9
 8007932:	4631      	mov	r1, r6
 8007934:	4628      	mov	r0, r5
 8007936:	47b8      	blx	r7
 8007938:	3001      	adds	r0, #1
 800793a:	f43f ae36 	beq.w	80075aa <_printf_float+0xbe>
 800793e:	f108 0801 	add.w	r8, r8, #1
 8007942:	68e3      	ldr	r3, [r4, #12]
 8007944:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007946:	1a5b      	subs	r3, r3, r1
 8007948:	4543      	cmp	r3, r8
 800794a:	dcf0      	bgt.n	800792e <_printf_float+0x442>
 800794c:	e6f8      	b.n	8007740 <_printf_float+0x254>
 800794e:	f04f 0800 	mov.w	r8, #0
 8007952:	f104 0919 	add.w	r9, r4, #25
 8007956:	e7f4      	b.n	8007942 <_printf_float+0x456>

08007958 <_printf_common>:
 8007958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800795c:	4616      	mov	r6, r2
 800795e:	4699      	mov	r9, r3
 8007960:	688a      	ldr	r2, [r1, #8]
 8007962:	690b      	ldr	r3, [r1, #16]
 8007964:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007968:	4293      	cmp	r3, r2
 800796a:	bfb8      	it	lt
 800796c:	4613      	movlt	r3, r2
 800796e:	6033      	str	r3, [r6, #0]
 8007970:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007974:	4607      	mov	r7, r0
 8007976:	460c      	mov	r4, r1
 8007978:	b10a      	cbz	r2, 800797e <_printf_common+0x26>
 800797a:	3301      	adds	r3, #1
 800797c:	6033      	str	r3, [r6, #0]
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	0699      	lsls	r1, r3, #26
 8007982:	bf42      	ittt	mi
 8007984:	6833      	ldrmi	r3, [r6, #0]
 8007986:	3302      	addmi	r3, #2
 8007988:	6033      	strmi	r3, [r6, #0]
 800798a:	6825      	ldr	r5, [r4, #0]
 800798c:	f015 0506 	ands.w	r5, r5, #6
 8007990:	d106      	bne.n	80079a0 <_printf_common+0x48>
 8007992:	f104 0a19 	add.w	sl, r4, #25
 8007996:	68e3      	ldr	r3, [r4, #12]
 8007998:	6832      	ldr	r2, [r6, #0]
 800799a:	1a9b      	subs	r3, r3, r2
 800799c:	42ab      	cmp	r3, r5
 800799e:	dc26      	bgt.n	80079ee <_printf_common+0x96>
 80079a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079a4:	1e13      	subs	r3, r2, #0
 80079a6:	6822      	ldr	r2, [r4, #0]
 80079a8:	bf18      	it	ne
 80079aa:	2301      	movne	r3, #1
 80079ac:	0692      	lsls	r2, r2, #26
 80079ae:	d42b      	bmi.n	8007a08 <_printf_common+0xb0>
 80079b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079b4:	4649      	mov	r1, r9
 80079b6:	4638      	mov	r0, r7
 80079b8:	47c0      	blx	r8
 80079ba:	3001      	adds	r0, #1
 80079bc:	d01e      	beq.n	80079fc <_printf_common+0xa4>
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	6922      	ldr	r2, [r4, #16]
 80079c2:	f003 0306 	and.w	r3, r3, #6
 80079c6:	2b04      	cmp	r3, #4
 80079c8:	bf02      	ittt	eq
 80079ca:	68e5      	ldreq	r5, [r4, #12]
 80079cc:	6833      	ldreq	r3, [r6, #0]
 80079ce:	1aed      	subeq	r5, r5, r3
 80079d0:	68a3      	ldr	r3, [r4, #8]
 80079d2:	bf0c      	ite	eq
 80079d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079d8:	2500      	movne	r5, #0
 80079da:	4293      	cmp	r3, r2
 80079dc:	bfc4      	itt	gt
 80079de:	1a9b      	subgt	r3, r3, r2
 80079e0:	18ed      	addgt	r5, r5, r3
 80079e2:	2600      	movs	r6, #0
 80079e4:	341a      	adds	r4, #26
 80079e6:	42b5      	cmp	r5, r6
 80079e8:	d11a      	bne.n	8007a20 <_printf_common+0xc8>
 80079ea:	2000      	movs	r0, #0
 80079ec:	e008      	b.n	8007a00 <_printf_common+0xa8>
 80079ee:	2301      	movs	r3, #1
 80079f0:	4652      	mov	r2, sl
 80079f2:	4649      	mov	r1, r9
 80079f4:	4638      	mov	r0, r7
 80079f6:	47c0      	blx	r8
 80079f8:	3001      	adds	r0, #1
 80079fa:	d103      	bne.n	8007a04 <_printf_common+0xac>
 80079fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a04:	3501      	adds	r5, #1
 8007a06:	e7c6      	b.n	8007996 <_printf_common+0x3e>
 8007a08:	18e1      	adds	r1, r4, r3
 8007a0a:	1c5a      	adds	r2, r3, #1
 8007a0c:	2030      	movs	r0, #48	; 0x30
 8007a0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a12:	4422      	add	r2, r4
 8007a14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a1c:	3302      	adds	r3, #2
 8007a1e:	e7c7      	b.n	80079b0 <_printf_common+0x58>
 8007a20:	2301      	movs	r3, #1
 8007a22:	4622      	mov	r2, r4
 8007a24:	4649      	mov	r1, r9
 8007a26:	4638      	mov	r0, r7
 8007a28:	47c0      	blx	r8
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	d0e6      	beq.n	80079fc <_printf_common+0xa4>
 8007a2e:	3601      	adds	r6, #1
 8007a30:	e7d9      	b.n	80079e6 <_printf_common+0x8e>
	...

08007a34 <_printf_i>:
 8007a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a38:	7e0f      	ldrb	r7, [r1, #24]
 8007a3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a3c:	2f78      	cmp	r7, #120	; 0x78
 8007a3e:	4691      	mov	r9, r2
 8007a40:	4680      	mov	r8, r0
 8007a42:	460c      	mov	r4, r1
 8007a44:	469a      	mov	sl, r3
 8007a46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a4a:	d807      	bhi.n	8007a5c <_printf_i+0x28>
 8007a4c:	2f62      	cmp	r7, #98	; 0x62
 8007a4e:	d80a      	bhi.n	8007a66 <_printf_i+0x32>
 8007a50:	2f00      	cmp	r7, #0
 8007a52:	f000 80d4 	beq.w	8007bfe <_printf_i+0x1ca>
 8007a56:	2f58      	cmp	r7, #88	; 0x58
 8007a58:	f000 80c0 	beq.w	8007bdc <_printf_i+0x1a8>
 8007a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a64:	e03a      	b.n	8007adc <_printf_i+0xa8>
 8007a66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a6a:	2b15      	cmp	r3, #21
 8007a6c:	d8f6      	bhi.n	8007a5c <_printf_i+0x28>
 8007a6e:	a101      	add	r1, pc, #4	; (adr r1, 8007a74 <_printf_i+0x40>)
 8007a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a74:	08007acd 	.word	0x08007acd
 8007a78:	08007ae1 	.word	0x08007ae1
 8007a7c:	08007a5d 	.word	0x08007a5d
 8007a80:	08007a5d 	.word	0x08007a5d
 8007a84:	08007a5d 	.word	0x08007a5d
 8007a88:	08007a5d 	.word	0x08007a5d
 8007a8c:	08007ae1 	.word	0x08007ae1
 8007a90:	08007a5d 	.word	0x08007a5d
 8007a94:	08007a5d 	.word	0x08007a5d
 8007a98:	08007a5d 	.word	0x08007a5d
 8007a9c:	08007a5d 	.word	0x08007a5d
 8007aa0:	08007be5 	.word	0x08007be5
 8007aa4:	08007b0d 	.word	0x08007b0d
 8007aa8:	08007b9f 	.word	0x08007b9f
 8007aac:	08007a5d 	.word	0x08007a5d
 8007ab0:	08007a5d 	.word	0x08007a5d
 8007ab4:	08007c07 	.word	0x08007c07
 8007ab8:	08007a5d 	.word	0x08007a5d
 8007abc:	08007b0d 	.word	0x08007b0d
 8007ac0:	08007a5d 	.word	0x08007a5d
 8007ac4:	08007a5d 	.word	0x08007a5d
 8007ac8:	08007ba7 	.word	0x08007ba7
 8007acc:	682b      	ldr	r3, [r5, #0]
 8007ace:	1d1a      	adds	r2, r3, #4
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	602a      	str	r2, [r5, #0]
 8007ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007adc:	2301      	movs	r3, #1
 8007ade:	e09f      	b.n	8007c20 <_printf_i+0x1ec>
 8007ae0:	6820      	ldr	r0, [r4, #0]
 8007ae2:	682b      	ldr	r3, [r5, #0]
 8007ae4:	0607      	lsls	r7, r0, #24
 8007ae6:	f103 0104 	add.w	r1, r3, #4
 8007aea:	6029      	str	r1, [r5, #0]
 8007aec:	d501      	bpl.n	8007af2 <_printf_i+0xbe>
 8007aee:	681e      	ldr	r6, [r3, #0]
 8007af0:	e003      	b.n	8007afa <_printf_i+0xc6>
 8007af2:	0646      	lsls	r6, r0, #25
 8007af4:	d5fb      	bpl.n	8007aee <_printf_i+0xba>
 8007af6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007afa:	2e00      	cmp	r6, #0
 8007afc:	da03      	bge.n	8007b06 <_printf_i+0xd2>
 8007afe:	232d      	movs	r3, #45	; 0x2d
 8007b00:	4276      	negs	r6, r6
 8007b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b06:	485a      	ldr	r0, [pc, #360]	; (8007c70 <_printf_i+0x23c>)
 8007b08:	230a      	movs	r3, #10
 8007b0a:	e012      	b.n	8007b32 <_printf_i+0xfe>
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	6820      	ldr	r0, [r4, #0]
 8007b10:	1d19      	adds	r1, r3, #4
 8007b12:	6029      	str	r1, [r5, #0]
 8007b14:	0605      	lsls	r5, r0, #24
 8007b16:	d501      	bpl.n	8007b1c <_printf_i+0xe8>
 8007b18:	681e      	ldr	r6, [r3, #0]
 8007b1a:	e002      	b.n	8007b22 <_printf_i+0xee>
 8007b1c:	0641      	lsls	r1, r0, #25
 8007b1e:	d5fb      	bpl.n	8007b18 <_printf_i+0xe4>
 8007b20:	881e      	ldrh	r6, [r3, #0]
 8007b22:	4853      	ldr	r0, [pc, #332]	; (8007c70 <_printf_i+0x23c>)
 8007b24:	2f6f      	cmp	r7, #111	; 0x6f
 8007b26:	bf0c      	ite	eq
 8007b28:	2308      	moveq	r3, #8
 8007b2a:	230a      	movne	r3, #10
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b32:	6865      	ldr	r5, [r4, #4]
 8007b34:	60a5      	str	r5, [r4, #8]
 8007b36:	2d00      	cmp	r5, #0
 8007b38:	bfa2      	ittt	ge
 8007b3a:	6821      	ldrge	r1, [r4, #0]
 8007b3c:	f021 0104 	bicge.w	r1, r1, #4
 8007b40:	6021      	strge	r1, [r4, #0]
 8007b42:	b90e      	cbnz	r6, 8007b48 <_printf_i+0x114>
 8007b44:	2d00      	cmp	r5, #0
 8007b46:	d04b      	beq.n	8007be0 <_printf_i+0x1ac>
 8007b48:	4615      	mov	r5, r2
 8007b4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b4e:	fb03 6711 	mls	r7, r3, r1, r6
 8007b52:	5dc7      	ldrb	r7, [r0, r7]
 8007b54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b58:	4637      	mov	r7, r6
 8007b5a:	42bb      	cmp	r3, r7
 8007b5c:	460e      	mov	r6, r1
 8007b5e:	d9f4      	bls.n	8007b4a <_printf_i+0x116>
 8007b60:	2b08      	cmp	r3, #8
 8007b62:	d10b      	bne.n	8007b7c <_printf_i+0x148>
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	07de      	lsls	r6, r3, #31
 8007b68:	d508      	bpl.n	8007b7c <_printf_i+0x148>
 8007b6a:	6923      	ldr	r3, [r4, #16]
 8007b6c:	6861      	ldr	r1, [r4, #4]
 8007b6e:	4299      	cmp	r1, r3
 8007b70:	bfde      	ittt	le
 8007b72:	2330      	movle	r3, #48	; 0x30
 8007b74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b7c:	1b52      	subs	r2, r2, r5
 8007b7e:	6122      	str	r2, [r4, #16]
 8007b80:	f8cd a000 	str.w	sl, [sp]
 8007b84:	464b      	mov	r3, r9
 8007b86:	aa03      	add	r2, sp, #12
 8007b88:	4621      	mov	r1, r4
 8007b8a:	4640      	mov	r0, r8
 8007b8c:	f7ff fee4 	bl	8007958 <_printf_common>
 8007b90:	3001      	adds	r0, #1
 8007b92:	d14a      	bne.n	8007c2a <_printf_i+0x1f6>
 8007b94:	f04f 30ff 	mov.w	r0, #4294967295
 8007b98:	b004      	add	sp, #16
 8007b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	f043 0320 	orr.w	r3, r3, #32
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	4833      	ldr	r0, [pc, #204]	; (8007c74 <_printf_i+0x240>)
 8007ba8:	2778      	movs	r7, #120	; 0x78
 8007baa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	6829      	ldr	r1, [r5, #0]
 8007bb2:	061f      	lsls	r7, r3, #24
 8007bb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bb8:	d402      	bmi.n	8007bc0 <_printf_i+0x18c>
 8007bba:	065f      	lsls	r7, r3, #25
 8007bbc:	bf48      	it	mi
 8007bbe:	b2b6      	uxthmi	r6, r6
 8007bc0:	07df      	lsls	r7, r3, #31
 8007bc2:	bf48      	it	mi
 8007bc4:	f043 0320 	orrmi.w	r3, r3, #32
 8007bc8:	6029      	str	r1, [r5, #0]
 8007bca:	bf48      	it	mi
 8007bcc:	6023      	strmi	r3, [r4, #0]
 8007bce:	b91e      	cbnz	r6, 8007bd8 <_printf_i+0x1a4>
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	f023 0320 	bic.w	r3, r3, #32
 8007bd6:	6023      	str	r3, [r4, #0]
 8007bd8:	2310      	movs	r3, #16
 8007bda:	e7a7      	b.n	8007b2c <_printf_i+0xf8>
 8007bdc:	4824      	ldr	r0, [pc, #144]	; (8007c70 <_printf_i+0x23c>)
 8007bde:	e7e4      	b.n	8007baa <_printf_i+0x176>
 8007be0:	4615      	mov	r5, r2
 8007be2:	e7bd      	b.n	8007b60 <_printf_i+0x12c>
 8007be4:	682b      	ldr	r3, [r5, #0]
 8007be6:	6826      	ldr	r6, [r4, #0]
 8007be8:	6961      	ldr	r1, [r4, #20]
 8007bea:	1d18      	adds	r0, r3, #4
 8007bec:	6028      	str	r0, [r5, #0]
 8007bee:	0635      	lsls	r5, r6, #24
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	d501      	bpl.n	8007bf8 <_printf_i+0x1c4>
 8007bf4:	6019      	str	r1, [r3, #0]
 8007bf6:	e002      	b.n	8007bfe <_printf_i+0x1ca>
 8007bf8:	0670      	lsls	r0, r6, #25
 8007bfa:	d5fb      	bpl.n	8007bf4 <_printf_i+0x1c0>
 8007bfc:	8019      	strh	r1, [r3, #0]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	6123      	str	r3, [r4, #16]
 8007c02:	4615      	mov	r5, r2
 8007c04:	e7bc      	b.n	8007b80 <_printf_i+0x14c>
 8007c06:	682b      	ldr	r3, [r5, #0]
 8007c08:	1d1a      	adds	r2, r3, #4
 8007c0a:	602a      	str	r2, [r5, #0]
 8007c0c:	681d      	ldr	r5, [r3, #0]
 8007c0e:	6862      	ldr	r2, [r4, #4]
 8007c10:	2100      	movs	r1, #0
 8007c12:	4628      	mov	r0, r5
 8007c14:	f7f8 fafc 	bl	8000210 <memchr>
 8007c18:	b108      	cbz	r0, 8007c1e <_printf_i+0x1ea>
 8007c1a:	1b40      	subs	r0, r0, r5
 8007c1c:	6060      	str	r0, [r4, #4]
 8007c1e:	6863      	ldr	r3, [r4, #4]
 8007c20:	6123      	str	r3, [r4, #16]
 8007c22:	2300      	movs	r3, #0
 8007c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c28:	e7aa      	b.n	8007b80 <_printf_i+0x14c>
 8007c2a:	6923      	ldr	r3, [r4, #16]
 8007c2c:	462a      	mov	r2, r5
 8007c2e:	4649      	mov	r1, r9
 8007c30:	4640      	mov	r0, r8
 8007c32:	47d0      	blx	sl
 8007c34:	3001      	adds	r0, #1
 8007c36:	d0ad      	beq.n	8007b94 <_printf_i+0x160>
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	079b      	lsls	r3, r3, #30
 8007c3c:	d413      	bmi.n	8007c66 <_printf_i+0x232>
 8007c3e:	68e0      	ldr	r0, [r4, #12]
 8007c40:	9b03      	ldr	r3, [sp, #12]
 8007c42:	4298      	cmp	r0, r3
 8007c44:	bfb8      	it	lt
 8007c46:	4618      	movlt	r0, r3
 8007c48:	e7a6      	b.n	8007b98 <_printf_i+0x164>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	4632      	mov	r2, r6
 8007c4e:	4649      	mov	r1, r9
 8007c50:	4640      	mov	r0, r8
 8007c52:	47d0      	blx	sl
 8007c54:	3001      	adds	r0, #1
 8007c56:	d09d      	beq.n	8007b94 <_printf_i+0x160>
 8007c58:	3501      	adds	r5, #1
 8007c5a:	68e3      	ldr	r3, [r4, #12]
 8007c5c:	9903      	ldr	r1, [sp, #12]
 8007c5e:	1a5b      	subs	r3, r3, r1
 8007c60:	42ab      	cmp	r3, r5
 8007c62:	dcf2      	bgt.n	8007c4a <_printf_i+0x216>
 8007c64:	e7eb      	b.n	8007c3e <_printf_i+0x20a>
 8007c66:	2500      	movs	r5, #0
 8007c68:	f104 0619 	add.w	r6, r4, #25
 8007c6c:	e7f5      	b.n	8007c5a <_printf_i+0x226>
 8007c6e:	bf00      	nop
 8007c70:	0800a13a 	.word	0x0800a13a
 8007c74:	0800a14b 	.word	0x0800a14b

08007c78 <std>:
 8007c78:	2300      	movs	r3, #0
 8007c7a:	b510      	push	{r4, lr}
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8007c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c86:	6083      	str	r3, [r0, #8]
 8007c88:	8181      	strh	r1, [r0, #12]
 8007c8a:	6643      	str	r3, [r0, #100]	; 0x64
 8007c8c:	81c2      	strh	r2, [r0, #14]
 8007c8e:	6183      	str	r3, [r0, #24]
 8007c90:	4619      	mov	r1, r3
 8007c92:	2208      	movs	r2, #8
 8007c94:	305c      	adds	r0, #92	; 0x5c
 8007c96:	f000 f914 	bl	8007ec2 <memset>
 8007c9a:	4b0d      	ldr	r3, [pc, #52]	; (8007cd0 <std+0x58>)
 8007c9c:	6263      	str	r3, [r4, #36]	; 0x24
 8007c9e:	4b0d      	ldr	r3, [pc, #52]	; (8007cd4 <std+0x5c>)
 8007ca0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ca2:	4b0d      	ldr	r3, [pc, #52]	; (8007cd8 <std+0x60>)
 8007ca4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ca6:	4b0d      	ldr	r3, [pc, #52]	; (8007cdc <std+0x64>)
 8007ca8:	6323      	str	r3, [r4, #48]	; 0x30
 8007caa:	4b0d      	ldr	r3, [pc, #52]	; (8007ce0 <std+0x68>)
 8007cac:	6224      	str	r4, [r4, #32]
 8007cae:	429c      	cmp	r4, r3
 8007cb0:	d006      	beq.n	8007cc0 <std+0x48>
 8007cb2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007cb6:	4294      	cmp	r4, r2
 8007cb8:	d002      	beq.n	8007cc0 <std+0x48>
 8007cba:	33d0      	adds	r3, #208	; 0xd0
 8007cbc:	429c      	cmp	r4, r3
 8007cbe:	d105      	bne.n	8007ccc <std+0x54>
 8007cc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cc8:	f000 b978 	b.w	8007fbc <__retarget_lock_init_recursive>
 8007ccc:	bd10      	pop	{r4, pc}
 8007cce:	bf00      	nop
 8007cd0:	08007e3d 	.word	0x08007e3d
 8007cd4:	08007e5f 	.word	0x08007e5f
 8007cd8:	08007e97 	.word	0x08007e97
 8007cdc:	08007ebb 	.word	0x08007ebb
 8007ce0:	200008b0 	.word	0x200008b0

08007ce4 <stdio_exit_handler>:
 8007ce4:	4a02      	ldr	r2, [pc, #8]	; (8007cf0 <stdio_exit_handler+0xc>)
 8007ce6:	4903      	ldr	r1, [pc, #12]	; (8007cf4 <stdio_exit_handler+0x10>)
 8007ce8:	4803      	ldr	r0, [pc, #12]	; (8007cf8 <stdio_exit_handler+0x14>)
 8007cea:	f000 b869 	b.w	8007dc0 <_fwalk_sglue>
 8007cee:	bf00      	nop
 8007cf0:	20000014 	.word	0x20000014
 8007cf4:	08009971 	.word	0x08009971
 8007cf8:	20000020 	.word	0x20000020

08007cfc <cleanup_stdio>:
 8007cfc:	6841      	ldr	r1, [r0, #4]
 8007cfe:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <cleanup_stdio+0x34>)
 8007d00:	4299      	cmp	r1, r3
 8007d02:	b510      	push	{r4, lr}
 8007d04:	4604      	mov	r4, r0
 8007d06:	d001      	beq.n	8007d0c <cleanup_stdio+0x10>
 8007d08:	f001 fe32 	bl	8009970 <_fflush_r>
 8007d0c:	68a1      	ldr	r1, [r4, #8]
 8007d0e:	4b09      	ldr	r3, [pc, #36]	; (8007d34 <cleanup_stdio+0x38>)
 8007d10:	4299      	cmp	r1, r3
 8007d12:	d002      	beq.n	8007d1a <cleanup_stdio+0x1e>
 8007d14:	4620      	mov	r0, r4
 8007d16:	f001 fe2b 	bl	8009970 <_fflush_r>
 8007d1a:	68e1      	ldr	r1, [r4, #12]
 8007d1c:	4b06      	ldr	r3, [pc, #24]	; (8007d38 <cleanup_stdio+0x3c>)
 8007d1e:	4299      	cmp	r1, r3
 8007d20:	d004      	beq.n	8007d2c <cleanup_stdio+0x30>
 8007d22:	4620      	mov	r0, r4
 8007d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d28:	f001 be22 	b.w	8009970 <_fflush_r>
 8007d2c:	bd10      	pop	{r4, pc}
 8007d2e:	bf00      	nop
 8007d30:	200008b0 	.word	0x200008b0
 8007d34:	20000918 	.word	0x20000918
 8007d38:	20000980 	.word	0x20000980

08007d3c <global_stdio_init.part.0>:
 8007d3c:	b510      	push	{r4, lr}
 8007d3e:	4b0b      	ldr	r3, [pc, #44]	; (8007d6c <global_stdio_init.part.0+0x30>)
 8007d40:	4c0b      	ldr	r4, [pc, #44]	; (8007d70 <global_stdio_init.part.0+0x34>)
 8007d42:	4a0c      	ldr	r2, [pc, #48]	; (8007d74 <global_stdio_init.part.0+0x38>)
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	4620      	mov	r0, r4
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2104      	movs	r1, #4
 8007d4c:	f7ff ff94 	bl	8007c78 <std>
 8007d50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007d54:	2201      	movs	r2, #1
 8007d56:	2109      	movs	r1, #9
 8007d58:	f7ff ff8e 	bl	8007c78 <std>
 8007d5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007d60:	2202      	movs	r2, #2
 8007d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d66:	2112      	movs	r1, #18
 8007d68:	f7ff bf86 	b.w	8007c78 <std>
 8007d6c:	200009e8 	.word	0x200009e8
 8007d70:	200008b0 	.word	0x200008b0
 8007d74:	08007ce5 	.word	0x08007ce5

08007d78 <__sfp_lock_acquire>:
 8007d78:	4801      	ldr	r0, [pc, #4]	; (8007d80 <__sfp_lock_acquire+0x8>)
 8007d7a:	f000 b920 	b.w	8007fbe <__retarget_lock_acquire_recursive>
 8007d7e:	bf00      	nop
 8007d80:	200009f1 	.word	0x200009f1

08007d84 <__sfp_lock_release>:
 8007d84:	4801      	ldr	r0, [pc, #4]	; (8007d8c <__sfp_lock_release+0x8>)
 8007d86:	f000 b91b 	b.w	8007fc0 <__retarget_lock_release_recursive>
 8007d8a:	bf00      	nop
 8007d8c:	200009f1 	.word	0x200009f1

08007d90 <__sinit>:
 8007d90:	b510      	push	{r4, lr}
 8007d92:	4604      	mov	r4, r0
 8007d94:	f7ff fff0 	bl	8007d78 <__sfp_lock_acquire>
 8007d98:	6a23      	ldr	r3, [r4, #32]
 8007d9a:	b11b      	cbz	r3, 8007da4 <__sinit+0x14>
 8007d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da0:	f7ff bff0 	b.w	8007d84 <__sfp_lock_release>
 8007da4:	4b04      	ldr	r3, [pc, #16]	; (8007db8 <__sinit+0x28>)
 8007da6:	6223      	str	r3, [r4, #32]
 8007da8:	4b04      	ldr	r3, [pc, #16]	; (8007dbc <__sinit+0x2c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1f5      	bne.n	8007d9c <__sinit+0xc>
 8007db0:	f7ff ffc4 	bl	8007d3c <global_stdio_init.part.0>
 8007db4:	e7f2      	b.n	8007d9c <__sinit+0xc>
 8007db6:	bf00      	nop
 8007db8:	08007cfd 	.word	0x08007cfd
 8007dbc:	200009e8 	.word	0x200009e8

08007dc0 <_fwalk_sglue>:
 8007dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dc4:	4607      	mov	r7, r0
 8007dc6:	4688      	mov	r8, r1
 8007dc8:	4614      	mov	r4, r2
 8007dca:	2600      	movs	r6, #0
 8007dcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dd0:	f1b9 0901 	subs.w	r9, r9, #1
 8007dd4:	d505      	bpl.n	8007de2 <_fwalk_sglue+0x22>
 8007dd6:	6824      	ldr	r4, [r4, #0]
 8007dd8:	2c00      	cmp	r4, #0
 8007dda:	d1f7      	bne.n	8007dcc <_fwalk_sglue+0xc>
 8007ddc:	4630      	mov	r0, r6
 8007dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007de2:	89ab      	ldrh	r3, [r5, #12]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d907      	bls.n	8007df8 <_fwalk_sglue+0x38>
 8007de8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dec:	3301      	adds	r3, #1
 8007dee:	d003      	beq.n	8007df8 <_fwalk_sglue+0x38>
 8007df0:	4629      	mov	r1, r5
 8007df2:	4638      	mov	r0, r7
 8007df4:	47c0      	blx	r8
 8007df6:	4306      	orrs	r6, r0
 8007df8:	3568      	adds	r5, #104	; 0x68
 8007dfa:	e7e9      	b.n	8007dd0 <_fwalk_sglue+0x10>

08007dfc <siprintf>:
 8007dfc:	b40e      	push	{r1, r2, r3}
 8007dfe:	b500      	push	{lr}
 8007e00:	b09c      	sub	sp, #112	; 0x70
 8007e02:	ab1d      	add	r3, sp, #116	; 0x74
 8007e04:	9002      	str	r0, [sp, #8]
 8007e06:	9006      	str	r0, [sp, #24]
 8007e08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e0c:	4809      	ldr	r0, [pc, #36]	; (8007e34 <siprintf+0x38>)
 8007e0e:	9107      	str	r1, [sp, #28]
 8007e10:	9104      	str	r1, [sp, #16]
 8007e12:	4909      	ldr	r1, [pc, #36]	; (8007e38 <siprintf+0x3c>)
 8007e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e18:	9105      	str	r1, [sp, #20]
 8007e1a:	6800      	ldr	r0, [r0, #0]
 8007e1c:	9301      	str	r3, [sp, #4]
 8007e1e:	a902      	add	r1, sp, #8
 8007e20:	f001 fc22 	bl	8009668 <_svfiprintf_r>
 8007e24:	9b02      	ldr	r3, [sp, #8]
 8007e26:	2200      	movs	r2, #0
 8007e28:	701a      	strb	r2, [r3, #0]
 8007e2a:	b01c      	add	sp, #112	; 0x70
 8007e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e30:	b003      	add	sp, #12
 8007e32:	4770      	bx	lr
 8007e34:	2000006c 	.word	0x2000006c
 8007e38:	ffff0208 	.word	0xffff0208

08007e3c <__sread>:
 8007e3c:	b510      	push	{r4, lr}
 8007e3e:	460c      	mov	r4, r1
 8007e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e44:	f000 f86c 	bl	8007f20 <_read_r>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	bfab      	itete	ge
 8007e4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8007e50:	181b      	addge	r3, r3, r0
 8007e52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e56:	bfac      	ite	ge
 8007e58:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e5a:	81a3      	strhlt	r3, [r4, #12]
 8007e5c:	bd10      	pop	{r4, pc}

08007e5e <__swrite>:
 8007e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e62:	461f      	mov	r7, r3
 8007e64:	898b      	ldrh	r3, [r1, #12]
 8007e66:	05db      	lsls	r3, r3, #23
 8007e68:	4605      	mov	r5, r0
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	4616      	mov	r6, r2
 8007e6e:	d505      	bpl.n	8007e7c <__swrite+0x1e>
 8007e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e74:	2302      	movs	r3, #2
 8007e76:	2200      	movs	r2, #0
 8007e78:	f000 f840 	bl	8007efc <_lseek_r>
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e86:	81a3      	strh	r3, [r4, #12]
 8007e88:	4632      	mov	r2, r6
 8007e8a:	463b      	mov	r3, r7
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e92:	f000 b857 	b.w	8007f44 <_write_r>

08007e96 <__sseek>:
 8007e96:	b510      	push	{r4, lr}
 8007e98:	460c      	mov	r4, r1
 8007e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e9e:	f000 f82d 	bl	8007efc <_lseek_r>
 8007ea2:	1c43      	adds	r3, r0, #1
 8007ea4:	89a3      	ldrh	r3, [r4, #12]
 8007ea6:	bf15      	itete	ne
 8007ea8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007eaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007eae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007eb2:	81a3      	strheq	r3, [r4, #12]
 8007eb4:	bf18      	it	ne
 8007eb6:	81a3      	strhne	r3, [r4, #12]
 8007eb8:	bd10      	pop	{r4, pc}

08007eba <__sclose>:
 8007eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ebe:	f000 b80d 	b.w	8007edc <_close_r>

08007ec2 <memset>:
 8007ec2:	4402      	add	r2, r0
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d100      	bne.n	8007ecc <memset+0xa>
 8007eca:	4770      	bx	lr
 8007ecc:	f803 1b01 	strb.w	r1, [r3], #1
 8007ed0:	e7f9      	b.n	8007ec6 <memset+0x4>
	...

08007ed4 <_localeconv_r>:
 8007ed4:	4800      	ldr	r0, [pc, #0]	; (8007ed8 <_localeconv_r+0x4>)
 8007ed6:	4770      	bx	lr
 8007ed8:	20000160 	.word	0x20000160

08007edc <_close_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4d06      	ldr	r5, [pc, #24]	; (8007ef8 <_close_r+0x1c>)
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	4608      	mov	r0, r1
 8007ee6:	602b      	str	r3, [r5, #0]
 8007ee8:	f7fa fd2d 	bl	8002946 <_close>
 8007eec:	1c43      	adds	r3, r0, #1
 8007eee:	d102      	bne.n	8007ef6 <_close_r+0x1a>
 8007ef0:	682b      	ldr	r3, [r5, #0]
 8007ef2:	b103      	cbz	r3, 8007ef6 <_close_r+0x1a>
 8007ef4:	6023      	str	r3, [r4, #0]
 8007ef6:	bd38      	pop	{r3, r4, r5, pc}
 8007ef8:	200009ec 	.word	0x200009ec

08007efc <_lseek_r>:
 8007efc:	b538      	push	{r3, r4, r5, lr}
 8007efe:	4d07      	ldr	r5, [pc, #28]	; (8007f1c <_lseek_r+0x20>)
 8007f00:	4604      	mov	r4, r0
 8007f02:	4608      	mov	r0, r1
 8007f04:	4611      	mov	r1, r2
 8007f06:	2200      	movs	r2, #0
 8007f08:	602a      	str	r2, [r5, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	f7fa fd42 	bl	8002994 <_lseek>
 8007f10:	1c43      	adds	r3, r0, #1
 8007f12:	d102      	bne.n	8007f1a <_lseek_r+0x1e>
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	b103      	cbz	r3, 8007f1a <_lseek_r+0x1e>
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	bd38      	pop	{r3, r4, r5, pc}
 8007f1c:	200009ec 	.word	0x200009ec

08007f20 <_read_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4d07      	ldr	r5, [pc, #28]	; (8007f40 <_read_r+0x20>)
 8007f24:	4604      	mov	r4, r0
 8007f26:	4608      	mov	r0, r1
 8007f28:	4611      	mov	r1, r2
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	602a      	str	r2, [r5, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	f7fa fcd0 	bl	80028d4 <_read>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_read_r+0x1e>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_read_r+0x1e>
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	200009ec 	.word	0x200009ec

08007f44 <_write_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	4d07      	ldr	r5, [pc, #28]	; (8007f64 <_write_r+0x20>)
 8007f48:	4604      	mov	r4, r0
 8007f4a:	4608      	mov	r0, r1
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	2200      	movs	r2, #0
 8007f50:	602a      	str	r2, [r5, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	f7fa fcdb 	bl	800290e <_write>
 8007f58:	1c43      	adds	r3, r0, #1
 8007f5a:	d102      	bne.n	8007f62 <_write_r+0x1e>
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	b103      	cbz	r3, 8007f62 <_write_r+0x1e>
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	bd38      	pop	{r3, r4, r5, pc}
 8007f64:	200009ec 	.word	0x200009ec

08007f68 <__errno>:
 8007f68:	4b01      	ldr	r3, [pc, #4]	; (8007f70 <__errno+0x8>)
 8007f6a:	6818      	ldr	r0, [r3, #0]
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	2000006c 	.word	0x2000006c

08007f74 <__libc_init_array>:
 8007f74:	b570      	push	{r4, r5, r6, lr}
 8007f76:	4d0d      	ldr	r5, [pc, #52]	; (8007fac <__libc_init_array+0x38>)
 8007f78:	4c0d      	ldr	r4, [pc, #52]	; (8007fb0 <__libc_init_array+0x3c>)
 8007f7a:	1b64      	subs	r4, r4, r5
 8007f7c:	10a4      	asrs	r4, r4, #2
 8007f7e:	2600      	movs	r6, #0
 8007f80:	42a6      	cmp	r6, r4
 8007f82:	d109      	bne.n	8007f98 <__libc_init_array+0x24>
 8007f84:	4d0b      	ldr	r5, [pc, #44]	; (8007fb4 <__libc_init_array+0x40>)
 8007f86:	4c0c      	ldr	r4, [pc, #48]	; (8007fb8 <__libc_init_array+0x44>)
 8007f88:	f002 f896 	bl	800a0b8 <_init>
 8007f8c:	1b64      	subs	r4, r4, r5
 8007f8e:	10a4      	asrs	r4, r4, #2
 8007f90:	2600      	movs	r6, #0
 8007f92:	42a6      	cmp	r6, r4
 8007f94:	d105      	bne.n	8007fa2 <__libc_init_array+0x2e>
 8007f96:	bd70      	pop	{r4, r5, r6, pc}
 8007f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f9c:	4798      	blx	r3
 8007f9e:	3601      	adds	r6, #1
 8007fa0:	e7ee      	b.n	8007f80 <__libc_init_array+0xc>
 8007fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa6:	4798      	blx	r3
 8007fa8:	3601      	adds	r6, #1
 8007faa:	e7f2      	b.n	8007f92 <__libc_init_array+0x1e>
 8007fac:	0800a4a4 	.word	0x0800a4a4
 8007fb0:	0800a4a4 	.word	0x0800a4a4
 8007fb4:	0800a4a4 	.word	0x0800a4a4
 8007fb8:	0800a4a8 	.word	0x0800a4a8

08007fbc <__retarget_lock_init_recursive>:
 8007fbc:	4770      	bx	lr

08007fbe <__retarget_lock_acquire_recursive>:
 8007fbe:	4770      	bx	lr

08007fc0 <__retarget_lock_release_recursive>:
 8007fc0:	4770      	bx	lr

08007fc2 <quorem>:
 8007fc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc6:	6903      	ldr	r3, [r0, #16]
 8007fc8:	690c      	ldr	r4, [r1, #16]
 8007fca:	42a3      	cmp	r3, r4
 8007fcc:	4607      	mov	r7, r0
 8007fce:	db7e      	blt.n	80080ce <quorem+0x10c>
 8007fd0:	3c01      	subs	r4, #1
 8007fd2:	f101 0814 	add.w	r8, r1, #20
 8007fd6:	f100 0514 	add.w	r5, r0, #20
 8007fda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fde:	9301      	str	r3, [sp, #4]
 8007fe0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007fe4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	429a      	cmp	r2, r3
 8007fec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ff0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ff4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ff8:	d331      	bcc.n	800805e <quorem+0x9c>
 8007ffa:	f04f 0e00 	mov.w	lr, #0
 8007ffe:	4640      	mov	r0, r8
 8008000:	46ac      	mov	ip, r5
 8008002:	46f2      	mov	sl, lr
 8008004:	f850 2b04 	ldr.w	r2, [r0], #4
 8008008:	b293      	uxth	r3, r2
 800800a:	fb06 e303 	mla	r3, r6, r3, lr
 800800e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008012:	0c1a      	lsrs	r2, r3, #16
 8008014:	b29b      	uxth	r3, r3
 8008016:	ebaa 0303 	sub.w	r3, sl, r3
 800801a:	f8dc a000 	ldr.w	sl, [ip]
 800801e:	fa13 f38a 	uxtah	r3, r3, sl
 8008022:	fb06 220e 	mla	r2, r6, lr, r2
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	9b00      	ldr	r3, [sp, #0]
 800802a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800802e:	b292      	uxth	r2, r2
 8008030:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008034:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008038:	f8bd 3000 	ldrh.w	r3, [sp]
 800803c:	4581      	cmp	r9, r0
 800803e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008042:	f84c 3b04 	str.w	r3, [ip], #4
 8008046:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800804a:	d2db      	bcs.n	8008004 <quorem+0x42>
 800804c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008050:	b92b      	cbnz	r3, 800805e <quorem+0x9c>
 8008052:	9b01      	ldr	r3, [sp, #4]
 8008054:	3b04      	subs	r3, #4
 8008056:	429d      	cmp	r5, r3
 8008058:	461a      	mov	r2, r3
 800805a:	d32c      	bcc.n	80080b6 <quorem+0xf4>
 800805c:	613c      	str	r4, [r7, #16]
 800805e:	4638      	mov	r0, r7
 8008060:	f001 f9a8 	bl	80093b4 <__mcmp>
 8008064:	2800      	cmp	r0, #0
 8008066:	db22      	blt.n	80080ae <quorem+0xec>
 8008068:	3601      	adds	r6, #1
 800806a:	4629      	mov	r1, r5
 800806c:	2000      	movs	r0, #0
 800806e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008072:	f8d1 c000 	ldr.w	ip, [r1]
 8008076:	b293      	uxth	r3, r2
 8008078:	1ac3      	subs	r3, r0, r3
 800807a:	0c12      	lsrs	r2, r2, #16
 800807c:	fa13 f38c 	uxtah	r3, r3, ip
 8008080:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008084:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008088:	b29b      	uxth	r3, r3
 800808a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800808e:	45c1      	cmp	r9, r8
 8008090:	f841 3b04 	str.w	r3, [r1], #4
 8008094:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008098:	d2e9      	bcs.n	800806e <quorem+0xac>
 800809a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800809e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080a2:	b922      	cbnz	r2, 80080ae <quorem+0xec>
 80080a4:	3b04      	subs	r3, #4
 80080a6:	429d      	cmp	r5, r3
 80080a8:	461a      	mov	r2, r3
 80080aa:	d30a      	bcc.n	80080c2 <quorem+0x100>
 80080ac:	613c      	str	r4, [r7, #16]
 80080ae:	4630      	mov	r0, r6
 80080b0:	b003      	add	sp, #12
 80080b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b6:	6812      	ldr	r2, [r2, #0]
 80080b8:	3b04      	subs	r3, #4
 80080ba:	2a00      	cmp	r2, #0
 80080bc:	d1ce      	bne.n	800805c <quorem+0x9a>
 80080be:	3c01      	subs	r4, #1
 80080c0:	e7c9      	b.n	8008056 <quorem+0x94>
 80080c2:	6812      	ldr	r2, [r2, #0]
 80080c4:	3b04      	subs	r3, #4
 80080c6:	2a00      	cmp	r2, #0
 80080c8:	d1f0      	bne.n	80080ac <quorem+0xea>
 80080ca:	3c01      	subs	r4, #1
 80080cc:	e7eb      	b.n	80080a6 <quorem+0xe4>
 80080ce:	2000      	movs	r0, #0
 80080d0:	e7ee      	b.n	80080b0 <quorem+0xee>
 80080d2:	0000      	movs	r0, r0
 80080d4:	0000      	movs	r0, r0
	...

080080d8 <_dtoa_r>:
 80080d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080dc:	ed2d 8b04 	vpush	{d8-d9}
 80080e0:	69c5      	ldr	r5, [r0, #28]
 80080e2:	b093      	sub	sp, #76	; 0x4c
 80080e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80080e8:	ec57 6b10 	vmov	r6, r7, d0
 80080ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80080f0:	9107      	str	r1, [sp, #28]
 80080f2:	4604      	mov	r4, r0
 80080f4:	920a      	str	r2, [sp, #40]	; 0x28
 80080f6:	930d      	str	r3, [sp, #52]	; 0x34
 80080f8:	b975      	cbnz	r5, 8008118 <_dtoa_r+0x40>
 80080fa:	2010      	movs	r0, #16
 80080fc:	f000 fe2a 	bl	8008d54 <malloc>
 8008100:	4602      	mov	r2, r0
 8008102:	61e0      	str	r0, [r4, #28]
 8008104:	b920      	cbnz	r0, 8008110 <_dtoa_r+0x38>
 8008106:	4bae      	ldr	r3, [pc, #696]	; (80083c0 <_dtoa_r+0x2e8>)
 8008108:	21ef      	movs	r1, #239	; 0xef
 800810a:	48ae      	ldr	r0, [pc, #696]	; (80083c4 <_dtoa_r+0x2ec>)
 800810c:	f001 fc90 	bl	8009a30 <__assert_func>
 8008110:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008114:	6005      	str	r5, [r0, #0]
 8008116:	60c5      	str	r5, [r0, #12]
 8008118:	69e3      	ldr	r3, [r4, #28]
 800811a:	6819      	ldr	r1, [r3, #0]
 800811c:	b151      	cbz	r1, 8008134 <_dtoa_r+0x5c>
 800811e:	685a      	ldr	r2, [r3, #4]
 8008120:	604a      	str	r2, [r1, #4]
 8008122:	2301      	movs	r3, #1
 8008124:	4093      	lsls	r3, r2
 8008126:	608b      	str	r3, [r1, #8]
 8008128:	4620      	mov	r0, r4
 800812a:	f000 ff07 	bl	8008f3c <_Bfree>
 800812e:	69e3      	ldr	r3, [r4, #28]
 8008130:	2200      	movs	r2, #0
 8008132:	601a      	str	r2, [r3, #0]
 8008134:	1e3b      	subs	r3, r7, #0
 8008136:	bfbb      	ittet	lt
 8008138:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800813c:	9303      	strlt	r3, [sp, #12]
 800813e:	2300      	movge	r3, #0
 8008140:	2201      	movlt	r2, #1
 8008142:	bfac      	ite	ge
 8008144:	f8c8 3000 	strge.w	r3, [r8]
 8008148:	f8c8 2000 	strlt.w	r2, [r8]
 800814c:	4b9e      	ldr	r3, [pc, #632]	; (80083c8 <_dtoa_r+0x2f0>)
 800814e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008152:	ea33 0308 	bics.w	r3, r3, r8
 8008156:	d11b      	bne.n	8008190 <_dtoa_r+0xb8>
 8008158:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800815a:	f242 730f 	movw	r3, #9999	; 0x270f
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008164:	4333      	orrs	r3, r6
 8008166:	f000 8593 	beq.w	8008c90 <_dtoa_r+0xbb8>
 800816a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800816c:	b963      	cbnz	r3, 8008188 <_dtoa_r+0xb0>
 800816e:	4b97      	ldr	r3, [pc, #604]	; (80083cc <_dtoa_r+0x2f4>)
 8008170:	e027      	b.n	80081c2 <_dtoa_r+0xea>
 8008172:	4b97      	ldr	r3, [pc, #604]	; (80083d0 <_dtoa_r+0x2f8>)
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	3308      	adds	r3, #8
 8008178:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	9800      	ldr	r0, [sp, #0]
 800817e:	b013      	add	sp, #76	; 0x4c
 8008180:	ecbd 8b04 	vpop	{d8-d9}
 8008184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008188:	4b90      	ldr	r3, [pc, #576]	; (80083cc <_dtoa_r+0x2f4>)
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	3303      	adds	r3, #3
 800818e:	e7f3      	b.n	8008178 <_dtoa_r+0xa0>
 8008190:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008194:	2200      	movs	r2, #0
 8008196:	ec51 0b17 	vmov	r0, r1, d7
 800819a:	eeb0 8a47 	vmov.f32	s16, s14
 800819e:	eef0 8a67 	vmov.f32	s17, s15
 80081a2:	2300      	movs	r3, #0
 80081a4:	f7f8 fcb0 	bl	8000b08 <__aeabi_dcmpeq>
 80081a8:	4681      	mov	r9, r0
 80081aa:	b160      	cbz	r0, 80081c6 <_dtoa_r+0xee>
 80081ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081ae:	2301      	movs	r3, #1
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 8568 	beq.w	8008c8a <_dtoa_r+0xbb2>
 80081ba:	4b86      	ldr	r3, [pc, #536]	; (80083d4 <_dtoa_r+0x2fc>)
 80081bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081be:	6013      	str	r3, [r2, #0]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	e7da      	b.n	800817c <_dtoa_r+0xa4>
 80081c6:	aa10      	add	r2, sp, #64	; 0x40
 80081c8:	a911      	add	r1, sp, #68	; 0x44
 80081ca:	4620      	mov	r0, r4
 80081cc:	eeb0 0a48 	vmov.f32	s0, s16
 80081d0:	eef0 0a68 	vmov.f32	s1, s17
 80081d4:	f001 f994 	bl	8009500 <__d2b>
 80081d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80081dc:	4682      	mov	sl, r0
 80081de:	2d00      	cmp	r5, #0
 80081e0:	d07f      	beq.n	80082e2 <_dtoa_r+0x20a>
 80081e2:	ee18 3a90 	vmov	r3, s17
 80081e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80081ee:	ec51 0b18 	vmov	r0, r1, d8
 80081f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80081f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80081fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80081fe:	4619      	mov	r1, r3
 8008200:	2200      	movs	r2, #0
 8008202:	4b75      	ldr	r3, [pc, #468]	; (80083d8 <_dtoa_r+0x300>)
 8008204:	f7f8 f860 	bl	80002c8 <__aeabi_dsub>
 8008208:	a367      	add	r3, pc, #412	; (adr r3, 80083a8 <_dtoa_r+0x2d0>)
 800820a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820e:	f7f8 fa13 	bl	8000638 <__aeabi_dmul>
 8008212:	a367      	add	r3, pc, #412	; (adr r3, 80083b0 <_dtoa_r+0x2d8>)
 8008214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008218:	f7f8 f858 	bl	80002cc <__adddf3>
 800821c:	4606      	mov	r6, r0
 800821e:	4628      	mov	r0, r5
 8008220:	460f      	mov	r7, r1
 8008222:	f7f8 f99f 	bl	8000564 <__aeabi_i2d>
 8008226:	a364      	add	r3, pc, #400	; (adr r3, 80083b8 <_dtoa_r+0x2e0>)
 8008228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822c:	f7f8 fa04 	bl	8000638 <__aeabi_dmul>
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	4630      	mov	r0, r6
 8008236:	4639      	mov	r1, r7
 8008238:	f7f8 f848 	bl	80002cc <__adddf3>
 800823c:	4606      	mov	r6, r0
 800823e:	460f      	mov	r7, r1
 8008240:	f7f8 fcaa 	bl	8000b98 <__aeabi_d2iz>
 8008244:	2200      	movs	r2, #0
 8008246:	4683      	mov	fp, r0
 8008248:	2300      	movs	r3, #0
 800824a:	4630      	mov	r0, r6
 800824c:	4639      	mov	r1, r7
 800824e:	f7f8 fc65 	bl	8000b1c <__aeabi_dcmplt>
 8008252:	b148      	cbz	r0, 8008268 <_dtoa_r+0x190>
 8008254:	4658      	mov	r0, fp
 8008256:	f7f8 f985 	bl	8000564 <__aeabi_i2d>
 800825a:	4632      	mov	r2, r6
 800825c:	463b      	mov	r3, r7
 800825e:	f7f8 fc53 	bl	8000b08 <__aeabi_dcmpeq>
 8008262:	b908      	cbnz	r0, 8008268 <_dtoa_r+0x190>
 8008264:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008268:	f1bb 0f16 	cmp.w	fp, #22
 800826c:	d857      	bhi.n	800831e <_dtoa_r+0x246>
 800826e:	4b5b      	ldr	r3, [pc, #364]	; (80083dc <_dtoa_r+0x304>)
 8008270:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008278:	ec51 0b18 	vmov	r0, r1, d8
 800827c:	f7f8 fc4e 	bl	8000b1c <__aeabi_dcmplt>
 8008280:	2800      	cmp	r0, #0
 8008282:	d04e      	beq.n	8008322 <_dtoa_r+0x24a>
 8008284:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008288:	2300      	movs	r3, #0
 800828a:	930c      	str	r3, [sp, #48]	; 0x30
 800828c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800828e:	1b5b      	subs	r3, r3, r5
 8008290:	1e5a      	subs	r2, r3, #1
 8008292:	bf45      	ittet	mi
 8008294:	f1c3 0301 	rsbmi	r3, r3, #1
 8008298:	9305      	strmi	r3, [sp, #20]
 800829a:	2300      	movpl	r3, #0
 800829c:	2300      	movmi	r3, #0
 800829e:	9206      	str	r2, [sp, #24]
 80082a0:	bf54      	ite	pl
 80082a2:	9305      	strpl	r3, [sp, #20]
 80082a4:	9306      	strmi	r3, [sp, #24]
 80082a6:	f1bb 0f00 	cmp.w	fp, #0
 80082aa:	db3c      	blt.n	8008326 <_dtoa_r+0x24e>
 80082ac:	9b06      	ldr	r3, [sp, #24]
 80082ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80082b2:	445b      	add	r3, fp
 80082b4:	9306      	str	r3, [sp, #24]
 80082b6:	2300      	movs	r3, #0
 80082b8:	9308      	str	r3, [sp, #32]
 80082ba:	9b07      	ldr	r3, [sp, #28]
 80082bc:	2b09      	cmp	r3, #9
 80082be:	d868      	bhi.n	8008392 <_dtoa_r+0x2ba>
 80082c0:	2b05      	cmp	r3, #5
 80082c2:	bfc4      	itt	gt
 80082c4:	3b04      	subgt	r3, #4
 80082c6:	9307      	strgt	r3, [sp, #28]
 80082c8:	9b07      	ldr	r3, [sp, #28]
 80082ca:	f1a3 0302 	sub.w	r3, r3, #2
 80082ce:	bfcc      	ite	gt
 80082d0:	2500      	movgt	r5, #0
 80082d2:	2501      	movle	r5, #1
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	f200 8085 	bhi.w	80083e4 <_dtoa_r+0x30c>
 80082da:	e8df f003 	tbb	[pc, r3]
 80082de:	3b2e      	.short	0x3b2e
 80082e0:	5839      	.short	0x5839
 80082e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80082e6:	441d      	add	r5, r3
 80082e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80082ec:	2b20      	cmp	r3, #32
 80082ee:	bfc1      	itttt	gt
 80082f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80082f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80082f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80082fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008300:	bfd6      	itet	le
 8008302:	f1c3 0320 	rsble	r3, r3, #32
 8008306:	ea48 0003 	orrgt.w	r0, r8, r3
 800830a:	fa06 f003 	lslle.w	r0, r6, r3
 800830e:	f7f8 f919 	bl	8000544 <__aeabi_ui2d>
 8008312:	2201      	movs	r2, #1
 8008314:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008318:	3d01      	subs	r5, #1
 800831a:	920e      	str	r2, [sp, #56]	; 0x38
 800831c:	e76f      	b.n	80081fe <_dtoa_r+0x126>
 800831e:	2301      	movs	r3, #1
 8008320:	e7b3      	b.n	800828a <_dtoa_r+0x1b2>
 8008322:	900c      	str	r0, [sp, #48]	; 0x30
 8008324:	e7b2      	b.n	800828c <_dtoa_r+0x1b4>
 8008326:	9b05      	ldr	r3, [sp, #20]
 8008328:	eba3 030b 	sub.w	r3, r3, fp
 800832c:	9305      	str	r3, [sp, #20]
 800832e:	f1cb 0300 	rsb	r3, fp, #0
 8008332:	9308      	str	r3, [sp, #32]
 8008334:	2300      	movs	r3, #0
 8008336:	930b      	str	r3, [sp, #44]	; 0x2c
 8008338:	e7bf      	b.n	80082ba <_dtoa_r+0x1e2>
 800833a:	2300      	movs	r3, #0
 800833c:	9309      	str	r3, [sp, #36]	; 0x24
 800833e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008340:	2b00      	cmp	r3, #0
 8008342:	dc52      	bgt.n	80083ea <_dtoa_r+0x312>
 8008344:	2301      	movs	r3, #1
 8008346:	9301      	str	r3, [sp, #4]
 8008348:	9304      	str	r3, [sp, #16]
 800834a:	461a      	mov	r2, r3
 800834c:	920a      	str	r2, [sp, #40]	; 0x28
 800834e:	e00b      	b.n	8008368 <_dtoa_r+0x290>
 8008350:	2301      	movs	r3, #1
 8008352:	e7f3      	b.n	800833c <_dtoa_r+0x264>
 8008354:	2300      	movs	r3, #0
 8008356:	9309      	str	r3, [sp, #36]	; 0x24
 8008358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800835a:	445b      	add	r3, fp
 800835c:	9301      	str	r3, [sp, #4]
 800835e:	3301      	adds	r3, #1
 8008360:	2b01      	cmp	r3, #1
 8008362:	9304      	str	r3, [sp, #16]
 8008364:	bfb8      	it	lt
 8008366:	2301      	movlt	r3, #1
 8008368:	69e0      	ldr	r0, [r4, #28]
 800836a:	2100      	movs	r1, #0
 800836c:	2204      	movs	r2, #4
 800836e:	f102 0614 	add.w	r6, r2, #20
 8008372:	429e      	cmp	r6, r3
 8008374:	d93d      	bls.n	80083f2 <_dtoa_r+0x31a>
 8008376:	6041      	str	r1, [r0, #4]
 8008378:	4620      	mov	r0, r4
 800837a:	f000 fd9f 	bl	8008ebc <_Balloc>
 800837e:	9000      	str	r0, [sp, #0]
 8008380:	2800      	cmp	r0, #0
 8008382:	d139      	bne.n	80083f8 <_dtoa_r+0x320>
 8008384:	4b16      	ldr	r3, [pc, #88]	; (80083e0 <_dtoa_r+0x308>)
 8008386:	4602      	mov	r2, r0
 8008388:	f240 11af 	movw	r1, #431	; 0x1af
 800838c:	e6bd      	b.n	800810a <_dtoa_r+0x32>
 800838e:	2301      	movs	r3, #1
 8008390:	e7e1      	b.n	8008356 <_dtoa_r+0x27e>
 8008392:	2501      	movs	r5, #1
 8008394:	2300      	movs	r3, #0
 8008396:	9307      	str	r3, [sp, #28]
 8008398:	9509      	str	r5, [sp, #36]	; 0x24
 800839a:	f04f 33ff 	mov.w	r3, #4294967295
 800839e:	9301      	str	r3, [sp, #4]
 80083a0:	9304      	str	r3, [sp, #16]
 80083a2:	2200      	movs	r2, #0
 80083a4:	2312      	movs	r3, #18
 80083a6:	e7d1      	b.n	800834c <_dtoa_r+0x274>
 80083a8:	636f4361 	.word	0x636f4361
 80083ac:	3fd287a7 	.word	0x3fd287a7
 80083b0:	8b60c8b3 	.word	0x8b60c8b3
 80083b4:	3fc68a28 	.word	0x3fc68a28
 80083b8:	509f79fb 	.word	0x509f79fb
 80083bc:	3fd34413 	.word	0x3fd34413
 80083c0:	0800a169 	.word	0x0800a169
 80083c4:	0800a180 	.word	0x0800a180
 80083c8:	7ff00000 	.word	0x7ff00000
 80083cc:	0800a165 	.word	0x0800a165
 80083d0:	0800a15c 	.word	0x0800a15c
 80083d4:	0800a139 	.word	0x0800a139
 80083d8:	3ff80000 	.word	0x3ff80000
 80083dc:	0800a270 	.word	0x0800a270
 80083e0:	0800a1d8 	.word	0x0800a1d8
 80083e4:	2301      	movs	r3, #1
 80083e6:	9309      	str	r3, [sp, #36]	; 0x24
 80083e8:	e7d7      	b.n	800839a <_dtoa_r+0x2c2>
 80083ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ec:	9301      	str	r3, [sp, #4]
 80083ee:	9304      	str	r3, [sp, #16]
 80083f0:	e7ba      	b.n	8008368 <_dtoa_r+0x290>
 80083f2:	3101      	adds	r1, #1
 80083f4:	0052      	lsls	r2, r2, #1
 80083f6:	e7ba      	b.n	800836e <_dtoa_r+0x296>
 80083f8:	69e3      	ldr	r3, [r4, #28]
 80083fa:	9a00      	ldr	r2, [sp, #0]
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	9b04      	ldr	r3, [sp, #16]
 8008400:	2b0e      	cmp	r3, #14
 8008402:	f200 80a8 	bhi.w	8008556 <_dtoa_r+0x47e>
 8008406:	2d00      	cmp	r5, #0
 8008408:	f000 80a5 	beq.w	8008556 <_dtoa_r+0x47e>
 800840c:	f1bb 0f00 	cmp.w	fp, #0
 8008410:	dd38      	ble.n	8008484 <_dtoa_r+0x3ac>
 8008412:	4bc0      	ldr	r3, [pc, #768]	; (8008714 <_dtoa_r+0x63c>)
 8008414:	f00b 020f 	and.w	r2, fp, #15
 8008418:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800841c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008420:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008424:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008428:	d019      	beq.n	800845e <_dtoa_r+0x386>
 800842a:	4bbb      	ldr	r3, [pc, #748]	; (8008718 <_dtoa_r+0x640>)
 800842c:	ec51 0b18 	vmov	r0, r1, d8
 8008430:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008434:	f7f8 fa2a 	bl	800088c <__aeabi_ddiv>
 8008438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800843c:	f008 080f 	and.w	r8, r8, #15
 8008440:	2503      	movs	r5, #3
 8008442:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008718 <_dtoa_r+0x640>
 8008446:	f1b8 0f00 	cmp.w	r8, #0
 800844a:	d10a      	bne.n	8008462 <_dtoa_r+0x38a>
 800844c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008450:	4632      	mov	r2, r6
 8008452:	463b      	mov	r3, r7
 8008454:	f7f8 fa1a 	bl	800088c <__aeabi_ddiv>
 8008458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800845c:	e02b      	b.n	80084b6 <_dtoa_r+0x3de>
 800845e:	2502      	movs	r5, #2
 8008460:	e7ef      	b.n	8008442 <_dtoa_r+0x36a>
 8008462:	f018 0f01 	tst.w	r8, #1
 8008466:	d008      	beq.n	800847a <_dtoa_r+0x3a2>
 8008468:	4630      	mov	r0, r6
 800846a:	4639      	mov	r1, r7
 800846c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008470:	f7f8 f8e2 	bl	8000638 <__aeabi_dmul>
 8008474:	3501      	adds	r5, #1
 8008476:	4606      	mov	r6, r0
 8008478:	460f      	mov	r7, r1
 800847a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800847e:	f109 0908 	add.w	r9, r9, #8
 8008482:	e7e0      	b.n	8008446 <_dtoa_r+0x36e>
 8008484:	f000 809f 	beq.w	80085c6 <_dtoa_r+0x4ee>
 8008488:	f1cb 0600 	rsb	r6, fp, #0
 800848c:	4ba1      	ldr	r3, [pc, #644]	; (8008714 <_dtoa_r+0x63c>)
 800848e:	4fa2      	ldr	r7, [pc, #648]	; (8008718 <_dtoa_r+0x640>)
 8008490:	f006 020f 	and.w	r2, r6, #15
 8008494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	ec51 0b18 	vmov	r0, r1, d8
 80084a0:	f7f8 f8ca 	bl	8000638 <__aeabi_dmul>
 80084a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084a8:	1136      	asrs	r6, r6, #4
 80084aa:	2300      	movs	r3, #0
 80084ac:	2502      	movs	r5, #2
 80084ae:	2e00      	cmp	r6, #0
 80084b0:	d17e      	bne.n	80085b0 <_dtoa_r+0x4d8>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1d0      	bne.n	8008458 <_dtoa_r+0x380>
 80084b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 8084 	beq.w	80085ca <_dtoa_r+0x4f2>
 80084c2:	4b96      	ldr	r3, [pc, #600]	; (800871c <_dtoa_r+0x644>)
 80084c4:	2200      	movs	r2, #0
 80084c6:	4640      	mov	r0, r8
 80084c8:	4649      	mov	r1, r9
 80084ca:	f7f8 fb27 	bl	8000b1c <__aeabi_dcmplt>
 80084ce:	2800      	cmp	r0, #0
 80084d0:	d07b      	beq.n	80085ca <_dtoa_r+0x4f2>
 80084d2:	9b04      	ldr	r3, [sp, #16]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d078      	beq.n	80085ca <_dtoa_r+0x4f2>
 80084d8:	9b01      	ldr	r3, [sp, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	dd39      	ble.n	8008552 <_dtoa_r+0x47a>
 80084de:	4b90      	ldr	r3, [pc, #576]	; (8008720 <_dtoa_r+0x648>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	4640      	mov	r0, r8
 80084e4:	4649      	mov	r1, r9
 80084e6:	f7f8 f8a7 	bl	8000638 <__aeabi_dmul>
 80084ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084ee:	9e01      	ldr	r6, [sp, #4]
 80084f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80084f4:	3501      	adds	r5, #1
 80084f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80084fa:	4628      	mov	r0, r5
 80084fc:	f7f8 f832 	bl	8000564 <__aeabi_i2d>
 8008500:	4642      	mov	r2, r8
 8008502:	464b      	mov	r3, r9
 8008504:	f7f8 f898 	bl	8000638 <__aeabi_dmul>
 8008508:	4b86      	ldr	r3, [pc, #536]	; (8008724 <_dtoa_r+0x64c>)
 800850a:	2200      	movs	r2, #0
 800850c:	f7f7 fede 	bl	80002cc <__adddf3>
 8008510:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008518:	9303      	str	r3, [sp, #12]
 800851a:	2e00      	cmp	r6, #0
 800851c:	d158      	bne.n	80085d0 <_dtoa_r+0x4f8>
 800851e:	4b82      	ldr	r3, [pc, #520]	; (8008728 <_dtoa_r+0x650>)
 8008520:	2200      	movs	r2, #0
 8008522:	4640      	mov	r0, r8
 8008524:	4649      	mov	r1, r9
 8008526:	f7f7 fecf 	bl	80002c8 <__aeabi_dsub>
 800852a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800852e:	4680      	mov	r8, r0
 8008530:	4689      	mov	r9, r1
 8008532:	f7f8 fb11 	bl	8000b58 <__aeabi_dcmpgt>
 8008536:	2800      	cmp	r0, #0
 8008538:	f040 8296 	bne.w	8008a68 <_dtoa_r+0x990>
 800853c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008540:	4640      	mov	r0, r8
 8008542:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008546:	4649      	mov	r1, r9
 8008548:	f7f8 fae8 	bl	8000b1c <__aeabi_dcmplt>
 800854c:	2800      	cmp	r0, #0
 800854e:	f040 8289 	bne.w	8008a64 <_dtoa_r+0x98c>
 8008552:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008556:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008558:	2b00      	cmp	r3, #0
 800855a:	f2c0 814e 	blt.w	80087fa <_dtoa_r+0x722>
 800855e:	f1bb 0f0e 	cmp.w	fp, #14
 8008562:	f300 814a 	bgt.w	80087fa <_dtoa_r+0x722>
 8008566:	4b6b      	ldr	r3, [pc, #428]	; (8008714 <_dtoa_r+0x63c>)
 8008568:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800856c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008572:	2b00      	cmp	r3, #0
 8008574:	f280 80dc 	bge.w	8008730 <_dtoa_r+0x658>
 8008578:	9b04      	ldr	r3, [sp, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	f300 80d8 	bgt.w	8008730 <_dtoa_r+0x658>
 8008580:	f040 826f 	bne.w	8008a62 <_dtoa_r+0x98a>
 8008584:	4b68      	ldr	r3, [pc, #416]	; (8008728 <_dtoa_r+0x650>)
 8008586:	2200      	movs	r2, #0
 8008588:	4640      	mov	r0, r8
 800858a:	4649      	mov	r1, r9
 800858c:	f7f8 f854 	bl	8000638 <__aeabi_dmul>
 8008590:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008594:	f7f8 fad6 	bl	8000b44 <__aeabi_dcmpge>
 8008598:	9e04      	ldr	r6, [sp, #16]
 800859a:	4637      	mov	r7, r6
 800859c:	2800      	cmp	r0, #0
 800859e:	f040 8245 	bne.w	8008a2c <_dtoa_r+0x954>
 80085a2:	9d00      	ldr	r5, [sp, #0]
 80085a4:	2331      	movs	r3, #49	; 0x31
 80085a6:	f805 3b01 	strb.w	r3, [r5], #1
 80085aa:	f10b 0b01 	add.w	fp, fp, #1
 80085ae:	e241      	b.n	8008a34 <_dtoa_r+0x95c>
 80085b0:	07f2      	lsls	r2, r6, #31
 80085b2:	d505      	bpl.n	80085c0 <_dtoa_r+0x4e8>
 80085b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085b8:	f7f8 f83e 	bl	8000638 <__aeabi_dmul>
 80085bc:	3501      	adds	r5, #1
 80085be:	2301      	movs	r3, #1
 80085c0:	1076      	asrs	r6, r6, #1
 80085c2:	3708      	adds	r7, #8
 80085c4:	e773      	b.n	80084ae <_dtoa_r+0x3d6>
 80085c6:	2502      	movs	r5, #2
 80085c8:	e775      	b.n	80084b6 <_dtoa_r+0x3de>
 80085ca:	9e04      	ldr	r6, [sp, #16]
 80085cc:	465f      	mov	r7, fp
 80085ce:	e792      	b.n	80084f6 <_dtoa_r+0x41e>
 80085d0:	9900      	ldr	r1, [sp, #0]
 80085d2:	4b50      	ldr	r3, [pc, #320]	; (8008714 <_dtoa_r+0x63c>)
 80085d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085d8:	4431      	add	r1, r6
 80085da:	9102      	str	r1, [sp, #8]
 80085dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085de:	eeb0 9a47 	vmov.f32	s18, s14
 80085e2:	eef0 9a67 	vmov.f32	s19, s15
 80085e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80085ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085ee:	2900      	cmp	r1, #0
 80085f0:	d044      	beq.n	800867c <_dtoa_r+0x5a4>
 80085f2:	494e      	ldr	r1, [pc, #312]	; (800872c <_dtoa_r+0x654>)
 80085f4:	2000      	movs	r0, #0
 80085f6:	f7f8 f949 	bl	800088c <__aeabi_ddiv>
 80085fa:	ec53 2b19 	vmov	r2, r3, d9
 80085fe:	f7f7 fe63 	bl	80002c8 <__aeabi_dsub>
 8008602:	9d00      	ldr	r5, [sp, #0]
 8008604:	ec41 0b19 	vmov	d9, r0, r1
 8008608:	4649      	mov	r1, r9
 800860a:	4640      	mov	r0, r8
 800860c:	f7f8 fac4 	bl	8000b98 <__aeabi_d2iz>
 8008610:	4606      	mov	r6, r0
 8008612:	f7f7 ffa7 	bl	8000564 <__aeabi_i2d>
 8008616:	4602      	mov	r2, r0
 8008618:	460b      	mov	r3, r1
 800861a:	4640      	mov	r0, r8
 800861c:	4649      	mov	r1, r9
 800861e:	f7f7 fe53 	bl	80002c8 <__aeabi_dsub>
 8008622:	3630      	adds	r6, #48	; 0x30
 8008624:	f805 6b01 	strb.w	r6, [r5], #1
 8008628:	ec53 2b19 	vmov	r2, r3, d9
 800862c:	4680      	mov	r8, r0
 800862e:	4689      	mov	r9, r1
 8008630:	f7f8 fa74 	bl	8000b1c <__aeabi_dcmplt>
 8008634:	2800      	cmp	r0, #0
 8008636:	d164      	bne.n	8008702 <_dtoa_r+0x62a>
 8008638:	4642      	mov	r2, r8
 800863a:	464b      	mov	r3, r9
 800863c:	4937      	ldr	r1, [pc, #220]	; (800871c <_dtoa_r+0x644>)
 800863e:	2000      	movs	r0, #0
 8008640:	f7f7 fe42 	bl	80002c8 <__aeabi_dsub>
 8008644:	ec53 2b19 	vmov	r2, r3, d9
 8008648:	f7f8 fa68 	bl	8000b1c <__aeabi_dcmplt>
 800864c:	2800      	cmp	r0, #0
 800864e:	f040 80b6 	bne.w	80087be <_dtoa_r+0x6e6>
 8008652:	9b02      	ldr	r3, [sp, #8]
 8008654:	429d      	cmp	r5, r3
 8008656:	f43f af7c 	beq.w	8008552 <_dtoa_r+0x47a>
 800865a:	4b31      	ldr	r3, [pc, #196]	; (8008720 <_dtoa_r+0x648>)
 800865c:	ec51 0b19 	vmov	r0, r1, d9
 8008660:	2200      	movs	r2, #0
 8008662:	f7f7 ffe9 	bl	8000638 <__aeabi_dmul>
 8008666:	4b2e      	ldr	r3, [pc, #184]	; (8008720 <_dtoa_r+0x648>)
 8008668:	ec41 0b19 	vmov	d9, r0, r1
 800866c:	2200      	movs	r2, #0
 800866e:	4640      	mov	r0, r8
 8008670:	4649      	mov	r1, r9
 8008672:	f7f7 ffe1 	bl	8000638 <__aeabi_dmul>
 8008676:	4680      	mov	r8, r0
 8008678:	4689      	mov	r9, r1
 800867a:	e7c5      	b.n	8008608 <_dtoa_r+0x530>
 800867c:	ec51 0b17 	vmov	r0, r1, d7
 8008680:	f7f7 ffda 	bl	8000638 <__aeabi_dmul>
 8008684:	9b02      	ldr	r3, [sp, #8]
 8008686:	9d00      	ldr	r5, [sp, #0]
 8008688:	930f      	str	r3, [sp, #60]	; 0x3c
 800868a:	ec41 0b19 	vmov	d9, r0, r1
 800868e:	4649      	mov	r1, r9
 8008690:	4640      	mov	r0, r8
 8008692:	f7f8 fa81 	bl	8000b98 <__aeabi_d2iz>
 8008696:	4606      	mov	r6, r0
 8008698:	f7f7 ff64 	bl	8000564 <__aeabi_i2d>
 800869c:	3630      	adds	r6, #48	; 0x30
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	4640      	mov	r0, r8
 80086a4:	4649      	mov	r1, r9
 80086a6:	f7f7 fe0f 	bl	80002c8 <__aeabi_dsub>
 80086aa:	f805 6b01 	strb.w	r6, [r5], #1
 80086ae:	9b02      	ldr	r3, [sp, #8]
 80086b0:	429d      	cmp	r5, r3
 80086b2:	4680      	mov	r8, r0
 80086b4:	4689      	mov	r9, r1
 80086b6:	f04f 0200 	mov.w	r2, #0
 80086ba:	d124      	bne.n	8008706 <_dtoa_r+0x62e>
 80086bc:	4b1b      	ldr	r3, [pc, #108]	; (800872c <_dtoa_r+0x654>)
 80086be:	ec51 0b19 	vmov	r0, r1, d9
 80086c2:	f7f7 fe03 	bl	80002cc <__adddf3>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	4640      	mov	r0, r8
 80086cc:	4649      	mov	r1, r9
 80086ce:	f7f8 fa43 	bl	8000b58 <__aeabi_dcmpgt>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d173      	bne.n	80087be <_dtoa_r+0x6e6>
 80086d6:	ec53 2b19 	vmov	r2, r3, d9
 80086da:	4914      	ldr	r1, [pc, #80]	; (800872c <_dtoa_r+0x654>)
 80086dc:	2000      	movs	r0, #0
 80086de:	f7f7 fdf3 	bl	80002c8 <__aeabi_dsub>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4640      	mov	r0, r8
 80086e8:	4649      	mov	r1, r9
 80086ea:	f7f8 fa17 	bl	8000b1c <__aeabi_dcmplt>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	f43f af2f 	beq.w	8008552 <_dtoa_r+0x47a>
 80086f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80086f6:	1e6b      	subs	r3, r5, #1
 80086f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80086fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80086fe:	2b30      	cmp	r3, #48	; 0x30
 8008700:	d0f8      	beq.n	80086f4 <_dtoa_r+0x61c>
 8008702:	46bb      	mov	fp, r7
 8008704:	e04a      	b.n	800879c <_dtoa_r+0x6c4>
 8008706:	4b06      	ldr	r3, [pc, #24]	; (8008720 <_dtoa_r+0x648>)
 8008708:	f7f7 ff96 	bl	8000638 <__aeabi_dmul>
 800870c:	4680      	mov	r8, r0
 800870e:	4689      	mov	r9, r1
 8008710:	e7bd      	b.n	800868e <_dtoa_r+0x5b6>
 8008712:	bf00      	nop
 8008714:	0800a270 	.word	0x0800a270
 8008718:	0800a248 	.word	0x0800a248
 800871c:	3ff00000 	.word	0x3ff00000
 8008720:	40240000 	.word	0x40240000
 8008724:	401c0000 	.word	0x401c0000
 8008728:	40140000 	.word	0x40140000
 800872c:	3fe00000 	.word	0x3fe00000
 8008730:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008734:	9d00      	ldr	r5, [sp, #0]
 8008736:	4642      	mov	r2, r8
 8008738:	464b      	mov	r3, r9
 800873a:	4630      	mov	r0, r6
 800873c:	4639      	mov	r1, r7
 800873e:	f7f8 f8a5 	bl	800088c <__aeabi_ddiv>
 8008742:	f7f8 fa29 	bl	8000b98 <__aeabi_d2iz>
 8008746:	9001      	str	r0, [sp, #4]
 8008748:	f7f7 ff0c 	bl	8000564 <__aeabi_i2d>
 800874c:	4642      	mov	r2, r8
 800874e:	464b      	mov	r3, r9
 8008750:	f7f7 ff72 	bl	8000638 <__aeabi_dmul>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	4630      	mov	r0, r6
 800875a:	4639      	mov	r1, r7
 800875c:	f7f7 fdb4 	bl	80002c8 <__aeabi_dsub>
 8008760:	9e01      	ldr	r6, [sp, #4]
 8008762:	9f04      	ldr	r7, [sp, #16]
 8008764:	3630      	adds	r6, #48	; 0x30
 8008766:	f805 6b01 	strb.w	r6, [r5], #1
 800876a:	9e00      	ldr	r6, [sp, #0]
 800876c:	1bae      	subs	r6, r5, r6
 800876e:	42b7      	cmp	r7, r6
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	d134      	bne.n	80087e0 <_dtoa_r+0x708>
 8008776:	f7f7 fda9 	bl	80002cc <__adddf3>
 800877a:	4642      	mov	r2, r8
 800877c:	464b      	mov	r3, r9
 800877e:	4606      	mov	r6, r0
 8008780:	460f      	mov	r7, r1
 8008782:	f7f8 f9e9 	bl	8000b58 <__aeabi_dcmpgt>
 8008786:	b9c8      	cbnz	r0, 80087bc <_dtoa_r+0x6e4>
 8008788:	4642      	mov	r2, r8
 800878a:	464b      	mov	r3, r9
 800878c:	4630      	mov	r0, r6
 800878e:	4639      	mov	r1, r7
 8008790:	f7f8 f9ba 	bl	8000b08 <__aeabi_dcmpeq>
 8008794:	b110      	cbz	r0, 800879c <_dtoa_r+0x6c4>
 8008796:	9b01      	ldr	r3, [sp, #4]
 8008798:	07db      	lsls	r3, r3, #31
 800879a:	d40f      	bmi.n	80087bc <_dtoa_r+0x6e4>
 800879c:	4651      	mov	r1, sl
 800879e:	4620      	mov	r0, r4
 80087a0:	f000 fbcc 	bl	8008f3c <_Bfree>
 80087a4:	2300      	movs	r3, #0
 80087a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087a8:	702b      	strb	r3, [r5, #0]
 80087aa:	f10b 0301 	add.w	r3, fp, #1
 80087ae:	6013      	str	r3, [r2, #0]
 80087b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f43f ace2 	beq.w	800817c <_dtoa_r+0xa4>
 80087b8:	601d      	str	r5, [r3, #0]
 80087ba:	e4df      	b.n	800817c <_dtoa_r+0xa4>
 80087bc:	465f      	mov	r7, fp
 80087be:	462b      	mov	r3, r5
 80087c0:	461d      	mov	r5, r3
 80087c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087c6:	2a39      	cmp	r2, #57	; 0x39
 80087c8:	d106      	bne.n	80087d8 <_dtoa_r+0x700>
 80087ca:	9a00      	ldr	r2, [sp, #0]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d1f7      	bne.n	80087c0 <_dtoa_r+0x6e8>
 80087d0:	9900      	ldr	r1, [sp, #0]
 80087d2:	2230      	movs	r2, #48	; 0x30
 80087d4:	3701      	adds	r7, #1
 80087d6:	700a      	strb	r2, [r1, #0]
 80087d8:	781a      	ldrb	r2, [r3, #0]
 80087da:	3201      	adds	r2, #1
 80087dc:	701a      	strb	r2, [r3, #0]
 80087de:	e790      	b.n	8008702 <_dtoa_r+0x62a>
 80087e0:	4ba3      	ldr	r3, [pc, #652]	; (8008a70 <_dtoa_r+0x998>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	f7f7 ff28 	bl	8000638 <__aeabi_dmul>
 80087e8:	2200      	movs	r2, #0
 80087ea:	2300      	movs	r3, #0
 80087ec:	4606      	mov	r6, r0
 80087ee:	460f      	mov	r7, r1
 80087f0:	f7f8 f98a 	bl	8000b08 <__aeabi_dcmpeq>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d09e      	beq.n	8008736 <_dtoa_r+0x65e>
 80087f8:	e7d0      	b.n	800879c <_dtoa_r+0x6c4>
 80087fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087fc:	2a00      	cmp	r2, #0
 80087fe:	f000 80ca 	beq.w	8008996 <_dtoa_r+0x8be>
 8008802:	9a07      	ldr	r2, [sp, #28]
 8008804:	2a01      	cmp	r2, #1
 8008806:	f300 80ad 	bgt.w	8008964 <_dtoa_r+0x88c>
 800880a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800880c:	2a00      	cmp	r2, #0
 800880e:	f000 80a5 	beq.w	800895c <_dtoa_r+0x884>
 8008812:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008816:	9e08      	ldr	r6, [sp, #32]
 8008818:	9d05      	ldr	r5, [sp, #20]
 800881a:	9a05      	ldr	r2, [sp, #20]
 800881c:	441a      	add	r2, r3
 800881e:	9205      	str	r2, [sp, #20]
 8008820:	9a06      	ldr	r2, [sp, #24]
 8008822:	2101      	movs	r1, #1
 8008824:	441a      	add	r2, r3
 8008826:	4620      	mov	r0, r4
 8008828:	9206      	str	r2, [sp, #24]
 800882a:	f000 fc3d 	bl	80090a8 <__i2b>
 800882e:	4607      	mov	r7, r0
 8008830:	b165      	cbz	r5, 800884c <_dtoa_r+0x774>
 8008832:	9b06      	ldr	r3, [sp, #24]
 8008834:	2b00      	cmp	r3, #0
 8008836:	dd09      	ble.n	800884c <_dtoa_r+0x774>
 8008838:	42ab      	cmp	r3, r5
 800883a:	9a05      	ldr	r2, [sp, #20]
 800883c:	bfa8      	it	ge
 800883e:	462b      	movge	r3, r5
 8008840:	1ad2      	subs	r2, r2, r3
 8008842:	9205      	str	r2, [sp, #20]
 8008844:	9a06      	ldr	r2, [sp, #24]
 8008846:	1aed      	subs	r5, r5, r3
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	9306      	str	r3, [sp, #24]
 800884c:	9b08      	ldr	r3, [sp, #32]
 800884e:	b1f3      	cbz	r3, 800888e <_dtoa_r+0x7b6>
 8008850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 80a3 	beq.w	800899e <_dtoa_r+0x8c6>
 8008858:	2e00      	cmp	r6, #0
 800885a:	dd10      	ble.n	800887e <_dtoa_r+0x7a6>
 800885c:	4639      	mov	r1, r7
 800885e:	4632      	mov	r2, r6
 8008860:	4620      	mov	r0, r4
 8008862:	f000 fce1 	bl	8009228 <__pow5mult>
 8008866:	4652      	mov	r2, sl
 8008868:	4601      	mov	r1, r0
 800886a:	4607      	mov	r7, r0
 800886c:	4620      	mov	r0, r4
 800886e:	f000 fc31 	bl	80090d4 <__multiply>
 8008872:	4651      	mov	r1, sl
 8008874:	4680      	mov	r8, r0
 8008876:	4620      	mov	r0, r4
 8008878:	f000 fb60 	bl	8008f3c <_Bfree>
 800887c:	46c2      	mov	sl, r8
 800887e:	9b08      	ldr	r3, [sp, #32]
 8008880:	1b9a      	subs	r2, r3, r6
 8008882:	d004      	beq.n	800888e <_dtoa_r+0x7b6>
 8008884:	4651      	mov	r1, sl
 8008886:	4620      	mov	r0, r4
 8008888:	f000 fcce 	bl	8009228 <__pow5mult>
 800888c:	4682      	mov	sl, r0
 800888e:	2101      	movs	r1, #1
 8008890:	4620      	mov	r0, r4
 8008892:	f000 fc09 	bl	80090a8 <__i2b>
 8008896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008898:	2b00      	cmp	r3, #0
 800889a:	4606      	mov	r6, r0
 800889c:	f340 8081 	ble.w	80089a2 <_dtoa_r+0x8ca>
 80088a0:	461a      	mov	r2, r3
 80088a2:	4601      	mov	r1, r0
 80088a4:	4620      	mov	r0, r4
 80088a6:	f000 fcbf 	bl	8009228 <__pow5mult>
 80088aa:	9b07      	ldr	r3, [sp, #28]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	4606      	mov	r6, r0
 80088b0:	dd7a      	ble.n	80089a8 <_dtoa_r+0x8d0>
 80088b2:	f04f 0800 	mov.w	r8, #0
 80088b6:	6933      	ldr	r3, [r6, #16]
 80088b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80088bc:	6918      	ldr	r0, [r3, #16]
 80088be:	f000 fba5 	bl	800900c <__hi0bits>
 80088c2:	f1c0 0020 	rsb	r0, r0, #32
 80088c6:	9b06      	ldr	r3, [sp, #24]
 80088c8:	4418      	add	r0, r3
 80088ca:	f010 001f 	ands.w	r0, r0, #31
 80088ce:	f000 8094 	beq.w	80089fa <_dtoa_r+0x922>
 80088d2:	f1c0 0320 	rsb	r3, r0, #32
 80088d6:	2b04      	cmp	r3, #4
 80088d8:	f340 8085 	ble.w	80089e6 <_dtoa_r+0x90e>
 80088dc:	9b05      	ldr	r3, [sp, #20]
 80088de:	f1c0 001c 	rsb	r0, r0, #28
 80088e2:	4403      	add	r3, r0
 80088e4:	9305      	str	r3, [sp, #20]
 80088e6:	9b06      	ldr	r3, [sp, #24]
 80088e8:	4403      	add	r3, r0
 80088ea:	4405      	add	r5, r0
 80088ec:	9306      	str	r3, [sp, #24]
 80088ee:	9b05      	ldr	r3, [sp, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	dd05      	ble.n	8008900 <_dtoa_r+0x828>
 80088f4:	4651      	mov	r1, sl
 80088f6:	461a      	mov	r2, r3
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 fcef 	bl	80092dc <__lshift>
 80088fe:	4682      	mov	sl, r0
 8008900:	9b06      	ldr	r3, [sp, #24]
 8008902:	2b00      	cmp	r3, #0
 8008904:	dd05      	ble.n	8008912 <_dtoa_r+0x83a>
 8008906:	4631      	mov	r1, r6
 8008908:	461a      	mov	r2, r3
 800890a:	4620      	mov	r0, r4
 800890c:	f000 fce6 	bl	80092dc <__lshift>
 8008910:	4606      	mov	r6, r0
 8008912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008914:	2b00      	cmp	r3, #0
 8008916:	d072      	beq.n	80089fe <_dtoa_r+0x926>
 8008918:	4631      	mov	r1, r6
 800891a:	4650      	mov	r0, sl
 800891c:	f000 fd4a 	bl	80093b4 <__mcmp>
 8008920:	2800      	cmp	r0, #0
 8008922:	da6c      	bge.n	80089fe <_dtoa_r+0x926>
 8008924:	2300      	movs	r3, #0
 8008926:	4651      	mov	r1, sl
 8008928:	220a      	movs	r2, #10
 800892a:	4620      	mov	r0, r4
 800892c:	f000 fb28 	bl	8008f80 <__multadd>
 8008930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008932:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008936:	4682      	mov	sl, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 81b0 	beq.w	8008c9e <_dtoa_r+0xbc6>
 800893e:	2300      	movs	r3, #0
 8008940:	4639      	mov	r1, r7
 8008942:	220a      	movs	r2, #10
 8008944:	4620      	mov	r0, r4
 8008946:	f000 fb1b 	bl	8008f80 <__multadd>
 800894a:	9b01      	ldr	r3, [sp, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	4607      	mov	r7, r0
 8008950:	f300 8096 	bgt.w	8008a80 <_dtoa_r+0x9a8>
 8008954:	9b07      	ldr	r3, [sp, #28]
 8008956:	2b02      	cmp	r3, #2
 8008958:	dc59      	bgt.n	8008a0e <_dtoa_r+0x936>
 800895a:	e091      	b.n	8008a80 <_dtoa_r+0x9a8>
 800895c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800895e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008962:	e758      	b.n	8008816 <_dtoa_r+0x73e>
 8008964:	9b04      	ldr	r3, [sp, #16]
 8008966:	1e5e      	subs	r6, r3, #1
 8008968:	9b08      	ldr	r3, [sp, #32]
 800896a:	42b3      	cmp	r3, r6
 800896c:	bfbf      	itttt	lt
 800896e:	9b08      	ldrlt	r3, [sp, #32]
 8008970:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008972:	9608      	strlt	r6, [sp, #32]
 8008974:	1af3      	sublt	r3, r6, r3
 8008976:	bfb4      	ite	lt
 8008978:	18d2      	addlt	r2, r2, r3
 800897a:	1b9e      	subge	r6, r3, r6
 800897c:	9b04      	ldr	r3, [sp, #16]
 800897e:	bfbc      	itt	lt
 8008980:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008982:	2600      	movlt	r6, #0
 8008984:	2b00      	cmp	r3, #0
 8008986:	bfb7      	itett	lt
 8008988:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800898c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008990:	1a9d      	sublt	r5, r3, r2
 8008992:	2300      	movlt	r3, #0
 8008994:	e741      	b.n	800881a <_dtoa_r+0x742>
 8008996:	9e08      	ldr	r6, [sp, #32]
 8008998:	9d05      	ldr	r5, [sp, #20]
 800899a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800899c:	e748      	b.n	8008830 <_dtoa_r+0x758>
 800899e:	9a08      	ldr	r2, [sp, #32]
 80089a0:	e770      	b.n	8008884 <_dtoa_r+0x7ac>
 80089a2:	9b07      	ldr	r3, [sp, #28]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	dc19      	bgt.n	80089dc <_dtoa_r+0x904>
 80089a8:	9b02      	ldr	r3, [sp, #8]
 80089aa:	b9bb      	cbnz	r3, 80089dc <_dtoa_r+0x904>
 80089ac:	9b03      	ldr	r3, [sp, #12]
 80089ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089b2:	b99b      	cbnz	r3, 80089dc <_dtoa_r+0x904>
 80089b4:	9b03      	ldr	r3, [sp, #12]
 80089b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089ba:	0d1b      	lsrs	r3, r3, #20
 80089bc:	051b      	lsls	r3, r3, #20
 80089be:	b183      	cbz	r3, 80089e2 <_dtoa_r+0x90a>
 80089c0:	9b05      	ldr	r3, [sp, #20]
 80089c2:	3301      	adds	r3, #1
 80089c4:	9305      	str	r3, [sp, #20]
 80089c6:	9b06      	ldr	r3, [sp, #24]
 80089c8:	3301      	adds	r3, #1
 80089ca:	9306      	str	r3, [sp, #24]
 80089cc:	f04f 0801 	mov.w	r8, #1
 80089d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f47f af6f 	bne.w	80088b6 <_dtoa_r+0x7de>
 80089d8:	2001      	movs	r0, #1
 80089da:	e774      	b.n	80088c6 <_dtoa_r+0x7ee>
 80089dc:	f04f 0800 	mov.w	r8, #0
 80089e0:	e7f6      	b.n	80089d0 <_dtoa_r+0x8f8>
 80089e2:	4698      	mov	r8, r3
 80089e4:	e7f4      	b.n	80089d0 <_dtoa_r+0x8f8>
 80089e6:	d082      	beq.n	80088ee <_dtoa_r+0x816>
 80089e8:	9a05      	ldr	r2, [sp, #20]
 80089ea:	331c      	adds	r3, #28
 80089ec:	441a      	add	r2, r3
 80089ee:	9205      	str	r2, [sp, #20]
 80089f0:	9a06      	ldr	r2, [sp, #24]
 80089f2:	441a      	add	r2, r3
 80089f4:	441d      	add	r5, r3
 80089f6:	9206      	str	r2, [sp, #24]
 80089f8:	e779      	b.n	80088ee <_dtoa_r+0x816>
 80089fa:	4603      	mov	r3, r0
 80089fc:	e7f4      	b.n	80089e8 <_dtoa_r+0x910>
 80089fe:	9b04      	ldr	r3, [sp, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	dc37      	bgt.n	8008a74 <_dtoa_r+0x99c>
 8008a04:	9b07      	ldr	r3, [sp, #28]
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	dd34      	ble.n	8008a74 <_dtoa_r+0x99c>
 8008a0a:	9b04      	ldr	r3, [sp, #16]
 8008a0c:	9301      	str	r3, [sp, #4]
 8008a0e:	9b01      	ldr	r3, [sp, #4]
 8008a10:	b963      	cbnz	r3, 8008a2c <_dtoa_r+0x954>
 8008a12:	4631      	mov	r1, r6
 8008a14:	2205      	movs	r2, #5
 8008a16:	4620      	mov	r0, r4
 8008a18:	f000 fab2 	bl	8008f80 <__multadd>
 8008a1c:	4601      	mov	r1, r0
 8008a1e:	4606      	mov	r6, r0
 8008a20:	4650      	mov	r0, sl
 8008a22:	f000 fcc7 	bl	80093b4 <__mcmp>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	f73f adbb 	bgt.w	80085a2 <_dtoa_r+0x4ca>
 8008a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a2e:	9d00      	ldr	r5, [sp, #0]
 8008a30:	ea6f 0b03 	mvn.w	fp, r3
 8008a34:	f04f 0800 	mov.w	r8, #0
 8008a38:	4631      	mov	r1, r6
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f000 fa7e 	bl	8008f3c <_Bfree>
 8008a40:	2f00      	cmp	r7, #0
 8008a42:	f43f aeab 	beq.w	800879c <_dtoa_r+0x6c4>
 8008a46:	f1b8 0f00 	cmp.w	r8, #0
 8008a4a:	d005      	beq.n	8008a58 <_dtoa_r+0x980>
 8008a4c:	45b8      	cmp	r8, r7
 8008a4e:	d003      	beq.n	8008a58 <_dtoa_r+0x980>
 8008a50:	4641      	mov	r1, r8
 8008a52:	4620      	mov	r0, r4
 8008a54:	f000 fa72 	bl	8008f3c <_Bfree>
 8008a58:	4639      	mov	r1, r7
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 fa6e 	bl	8008f3c <_Bfree>
 8008a60:	e69c      	b.n	800879c <_dtoa_r+0x6c4>
 8008a62:	2600      	movs	r6, #0
 8008a64:	4637      	mov	r7, r6
 8008a66:	e7e1      	b.n	8008a2c <_dtoa_r+0x954>
 8008a68:	46bb      	mov	fp, r7
 8008a6a:	4637      	mov	r7, r6
 8008a6c:	e599      	b.n	80085a2 <_dtoa_r+0x4ca>
 8008a6e:	bf00      	nop
 8008a70:	40240000 	.word	0x40240000
 8008a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 80c8 	beq.w	8008c0c <_dtoa_r+0xb34>
 8008a7c:	9b04      	ldr	r3, [sp, #16]
 8008a7e:	9301      	str	r3, [sp, #4]
 8008a80:	2d00      	cmp	r5, #0
 8008a82:	dd05      	ble.n	8008a90 <_dtoa_r+0x9b8>
 8008a84:	4639      	mov	r1, r7
 8008a86:	462a      	mov	r2, r5
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f000 fc27 	bl	80092dc <__lshift>
 8008a8e:	4607      	mov	r7, r0
 8008a90:	f1b8 0f00 	cmp.w	r8, #0
 8008a94:	d05b      	beq.n	8008b4e <_dtoa_r+0xa76>
 8008a96:	6879      	ldr	r1, [r7, #4]
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f000 fa0f 	bl	8008ebc <_Balloc>
 8008a9e:	4605      	mov	r5, r0
 8008aa0:	b928      	cbnz	r0, 8008aae <_dtoa_r+0x9d6>
 8008aa2:	4b83      	ldr	r3, [pc, #524]	; (8008cb0 <_dtoa_r+0xbd8>)
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008aaa:	f7ff bb2e 	b.w	800810a <_dtoa_r+0x32>
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	3202      	adds	r2, #2
 8008ab2:	0092      	lsls	r2, r2, #2
 8008ab4:	f107 010c 	add.w	r1, r7, #12
 8008ab8:	300c      	adds	r0, #12
 8008aba:	f000 ffab 	bl	8009a14 <memcpy>
 8008abe:	2201      	movs	r2, #1
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f000 fc0a 	bl	80092dc <__lshift>
 8008ac8:	9b00      	ldr	r3, [sp, #0]
 8008aca:	3301      	adds	r3, #1
 8008acc:	9304      	str	r3, [sp, #16]
 8008ace:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	9308      	str	r3, [sp, #32]
 8008ad6:	9b02      	ldr	r3, [sp, #8]
 8008ad8:	f003 0301 	and.w	r3, r3, #1
 8008adc:	46b8      	mov	r8, r7
 8008ade:	9306      	str	r3, [sp, #24]
 8008ae0:	4607      	mov	r7, r0
 8008ae2:	9b04      	ldr	r3, [sp, #16]
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	4650      	mov	r0, sl
 8008aea:	9301      	str	r3, [sp, #4]
 8008aec:	f7ff fa69 	bl	8007fc2 <quorem>
 8008af0:	4641      	mov	r1, r8
 8008af2:	9002      	str	r0, [sp, #8]
 8008af4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008af8:	4650      	mov	r0, sl
 8008afa:	f000 fc5b 	bl	80093b4 <__mcmp>
 8008afe:	463a      	mov	r2, r7
 8008b00:	9005      	str	r0, [sp, #20]
 8008b02:	4631      	mov	r1, r6
 8008b04:	4620      	mov	r0, r4
 8008b06:	f000 fc71 	bl	80093ec <__mdiff>
 8008b0a:	68c2      	ldr	r2, [r0, #12]
 8008b0c:	4605      	mov	r5, r0
 8008b0e:	bb02      	cbnz	r2, 8008b52 <_dtoa_r+0xa7a>
 8008b10:	4601      	mov	r1, r0
 8008b12:	4650      	mov	r0, sl
 8008b14:	f000 fc4e 	bl	80093b4 <__mcmp>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	4629      	mov	r1, r5
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	9209      	str	r2, [sp, #36]	; 0x24
 8008b20:	f000 fa0c 	bl	8008f3c <_Bfree>
 8008b24:	9b07      	ldr	r3, [sp, #28]
 8008b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b28:	9d04      	ldr	r5, [sp, #16]
 8008b2a:	ea43 0102 	orr.w	r1, r3, r2
 8008b2e:	9b06      	ldr	r3, [sp, #24]
 8008b30:	4319      	orrs	r1, r3
 8008b32:	d110      	bne.n	8008b56 <_dtoa_r+0xa7e>
 8008b34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b38:	d029      	beq.n	8008b8e <_dtoa_r+0xab6>
 8008b3a:	9b05      	ldr	r3, [sp, #20]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	dd02      	ble.n	8008b46 <_dtoa_r+0xa6e>
 8008b40:	9b02      	ldr	r3, [sp, #8]
 8008b42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008b46:	9b01      	ldr	r3, [sp, #4]
 8008b48:	f883 9000 	strb.w	r9, [r3]
 8008b4c:	e774      	b.n	8008a38 <_dtoa_r+0x960>
 8008b4e:	4638      	mov	r0, r7
 8008b50:	e7ba      	b.n	8008ac8 <_dtoa_r+0x9f0>
 8008b52:	2201      	movs	r2, #1
 8008b54:	e7e1      	b.n	8008b1a <_dtoa_r+0xa42>
 8008b56:	9b05      	ldr	r3, [sp, #20]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	db04      	blt.n	8008b66 <_dtoa_r+0xa8e>
 8008b5c:	9907      	ldr	r1, [sp, #28]
 8008b5e:	430b      	orrs	r3, r1
 8008b60:	9906      	ldr	r1, [sp, #24]
 8008b62:	430b      	orrs	r3, r1
 8008b64:	d120      	bne.n	8008ba8 <_dtoa_r+0xad0>
 8008b66:	2a00      	cmp	r2, #0
 8008b68:	dded      	ble.n	8008b46 <_dtoa_r+0xa6e>
 8008b6a:	4651      	mov	r1, sl
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f000 fbb4 	bl	80092dc <__lshift>
 8008b74:	4631      	mov	r1, r6
 8008b76:	4682      	mov	sl, r0
 8008b78:	f000 fc1c 	bl	80093b4 <__mcmp>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	dc03      	bgt.n	8008b88 <_dtoa_r+0xab0>
 8008b80:	d1e1      	bne.n	8008b46 <_dtoa_r+0xa6e>
 8008b82:	f019 0f01 	tst.w	r9, #1
 8008b86:	d0de      	beq.n	8008b46 <_dtoa_r+0xa6e>
 8008b88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b8c:	d1d8      	bne.n	8008b40 <_dtoa_r+0xa68>
 8008b8e:	9a01      	ldr	r2, [sp, #4]
 8008b90:	2339      	movs	r3, #57	; 0x39
 8008b92:	7013      	strb	r3, [r2, #0]
 8008b94:	462b      	mov	r3, r5
 8008b96:	461d      	mov	r5, r3
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008b9e:	2a39      	cmp	r2, #57	; 0x39
 8008ba0:	d06c      	beq.n	8008c7c <_dtoa_r+0xba4>
 8008ba2:	3201      	adds	r2, #1
 8008ba4:	701a      	strb	r2, [r3, #0]
 8008ba6:	e747      	b.n	8008a38 <_dtoa_r+0x960>
 8008ba8:	2a00      	cmp	r2, #0
 8008baa:	dd07      	ble.n	8008bbc <_dtoa_r+0xae4>
 8008bac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008bb0:	d0ed      	beq.n	8008b8e <_dtoa_r+0xab6>
 8008bb2:	9a01      	ldr	r2, [sp, #4]
 8008bb4:	f109 0301 	add.w	r3, r9, #1
 8008bb8:	7013      	strb	r3, [r2, #0]
 8008bba:	e73d      	b.n	8008a38 <_dtoa_r+0x960>
 8008bbc:	9b04      	ldr	r3, [sp, #16]
 8008bbe:	9a08      	ldr	r2, [sp, #32]
 8008bc0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d043      	beq.n	8008c50 <_dtoa_r+0xb78>
 8008bc8:	4651      	mov	r1, sl
 8008bca:	2300      	movs	r3, #0
 8008bcc:	220a      	movs	r2, #10
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f000 f9d6 	bl	8008f80 <__multadd>
 8008bd4:	45b8      	cmp	r8, r7
 8008bd6:	4682      	mov	sl, r0
 8008bd8:	f04f 0300 	mov.w	r3, #0
 8008bdc:	f04f 020a 	mov.w	r2, #10
 8008be0:	4641      	mov	r1, r8
 8008be2:	4620      	mov	r0, r4
 8008be4:	d107      	bne.n	8008bf6 <_dtoa_r+0xb1e>
 8008be6:	f000 f9cb 	bl	8008f80 <__multadd>
 8008bea:	4680      	mov	r8, r0
 8008bec:	4607      	mov	r7, r0
 8008bee:	9b04      	ldr	r3, [sp, #16]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	9304      	str	r3, [sp, #16]
 8008bf4:	e775      	b.n	8008ae2 <_dtoa_r+0xa0a>
 8008bf6:	f000 f9c3 	bl	8008f80 <__multadd>
 8008bfa:	4639      	mov	r1, r7
 8008bfc:	4680      	mov	r8, r0
 8008bfe:	2300      	movs	r3, #0
 8008c00:	220a      	movs	r2, #10
 8008c02:	4620      	mov	r0, r4
 8008c04:	f000 f9bc 	bl	8008f80 <__multadd>
 8008c08:	4607      	mov	r7, r0
 8008c0a:	e7f0      	b.n	8008bee <_dtoa_r+0xb16>
 8008c0c:	9b04      	ldr	r3, [sp, #16]
 8008c0e:	9301      	str	r3, [sp, #4]
 8008c10:	9d00      	ldr	r5, [sp, #0]
 8008c12:	4631      	mov	r1, r6
 8008c14:	4650      	mov	r0, sl
 8008c16:	f7ff f9d4 	bl	8007fc2 <quorem>
 8008c1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008c1e:	9b00      	ldr	r3, [sp, #0]
 8008c20:	f805 9b01 	strb.w	r9, [r5], #1
 8008c24:	1aea      	subs	r2, r5, r3
 8008c26:	9b01      	ldr	r3, [sp, #4]
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	dd07      	ble.n	8008c3c <_dtoa_r+0xb64>
 8008c2c:	4651      	mov	r1, sl
 8008c2e:	2300      	movs	r3, #0
 8008c30:	220a      	movs	r2, #10
 8008c32:	4620      	mov	r0, r4
 8008c34:	f000 f9a4 	bl	8008f80 <__multadd>
 8008c38:	4682      	mov	sl, r0
 8008c3a:	e7ea      	b.n	8008c12 <_dtoa_r+0xb3a>
 8008c3c:	9b01      	ldr	r3, [sp, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	bfc8      	it	gt
 8008c42:	461d      	movgt	r5, r3
 8008c44:	9b00      	ldr	r3, [sp, #0]
 8008c46:	bfd8      	it	le
 8008c48:	2501      	movle	r5, #1
 8008c4a:	441d      	add	r5, r3
 8008c4c:	f04f 0800 	mov.w	r8, #0
 8008c50:	4651      	mov	r1, sl
 8008c52:	2201      	movs	r2, #1
 8008c54:	4620      	mov	r0, r4
 8008c56:	f000 fb41 	bl	80092dc <__lshift>
 8008c5a:	4631      	mov	r1, r6
 8008c5c:	4682      	mov	sl, r0
 8008c5e:	f000 fba9 	bl	80093b4 <__mcmp>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	dc96      	bgt.n	8008b94 <_dtoa_r+0xabc>
 8008c66:	d102      	bne.n	8008c6e <_dtoa_r+0xb96>
 8008c68:	f019 0f01 	tst.w	r9, #1
 8008c6c:	d192      	bne.n	8008b94 <_dtoa_r+0xabc>
 8008c6e:	462b      	mov	r3, r5
 8008c70:	461d      	mov	r5, r3
 8008c72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c76:	2a30      	cmp	r2, #48	; 0x30
 8008c78:	d0fa      	beq.n	8008c70 <_dtoa_r+0xb98>
 8008c7a:	e6dd      	b.n	8008a38 <_dtoa_r+0x960>
 8008c7c:	9a00      	ldr	r2, [sp, #0]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d189      	bne.n	8008b96 <_dtoa_r+0xabe>
 8008c82:	f10b 0b01 	add.w	fp, fp, #1
 8008c86:	2331      	movs	r3, #49	; 0x31
 8008c88:	e796      	b.n	8008bb8 <_dtoa_r+0xae0>
 8008c8a:	4b0a      	ldr	r3, [pc, #40]	; (8008cb4 <_dtoa_r+0xbdc>)
 8008c8c:	f7ff ba99 	b.w	80081c2 <_dtoa_r+0xea>
 8008c90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f47f aa6d 	bne.w	8008172 <_dtoa_r+0x9a>
 8008c98:	4b07      	ldr	r3, [pc, #28]	; (8008cb8 <_dtoa_r+0xbe0>)
 8008c9a:	f7ff ba92 	b.w	80081c2 <_dtoa_r+0xea>
 8008c9e:	9b01      	ldr	r3, [sp, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	dcb5      	bgt.n	8008c10 <_dtoa_r+0xb38>
 8008ca4:	9b07      	ldr	r3, [sp, #28]
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	f73f aeb1 	bgt.w	8008a0e <_dtoa_r+0x936>
 8008cac:	e7b0      	b.n	8008c10 <_dtoa_r+0xb38>
 8008cae:	bf00      	nop
 8008cb0:	0800a1d8 	.word	0x0800a1d8
 8008cb4:	0800a138 	.word	0x0800a138
 8008cb8:	0800a15c 	.word	0x0800a15c

08008cbc <_free_r>:
 8008cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cbe:	2900      	cmp	r1, #0
 8008cc0:	d044      	beq.n	8008d4c <_free_r+0x90>
 8008cc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cc6:	9001      	str	r0, [sp, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f1a1 0404 	sub.w	r4, r1, #4
 8008cce:	bfb8      	it	lt
 8008cd0:	18e4      	addlt	r4, r4, r3
 8008cd2:	f000 f8e7 	bl	8008ea4 <__malloc_lock>
 8008cd6:	4a1e      	ldr	r2, [pc, #120]	; (8008d50 <_free_r+0x94>)
 8008cd8:	9801      	ldr	r0, [sp, #4]
 8008cda:	6813      	ldr	r3, [r2, #0]
 8008cdc:	b933      	cbnz	r3, 8008cec <_free_r+0x30>
 8008cde:	6063      	str	r3, [r4, #4]
 8008ce0:	6014      	str	r4, [r2, #0]
 8008ce2:	b003      	add	sp, #12
 8008ce4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ce8:	f000 b8e2 	b.w	8008eb0 <__malloc_unlock>
 8008cec:	42a3      	cmp	r3, r4
 8008cee:	d908      	bls.n	8008d02 <_free_r+0x46>
 8008cf0:	6825      	ldr	r5, [r4, #0]
 8008cf2:	1961      	adds	r1, r4, r5
 8008cf4:	428b      	cmp	r3, r1
 8008cf6:	bf01      	itttt	eq
 8008cf8:	6819      	ldreq	r1, [r3, #0]
 8008cfa:	685b      	ldreq	r3, [r3, #4]
 8008cfc:	1949      	addeq	r1, r1, r5
 8008cfe:	6021      	streq	r1, [r4, #0]
 8008d00:	e7ed      	b.n	8008cde <_free_r+0x22>
 8008d02:	461a      	mov	r2, r3
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	b10b      	cbz	r3, 8008d0c <_free_r+0x50>
 8008d08:	42a3      	cmp	r3, r4
 8008d0a:	d9fa      	bls.n	8008d02 <_free_r+0x46>
 8008d0c:	6811      	ldr	r1, [r2, #0]
 8008d0e:	1855      	adds	r5, r2, r1
 8008d10:	42a5      	cmp	r5, r4
 8008d12:	d10b      	bne.n	8008d2c <_free_r+0x70>
 8008d14:	6824      	ldr	r4, [r4, #0]
 8008d16:	4421      	add	r1, r4
 8008d18:	1854      	adds	r4, r2, r1
 8008d1a:	42a3      	cmp	r3, r4
 8008d1c:	6011      	str	r1, [r2, #0]
 8008d1e:	d1e0      	bne.n	8008ce2 <_free_r+0x26>
 8008d20:	681c      	ldr	r4, [r3, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	6053      	str	r3, [r2, #4]
 8008d26:	440c      	add	r4, r1
 8008d28:	6014      	str	r4, [r2, #0]
 8008d2a:	e7da      	b.n	8008ce2 <_free_r+0x26>
 8008d2c:	d902      	bls.n	8008d34 <_free_r+0x78>
 8008d2e:	230c      	movs	r3, #12
 8008d30:	6003      	str	r3, [r0, #0]
 8008d32:	e7d6      	b.n	8008ce2 <_free_r+0x26>
 8008d34:	6825      	ldr	r5, [r4, #0]
 8008d36:	1961      	adds	r1, r4, r5
 8008d38:	428b      	cmp	r3, r1
 8008d3a:	bf04      	itt	eq
 8008d3c:	6819      	ldreq	r1, [r3, #0]
 8008d3e:	685b      	ldreq	r3, [r3, #4]
 8008d40:	6063      	str	r3, [r4, #4]
 8008d42:	bf04      	itt	eq
 8008d44:	1949      	addeq	r1, r1, r5
 8008d46:	6021      	streq	r1, [r4, #0]
 8008d48:	6054      	str	r4, [r2, #4]
 8008d4a:	e7ca      	b.n	8008ce2 <_free_r+0x26>
 8008d4c:	b003      	add	sp, #12
 8008d4e:	bd30      	pop	{r4, r5, pc}
 8008d50:	200009f4 	.word	0x200009f4

08008d54 <malloc>:
 8008d54:	4b02      	ldr	r3, [pc, #8]	; (8008d60 <malloc+0xc>)
 8008d56:	4601      	mov	r1, r0
 8008d58:	6818      	ldr	r0, [r3, #0]
 8008d5a:	f000 b823 	b.w	8008da4 <_malloc_r>
 8008d5e:	bf00      	nop
 8008d60:	2000006c 	.word	0x2000006c

08008d64 <sbrk_aligned>:
 8008d64:	b570      	push	{r4, r5, r6, lr}
 8008d66:	4e0e      	ldr	r6, [pc, #56]	; (8008da0 <sbrk_aligned+0x3c>)
 8008d68:	460c      	mov	r4, r1
 8008d6a:	6831      	ldr	r1, [r6, #0]
 8008d6c:	4605      	mov	r5, r0
 8008d6e:	b911      	cbnz	r1, 8008d76 <sbrk_aligned+0x12>
 8008d70:	f000 fe40 	bl	80099f4 <_sbrk_r>
 8008d74:	6030      	str	r0, [r6, #0]
 8008d76:	4621      	mov	r1, r4
 8008d78:	4628      	mov	r0, r5
 8008d7a:	f000 fe3b 	bl	80099f4 <_sbrk_r>
 8008d7e:	1c43      	adds	r3, r0, #1
 8008d80:	d00a      	beq.n	8008d98 <sbrk_aligned+0x34>
 8008d82:	1cc4      	adds	r4, r0, #3
 8008d84:	f024 0403 	bic.w	r4, r4, #3
 8008d88:	42a0      	cmp	r0, r4
 8008d8a:	d007      	beq.n	8008d9c <sbrk_aligned+0x38>
 8008d8c:	1a21      	subs	r1, r4, r0
 8008d8e:	4628      	mov	r0, r5
 8008d90:	f000 fe30 	bl	80099f4 <_sbrk_r>
 8008d94:	3001      	adds	r0, #1
 8008d96:	d101      	bne.n	8008d9c <sbrk_aligned+0x38>
 8008d98:	f04f 34ff 	mov.w	r4, #4294967295
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	bd70      	pop	{r4, r5, r6, pc}
 8008da0:	200009f8 	.word	0x200009f8

08008da4 <_malloc_r>:
 8008da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008da8:	1ccd      	adds	r5, r1, #3
 8008daa:	f025 0503 	bic.w	r5, r5, #3
 8008dae:	3508      	adds	r5, #8
 8008db0:	2d0c      	cmp	r5, #12
 8008db2:	bf38      	it	cc
 8008db4:	250c      	movcc	r5, #12
 8008db6:	2d00      	cmp	r5, #0
 8008db8:	4607      	mov	r7, r0
 8008dba:	db01      	blt.n	8008dc0 <_malloc_r+0x1c>
 8008dbc:	42a9      	cmp	r1, r5
 8008dbe:	d905      	bls.n	8008dcc <_malloc_r+0x28>
 8008dc0:	230c      	movs	r3, #12
 8008dc2:	603b      	str	r3, [r7, #0]
 8008dc4:	2600      	movs	r6, #0
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008ea0 <_malloc_r+0xfc>
 8008dd0:	f000 f868 	bl	8008ea4 <__malloc_lock>
 8008dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8008dd8:	461c      	mov	r4, r3
 8008dda:	bb5c      	cbnz	r4, 8008e34 <_malloc_r+0x90>
 8008ddc:	4629      	mov	r1, r5
 8008dde:	4638      	mov	r0, r7
 8008de0:	f7ff ffc0 	bl	8008d64 <sbrk_aligned>
 8008de4:	1c43      	adds	r3, r0, #1
 8008de6:	4604      	mov	r4, r0
 8008de8:	d155      	bne.n	8008e96 <_malloc_r+0xf2>
 8008dea:	f8d8 4000 	ldr.w	r4, [r8]
 8008dee:	4626      	mov	r6, r4
 8008df0:	2e00      	cmp	r6, #0
 8008df2:	d145      	bne.n	8008e80 <_malloc_r+0xdc>
 8008df4:	2c00      	cmp	r4, #0
 8008df6:	d048      	beq.n	8008e8a <_malloc_r+0xe6>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	eb04 0903 	add.w	r9, r4, r3
 8008e02:	f000 fdf7 	bl	80099f4 <_sbrk_r>
 8008e06:	4581      	cmp	r9, r0
 8008e08:	d13f      	bne.n	8008e8a <_malloc_r+0xe6>
 8008e0a:	6821      	ldr	r1, [r4, #0]
 8008e0c:	1a6d      	subs	r5, r5, r1
 8008e0e:	4629      	mov	r1, r5
 8008e10:	4638      	mov	r0, r7
 8008e12:	f7ff ffa7 	bl	8008d64 <sbrk_aligned>
 8008e16:	3001      	adds	r0, #1
 8008e18:	d037      	beq.n	8008e8a <_malloc_r+0xe6>
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	442b      	add	r3, r5
 8008e1e:	6023      	str	r3, [r4, #0]
 8008e20:	f8d8 3000 	ldr.w	r3, [r8]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d038      	beq.n	8008e9a <_malloc_r+0xf6>
 8008e28:	685a      	ldr	r2, [r3, #4]
 8008e2a:	42a2      	cmp	r2, r4
 8008e2c:	d12b      	bne.n	8008e86 <_malloc_r+0xe2>
 8008e2e:	2200      	movs	r2, #0
 8008e30:	605a      	str	r2, [r3, #4]
 8008e32:	e00f      	b.n	8008e54 <_malloc_r+0xb0>
 8008e34:	6822      	ldr	r2, [r4, #0]
 8008e36:	1b52      	subs	r2, r2, r5
 8008e38:	d41f      	bmi.n	8008e7a <_malloc_r+0xd6>
 8008e3a:	2a0b      	cmp	r2, #11
 8008e3c:	d917      	bls.n	8008e6e <_malloc_r+0xca>
 8008e3e:	1961      	adds	r1, r4, r5
 8008e40:	42a3      	cmp	r3, r4
 8008e42:	6025      	str	r5, [r4, #0]
 8008e44:	bf18      	it	ne
 8008e46:	6059      	strne	r1, [r3, #4]
 8008e48:	6863      	ldr	r3, [r4, #4]
 8008e4a:	bf08      	it	eq
 8008e4c:	f8c8 1000 	streq.w	r1, [r8]
 8008e50:	5162      	str	r2, [r4, r5]
 8008e52:	604b      	str	r3, [r1, #4]
 8008e54:	4638      	mov	r0, r7
 8008e56:	f104 060b 	add.w	r6, r4, #11
 8008e5a:	f000 f829 	bl	8008eb0 <__malloc_unlock>
 8008e5e:	f026 0607 	bic.w	r6, r6, #7
 8008e62:	1d23      	adds	r3, r4, #4
 8008e64:	1af2      	subs	r2, r6, r3
 8008e66:	d0ae      	beq.n	8008dc6 <_malloc_r+0x22>
 8008e68:	1b9b      	subs	r3, r3, r6
 8008e6a:	50a3      	str	r3, [r4, r2]
 8008e6c:	e7ab      	b.n	8008dc6 <_malloc_r+0x22>
 8008e6e:	42a3      	cmp	r3, r4
 8008e70:	6862      	ldr	r2, [r4, #4]
 8008e72:	d1dd      	bne.n	8008e30 <_malloc_r+0x8c>
 8008e74:	f8c8 2000 	str.w	r2, [r8]
 8008e78:	e7ec      	b.n	8008e54 <_malloc_r+0xb0>
 8008e7a:	4623      	mov	r3, r4
 8008e7c:	6864      	ldr	r4, [r4, #4]
 8008e7e:	e7ac      	b.n	8008dda <_malloc_r+0x36>
 8008e80:	4634      	mov	r4, r6
 8008e82:	6876      	ldr	r6, [r6, #4]
 8008e84:	e7b4      	b.n	8008df0 <_malloc_r+0x4c>
 8008e86:	4613      	mov	r3, r2
 8008e88:	e7cc      	b.n	8008e24 <_malloc_r+0x80>
 8008e8a:	230c      	movs	r3, #12
 8008e8c:	603b      	str	r3, [r7, #0]
 8008e8e:	4638      	mov	r0, r7
 8008e90:	f000 f80e 	bl	8008eb0 <__malloc_unlock>
 8008e94:	e797      	b.n	8008dc6 <_malloc_r+0x22>
 8008e96:	6025      	str	r5, [r4, #0]
 8008e98:	e7dc      	b.n	8008e54 <_malloc_r+0xb0>
 8008e9a:	605b      	str	r3, [r3, #4]
 8008e9c:	deff      	udf	#255	; 0xff
 8008e9e:	bf00      	nop
 8008ea0:	200009f4 	.word	0x200009f4

08008ea4 <__malloc_lock>:
 8008ea4:	4801      	ldr	r0, [pc, #4]	; (8008eac <__malloc_lock+0x8>)
 8008ea6:	f7ff b88a 	b.w	8007fbe <__retarget_lock_acquire_recursive>
 8008eaa:	bf00      	nop
 8008eac:	200009f0 	.word	0x200009f0

08008eb0 <__malloc_unlock>:
 8008eb0:	4801      	ldr	r0, [pc, #4]	; (8008eb8 <__malloc_unlock+0x8>)
 8008eb2:	f7ff b885 	b.w	8007fc0 <__retarget_lock_release_recursive>
 8008eb6:	bf00      	nop
 8008eb8:	200009f0 	.word	0x200009f0

08008ebc <_Balloc>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	69c6      	ldr	r6, [r0, #28]
 8008ec0:	4604      	mov	r4, r0
 8008ec2:	460d      	mov	r5, r1
 8008ec4:	b976      	cbnz	r6, 8008ee4 <_Balloc+0x28>
 8008ec6:	2010      	movs	r0, #16
 8008ec8:	f7ff ff44 	bl	8008d54 <malloc>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	61e0      	str	r0, [r4, #28]
 8008ed0:	b920      	cbnz	r0, 8008edc <_Balloc+0x20>
 8008ed2:	4b18      	ldr	r3, [pc, #96]	; (8008f34 <_Balloc+0x78>)
 8008ed4:	4818      	ldr	r0, [pc, #96]	; (8008f38 <_Balloc+0x7c>)
 8008ed6:	216b      	movs	r1, #107	; 0x6b
 8008ed8:	f000 fdaa 	bl	8009a30 <__assert_func>
 8008edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ee0:	6006      	str	r6, [r0, #0]
 8008ee2:	60c6      	str	r6, [r0, #12]
 8008ee4:	69e6      	ldr	r6, [r4, #28]
 8008ee6:	68f3      	ldr	r3, [r6, #12]
 8008ee8:	b183      	cbz	r3, 8008f0c <_Balloc+0x50>
 8008eea:	69e3      	ldr	r3, [r4, #28]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ef2:	b9b8      	cbnz	r0, 8008f24 <_Balloc+0x68>
 8008ef4:	2101      	movs	r1, #1
 8008ef6:	fa01 f605 	lsl.w	r6, r1, r5
 8008efa:	1d72      	adds	r2, r6, #5
 8008efc:	0092      	lsls	r2, r2, #2
 8008efe:	4620      	mov	r0, r4
 8008f00:	f000 fdb4 	bl	8009a6c <_calloc_r>
 8008f04:	b160      	cbz	r0, 8008f20 <_Balloc+0x64>
 8008f06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f0a:	e00e      	b.n	8008f2a <_Balloc+0x6e>
 8008f0c:	2221      	movs	r2, #33	; 0x21
 8008f0e:	2104      	movs	r1, #4
 8008f10:	4620      	mov	r0, r4
 8008f12:	f000 fdab 	bl	8009a6c <_calloc_r>
 8008f16:	69e3      	ldr	r3, [r4, #28]
 8008f18:	60f0      	str	r0, [r6, #12]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1e4      	bne.n	8008eea <_Balloc+0x2e>
 8008f20:	2000      	movs	r0, #0
 8008f22:	bd70      	pop	{r4, r5, r6, pc}
 8008f24:	6802      	ldr	r2, [r0, #0]
 8008f26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f30:	e7f7      	b.n	8008f22 <_Balloc+0x66>
 8008f32:	bf00      	nop
 8008f34:	0800a169 	.word	0x0800a169
 8008f38:	0800a1e9 	.word	0x0800a1e9

08008f3c <_Bfree>:
 8008f3c:	b570      	push	{r4, r5, r6, lr}
 8008f3e:	69c6      	ldr	r6, [r0, #28]
 8008f40:	4605      	mov	r5, r0
 8008f42:	460c      	mov	r4, r1
 8008f44:	b976      	cbnz	r6, 8008f64 <_Bfree+0x28>
 8008f46:	2010      	movs	r0, #16
 8008f48:	f7ff ff04 	bl	8008d54 <malloc>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	61e8      	str	r0, [r5, #28]
 8008f50:	b920      	cbnz	r0, 8008f5c <_Bfree+0x20>
 8008f52:	4b09      	ldr	r3, [pc, #36]	; (8008f78 <_Bfree+0x3c>)
 8008f54:	4809      	ldr	r0, [pc, #36]	; (8008f7c <_Bfree+0x40>)
 8008f56:	218f      	movs	r1, #143	; 0x8f
 8008f58:	f000 fd6a 	bl	8009a30 <__assert_func>
 8008f5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f60:	6006      	str	r6, [r0, #0]
 8008f62:	60c6      	str	r6, [r0, #12]
 8008f64:	b13c      	cbz	r4, 8008f76 <_Bfree+0x3a>
 8008f66:	69eb      	ldr	r3, [r5, #28]
 8008f68:	6862      	ldr	r2, [r4, #4]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f70:	6021      	str	r1, [r4, #0]
 8008f72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f76:	bd70      	pop	{r4, r5, r6, pc}
 8008f78:	0800a169 	.word	0x0800a169
 8008f7c:	0800a1e9 	.word	0x0800a1e9

08008f80 <__multadd>:
 8008f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f84:	690d      	ldr	r5, [r1, #16]
 8008f86:	4607      	mov	r7, r0
 8008f88:	460c      	mov	r4, r1
 8008f8a:	461e      	mov	r6, r3
 8008f8c:	f101 0c14 	add.w	ip, r1, #20
 8008f90:	2000      	movs	r0, #0
 8008f92:	f8dc 3000 	ldr.w	r3, [ip]
 8008f96:	b299      	uxth	r1, r3
 8008f98:	fb02 6101 	mla	r1, r2, r1, r6
 8008f9c:	0c1e      	lsrs	r6, r3, #16
 8008f9e:	0c0b      	lsrs	r3, r1, #16
 8008fa0:	fb02 3306 	mla	r3, r2, r6, r3
 8008fa4:	b289      	uxth	r1, r1
 8008fa6:	3001      	adds	r0, #1
 8008fa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008fac:	4285      	cmp	r5, r0
 8008fae:	f84c 1b04 	str.w	r1, [ip], #4
 8008fb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008fb6:	dcec      	bgt.n	8008f92 <__multadd+0x12>
 8008fb8:	b30e      	cbz	r6, 8008ffe <__multadd+0x7e>
 8008fba:	68a3      	ldr	r3, [r4, #8]
 8008fbc:	42ab      	cmp	r3, r5
 8008fbe:	dc19      	bgt.n	8008ff4 <__multadd+0x74>
 8008fc0:	6861      	ldr	r1, [r4, #4]
 8008fc2:	4638      	mov	r0, r7
 8008fc4:	3101      	adds	r1, #1
 8008fc6:	f7ff ff79 	bl	8008ebc <_Balloc>
 8008fca:	4680      	mov	r8, r0
 8008fcc:	b928      	cbnz	r0, 8008fda <__multadd+0x5a>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	4b0c      	ldr	r3, [pc, #48]	; (8009004 <__multadd+0x84>)
 8008fd2:	480d      	ldr	r0, [pc, #52]	; (8009008 <__multadd+0x88>)
 8008fd4:	21ba      	movs	r1, #186	; 0xba
 8008fd6:	f000 fd2b 	bl	8009a30 <__assert_func>
 8008fda:	6922      	ldr	r2, [r4, #16]
 8008fdc:	3202      	adds	r2, #2
 8008fde:	f104 010c 	add.w	r1, r4, #12
 8008fe2:	0092      	lsls	r2, r2, #2
 8008fe4:	300c      	adds	r0, #12
 8008fe6:	f000 fd15 	bl	8009a14 <memcpy>
 8008fea:	4621      	mov	r1, r4
 8008fec:	4638      	mov	r0, r7
 8008fee:	f7ff ffa5 	bl	8008f3c <_Bfree>
 8008ff2:	4644      	mov	r4, r8
 8008ff4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ff8:	3501      	adds	r5, #1
 8008ffa:	615e      	str	r6, [r3, #20]
 8008ffc:	6125      	str	r5, [r4, #16]
 8008ffe:	4620      	mov	r0, r4
 8009000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009004:	0800a1d8 	.word	0x0800a1d8
 8009008:	0800a1e9 	.word	0x0800a1e9

0800900c <__hi0bits>:
 800900c:	0c03      	lsrs	r3, r0, #16
 800900e:	041b      	lsls	r3, r3, #16
 8009010:	b9d3      	cbnz	r3, 8009048 <__hi0bits+0x3c>
 8009012:	0400      	lsls	r0, r0, #16
 8009014:	2310      	movs	r3, #16
 8009016:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800901a:	bf04      	itt	eq
 800901c:	0200      	lsleq	r0, r0, #8
 800901e:	3308      	addeq	r3, #8
 8009020:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009024:	bf04      	itt	eq
 8009026:	0100      	lsleq	r0, r0, #4
 8009028:	3304      	addeq	r3, #4
 800902a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800902e:	bf04      	itt	eq
 8009030:	0080      	lsleq	r0, r0, #2
 8009032:	3302      	addeq	r3, #2
 8009034:	2800      	cmp	r0, #0
 8009036:	db05      	blt.n	8009044 <__hi0bits+0x38>
 8009038:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800903c:	f103 0301 	add.w	r3, r3, #1
 8009040:	bf08      	it	eq
 8009042:	2320      	moveq	r3, #32
 8009044:	4618      	mov	r0, r3
 8009046:	4770      	bx	lr
 8009048:	2300      	movs	r3, #0
 800904a:	e7e4      	b.n	8009016 <__hi0bits+0xa>

0800904c <__lo0bits>:
 800904c:	6803      	ldr	r3, [r0, #0]
 800904e:	f013 0207 	ands.w	r2, r3, #7
 8009052:	d00c      	beq.n	800906e <__lo0bits+0x22>
 8009054:	07d9      	lsls	r1, r3, #31
 8009056:	d422      	bmi.n	800909e <__lo0bits+0x52>
 8009058:	079a      	lsls	r2, r3, #30
 800905a:	bf49      	itett	mi
 800905c:	085b      	lsrmi	r3, r3, #1
 800905e:	089b      	lsrpl	r3, r3, #2
 8009060:	6003      	strmi	r3, [r0, #0]
 8009062:	2201      	movmi	r2, #1
 8009064:	bf5c      	itt	pl
 8009066:	6003      	strpl	r3, [r0, #0]
 8009068:	2202      	movpl	r2, #2
 800906a:	4610      	mov	r0, r2
 800906c:	4770      	bx	lr
 800906e:	b299      	uxth	r1, r3
 8009070:	b909      	cbnz	r1, 8009076 <__lo0bits+0x2a>
 8009072:	0c1b      	lsrs	r3, r3, #16
 8009074:	2210      	movs	r2, #16
 8009076:	b2d9      	uxtb	r1, r3
 8009078:	b909      	cbnz	r1, 800907e <__lo0bits+0x32>
 800907a:	3208      	adds	r2, #8
 800907c:	0a1b      	lsrs	r3, r3, #8
 800907e:	0719      	lsls	r1, r3, #28
 8009080:	bf04      	itt	eq
 8009082:	091b      	lsreq	r3, r3, #4
 8009084:	3204      	addeq	r2, #4
 8009086:	0799      	lsls	r1, r3, #30
 8009088:	bf04      	itt	eq
 800908a:	089b      	lsreq	r3, r3, #2
 800908c:	3202      	addeq	r2, #2
 800908e:	07d9      	lsls	r1, r3, #31
 8009090:	d403      	bmi.n	800909a <__lo0bits+0x4e>
 8009092:	085b      	lsrs	r3, r3, #1
 8009094:	f102 0201 	add.w	r2, r2, #1
 8009098:	d003      	beq.n	80090a2 <__lo0bits+0x56>
 800909a:	6003      	str	r3, [r0, #0]
 800909c:	e7e5      	b.n	800906a <__lo0bits+0x1e>
 800909e:	2200      	movs	r2, #0
 80090a0:	e7e3      	b.n	800906a <__lo0bits+0x1e>
 80090a2:	2220      	movs	r2, #32
 80090a4:	e7e1      	b.n	800906a <__lo0bits+0x1e>
	...

080090a8 <__i2b>:
 80090a8:	b510      	push	{r4, lr}
 80090aa:	460c      	mov	r4, r1
 80090ac:	2101      	movs	r1, #1
 80090ae:	f7ff ff05 	bl	8008ebc <_Balloc>
 80090b2:	4602      	mov	r2, r0
 80090b4:	b928      	cbnz	r0, 80090c2 <__i2b+0x1a>
 80090b6:	4b05      	ldr	r3, [pc, #20]	; (80090cc <__i2b+0x24>)
 80090b8:	4805      	ldr	r0, [pc, #20]	; (80090d0 <__i2b+0x28>)
 80090ba:	f240 1145 	movw	r1, #325	; 0x145
 80090be:	f000 fcb7 	bl	8009a30 <__assert_func>
 80090c2:	2301      	movs	r3, #1
 80090c4:	6144      	str	r4, [r0, #20]
 80090c6:	6103      	str	r3, [r0, #16]
 80090c8:	bd10      	pop	{r4, pc}
 80090ca:	bf00      	nop
 80090cc:	0800a1d8 	.word	0x0800a1d8
 80090d0:	0800a1e9 	.word	0x0800a1e9

080090d4 <__multiply>:
 80090d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d8:	4691      	mov	r9, r2
 80090da:	690a      	ldr	r2, [r1, #16]
 80090dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	bfb8      	it	lt
 80090e4:	460b      	movlt	r3, r1
 80090e6:	460c      	mov	r4, r1
 80090e8:	bfbc      	itt	lt
 80090ea:	464c      	movlt	r4, r9
 80090ec:	4699      	movlt	r9, r3
 80090ee:	6927      	ldr	r7, [r4, #16]
 80090f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80090f4:	68a3      	ldr	r3, [r4, #8]
 80090f6:	6861      	ldr	r1, [r4, #4]
 80090f8:	eb07 060a 	add.w	r6, r7, sl
 80090fc:	42b3      	cmp	r3, r6
 80090fe:	b085      	sub	sp, #20
 8009100:	bfb8      	it	lt
 8009102:	3101      	addlt	r1, #1
 8009104:	f7ff feda 	bl	8008ebc <_Balloc>
 8009108:	b930      	cbnz	r0, 8009118 <__multiply+0x44>
 800910a:	4602      	mov	r2, r0
 800910c:	4b44      	ldr	r3, [pc, #272]	; (8009220 <__multiply+0x14c>)
 800910e:	4845      	ldr	r0, [pc, #276]	; (8009224 <__multiply+0x150>)
 8009110:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009114:	f000 fc8c 	bl	8009a30 <__assert_func>
 8009118:	f100 0514 	add.w	r5, r0, #20
 800911c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009120:	462b      	mov	r3, r5
 8009122:	2200      	movs	r2, #0
 8009124:	4543      	cmp	r3, r8
 8009126:	d321      	bcc.n	800916c <__multiply+0x98>
 8009128:	f104 0314 	add.w	r3, r4, #20
 800912c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009130:	f109 0314 	add.w	r3, r9, #20
 8009134:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009138:	9202      	str	r2, [sp, #8]
 800913a:	1b3a      	subs	r2, r7, r4
 800913c:	3a15      	subs	r2, #21
 800913e:	f022 0203 	bic.w	r2, r2, #3
 8009142:	3204      	adds	r2, #4
 8009144:	f104 0115 	add.w	r1, r4, #21
 8009148:	428f      	cmp	r7, r1
 800914a:	bf38      	it	cc
 800914c:	2204      	movcc	r2, #4
 800914e:	9201      	str	r2, [sp, #4]
 8009150:	9a02      	ldr	r2, [sp, #8]
 8009152:	9303      	str	r3, [sp, #12]
 8009154:	429a      	cmp	r2, r3
 8009156:	d80c      	bhi.n	8009172 <__multiply+0x9e>
 8009158:	2e00      	cmp	r6, #0
 800915a:	dd03      	ble.n	8009164 <__multiply+0x90>
 800915c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009160:	2b00      	cmp	r3, #0
 8009162:	d05b      	beq.n	800921c <__multiply+0x148>
 8009164:	6106      	str	r6, [r0, #16]
 8009166:	b005      	add	sp, #20
 8009168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916c:	f843 2b04 	str.w	r2, [r3], #4
 8009170:	e7d8      	b.n	8009124 <__multiply+0x50>
 8009172:	f8b3 a000 	ldrh.w	sl, [r3]
 8009176:	f1ba 0f00 	cmp.w	sl, #0
 800917a:	d024      	beq.n	80091c6 <__multiply+0xf2>
 800917c:	f104 0e14 	add.w	lr, r4, #20
 8009180:	46a9      	mov	r9, r5
 8009182:	f04f 0c00 	mov.w	ip, #0
 8009186:	f85e 2b04 	ldr.w	r2, [lr], #4
 800918a:	f8d9 1000 	ldr.w	r1, [r9]
 800918e:	fa1f fb82 	uxth.w	fp, r2
 8009192:	b289      	uxth	r1, r1
 8009194:	fb0a 110b 	mla	r1, sl, fp, r1
 8009198:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800919c:	f8d9 2000 	ldr.w	r2, [r9]
 80091a0:	4461      	add	r1, ip
 80091a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80091aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091ae:	b289      	uxth	r1, r1
 80091b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091b4:	4577      	cmp	r7, lr
 80091b6:	f849 1b04 	str.w	r1, [r9], #4
 80091ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091be:	d8e2      	bhi.n	8009186 <__multiply+0xb2>
 80091c0:	9a01      	ldr	r2, [sp, #4]
 80091c2:	f845 c002 	str.w	ip, [r5, r2]
 80091c6:	9a03      	ldr	r2, [sp, #12]
 80091c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80091cc:	3304      	adds	r3, #4
 80091ce:	f1b9 0f00 	cmp.w	r9, #0
 80091d2:	d021      	beq.n	8009218 <__multiply+0x144>
 80091d4:	6829      	ldr	r1, [r5, #0]
 80091d6:	f104 0c14 	add.w	ip, r4, #20
 80091da:	46ae      	mov	lr, r5
 80091dc:	f04f 0a00 	mov.w	sl, #0
 80091e0:	f8bc b000 	ldrh.w	fp, [ip]
 80091e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80091e8:	fb09 220b 	mla	r2, r9, fp, r2
 80091ec:	4452      	add	r2, sl
 80091ee:	b289      	uxth	r1, r1
 80091f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091f4:	f84e 1b04 	str.w	r1, [lr], #4
 80091f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80091fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009200:	f8be 1000 	ldrh.w	r1, [lr]
 8009204:	fb09 110a 	mla	r1, r9, sl, r1
 8009208:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800920c:	4567      	cmp	r7, ip
 800920e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009212:	d8e5      	bhi.n	80091e0 <__multiply+0x10c>
 8009214:	9a01      	ldr	r2, [sp, #4]
 8009216:	50a9      	str	r1, [r5, r2]
 8009218:	3504      	adds	r5, #4
 800921a:	e799      	b.n	8009150 <__multiply+0x7c>
 800921c:	3e01      	subs	r6, #1
 800921e:	e79b      	b.n	8009158 <__multiply+0x84>
 8009220:	0800a1d8 	.word	0x0800a1d8
 8009224:	0800a1e9 	.word	0x0800a1e9

08009228 <__pow5mult>:
 8009228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800922c:	4615      	mov	r5, r2
 800922e:	f012 0203 	ands.w	r2, r2, #3
 8009232:	4606      	mov	r6, r0
 8009234:	460f      	mov	r7, r1
 8009236:	d007      	beq.n	8009248 <__pow5mult+0x20>
 8009238:	4c25      	ldr	r4, [pc, #148]	; (80092d0 <__pow5mult+0xa8>)
 800923a:	3a01      	subs	r2, #1
 800923c:	2300      	movs	r3, #0
 800923e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009242:	f7ff fe9d 	bl	8008f80 <__multadd>
 8009246:	4607      	mov	r7, r0
 8009248:	10ad      	asrs	r5, r5, #2
 800924a:	d03d      	beq.n	80092c8 <__pow5mult+0xa0>
 800924c:	69f4      	ldr	r4, [r6, #28]
 800924e:	b97c      	cbnz	r4, 8009270 <__pow5mult+0x48>
 8009250:	2010      	movs	r0, #16
 8009252:	f7ff fd7f 	bl	8008d54 <malloc>
 8009256:	4602      	mov	r2, r0
 8009258:	61f0      	str	r0, [r6, #28]
 800925a:	b928      	cbnz	r0, 8009268 <__pow5mult+0x40>
 800925c:	4b1d      	ldr	r3, [pc, #116]	; (80092d4 <__pow5mult+0xac>)
 800925e:	481e      	ldr	r0, [pc, #120]	; (80092d8 <__pow5mult+0xb0>)
 8009260:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009264:	f000 fbe4 	bl	8009a30 <__assert_func>
 8009268:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800926c:	6004      	str	r4, [r0, #0]
 800926e:	60c4      	str	r4, [r0, #12]
 8009270:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009274:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009278:	b94c      	cbnz	r4, 800928e <__pow5mult+0x66>
 800927a:	f240 2171 	movw	r1, #625	; 0x271
 800927e:	4630      	mov	r0, r6
 8009280:	f7ff ff12 	bl	80090a8 <__i2b>
 8009284:	2300      	movs	r3, #0
 8009286:	f8c8 0008 	str.w	r0, [r8, #8]
 800928a:	4604      	mov	r4, r0
 800928c:	6003      	str	r3, [r0, #0]
 800928e:	f04f 0900 	mov.w	r9, #0
 8009292:	07eb      	lsls	r3, r5, #31
 8009294:	d50a      	bpl.n	80092ac <__pow5mult+0x84>
 8009296:	4639      	mov	r1, r7
 8009298:	4622      	mov	r2, r4
 800929a:	4630      	mov	r0, r6
 800929c:	f7ff ff1a 	bl	80090d4 <__multiply>
 80092a0:	4639      	mov	r1, r7
 80092a2:	4680      	mov	r8, r0
 80092a4:	4630      	mov	r0, r6
 80092a6:	f7ff fe49 	bl	8008f3c <_Bfree>
 80092aa:	4647      	mov	r7, r8
 80092ac:	106d      	asrs	r5, r5, #1
 80092ae:	d00b      	beq.n	80092c8 <__pow5mult+0xa0>
 80092b0:	6820      	ldr	r0, [r4, #0]
 80092b2:	b938      	cbnz	r0, 80092c4 <__pow5mult+0x9c>
 80092b4:	4622      	mov	r2, r4
 80092b6:	4621      	mov	r1, r4
 80092b8:	4630      	mov	r0, r6
 80092ba:	f7ff ff0b 	bl	80090d4 <__multiply>
 80092be:	6020      	str	r0, [r4, #0]
 80092c0:	f8c0 9000 	str.w	r9, [r0]
 80092c4:	4604      	mov	r4, r0
 80092c6:	e7e4      	b.n	8009292 <__pow5mult+0x6a>
 80092c8:	4638      	mov	r0, r7
 80092ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092ce:	bf00      	nop
 80092d0:	0800a338 	.word	0x0800a338
 80092d4:	0800a169 	.word	0x0800a169
 80092d8:	0800a1e9 	.word	0x0800a1e9

080092dc <__lshift>:
 80092dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092e0:	460c      	mov	r4, r1
 80092e2:	6849      	ldr	r1, [r1, #4]
 80092e4:	6923      	ldr	r3, [r4, #16]
 80092e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092ea:	68a3      	ldr	r3, [r4, #8]
 80092ec:	4607      	mov	r7, r0
 80092ee:	4691      	mov	r9, r2
 80092f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092f4:	f108 0601 	add.w	r6, r8, #1
 80092f8:	42b3      	cmp	r3, r6
 80092fa:	db0b      	blt.n	8009314 <__lshift+0x38>
 80092fc:	4638      	mov	r0, r7
 80092fe:	f7ff fddd 	bl	8008ebc <_Balloc>
 8009302:	4605      	mov	r5, r0
 8009304:	b948      	cbnz	r0, 800931a <__lshift+0x3e>
 8009306:	4602      	mov	r2, r0
 8009308:	4b28      	ldr	r3, [pc, #160]	; (80093ac <__lshift+0xd0>)
 800930a:	4829      	ldr	r0, [pc, #164]	; (80093b0 <__lshift+0xd4>)
 800930c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009310:	f000 fb8e 	bl	8009a30 <__assert_func>
 8009314:	3101      	adds	r1, #1
 8009316:	005b      	lsls	r3, r3, #1
 8009318:	e7ee      	b.n	80092f8 <__lshift+0x1c>
 800931a:	2300      	movs	r3, #0
 800931c:	f100 0114 	add.w	r1, r0, #20
 8009320:	f100 0210 	add.w	r2, r0, #16
 8009324:	4618      	mov	r0, r3
 8009326:	4553      	cmp	r3, sl
 8009328:	db33      	blt.n	8009392 <__lshift+0xb6>
 800932a:	6920      	ldr	r0, [r4, #16]
 800932c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009330:	f104 0314 	add.w	r3, r4, #20
 8009334:	f019 091f 	ands.w	r9, r9, #31
 8009338:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800933c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009340:	d02b      	beq.n	800939a <__lshift+0xbe>
 8009342:	f1c9 0e20 	rsb	lr, r9, #32
 8009346:	468a      	mov	sl, r1
 8009348:	2200      	movs	r2, #0
 800934a:	6818      	ldr	r0, [r3, #0]
 800934c:	fa00 f009 	lsl.w	r0, r0, r9
 8009350:	4310      	orrs	r0, r2
 8009352:	f84a 0b04 	str.w	r0, [sl], #4
 8009356:	f853 2b04 	ldr.w	r2, [r3], #4
 800935a:	459c      	cmp	ip, r3
 800935c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009360:	d8f3      	bhi.n	800934a <__lshift+0x6e>
 8009362:	ebac 0304 	sub.w	r3, ip, r4
 8009366:	3b15      	subs	r3, #21
 8009368:	f023 0303 	bic.w	r3, r3, #3
 800936c:	3304      	adds	r3, #4
 800936e:	f104 0015 	add.w	r0, r4, #21
 8009372:	4584      	cmp	ip, r0
 8009374:	bf38      	it	cc
 8009376:	2304      	movcc	r3, #4
 8009378:	50ca      	str	r2, [r1, r3]
 800937a:	b10a      	cbz	r2, 8009380 <__lshift+0xa4>
 800937c:	f108 0602 	add.w	r6, r8, #2
 8009380:	3e01      	subs	r6, #1
 8009382:	4638      	mov	r0, r7
 8009384:	612e      	str	r6, [r5, #16]
 8009386:	4621      	mov	r1, r4
 8009388:	f7ff fdd8 	bl	8008f3c <_Bfree>
 800938c:	4628      	mov	r0, r5
 800938e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009392:	f842 0f04 	str.w	r0, [r2, #4]!
 8009396:	3301      	adds	r3, #1
 8009398:	e7c5      	b.n	8009326 <__lshift+0x4a>
 800939a:	3904      	subs	r1, #4
 800939c:	f853 2b04 	ldr.w	r2, [r3], #4
 80093a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80093a4:	459c      	cmp	ip, r3
 80093a6:	d8f9      	bhi.n	800939c <__lshift+0xc0>
 80093a8:	e7ea      	b.n	8009380 <__lshift+0xa4>
 80093aa:	bf00      	nop
 80093ac:	0800a1d8 	.word	0x0800a1d8
 80093b0:	0800a1e9 	.word	0x0800a1e9

080093b4 <__mcmp>:
 80093b4:	b530      	push	{r4, r5, lr}
 80093b6:	6902      	ldr	r2, [r0, #16]
 80093b8:	690c      	ldr	r4, [r1, #16]
 80093ba:	1b12      	subs	r2, r2, r4
 80093bc:	d10e      	bne.n	80093dc <__mcmp+0x28>
 80093be:	f100 0314 	add.w	r3, r0, #20
 80093c2:	3114      	adds	r1, #20
 80093c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80093c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80093cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80093d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80093d4:	42a5      	cmp	r5, r4
 80093d6:	d003      	beq.n	80093e0 <__mcmp+0x2c>
 80093d8:	d305      	bcc.n	80093e6 <__mcmp+0x32>
 80093da:	2201      	movs	r2, #1
 80093dc:	4610      	mov	r0, r2
 80093de:	bd30      	pop	{r4, r5, pc}
 80093e0:	4283      	cmp	r3, r0
 80093e2:	d3f3      	bcc.n	80093cc <__mcmp+0x18>
 80093e4:	e7fa      	b.n	80093dc <__mcmp+0x28>
 80093e6:	f04f 32ff 	mov.w	r2, #4294967295
 80093ea:	e7f7      	b.n	80093dc <__mcmp+0x28>

080093ec <__mdiff>:
 80093ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f0:	460c      	mov	r4, r1
 80093f2:	4606      	mov	r6, r0
 80093f4:	4611      	mov	r1, r2
 80093f6:	4620      	mov	r0, r4
 80093f8:	4690      	mov	r8, r2
 80093fa:	f7ff ffdb 	bl	80093b4 <__mcmp>
 80093fe:	1e05      	subs	r5, r0, #0
 8009400:	d110      	bne.n	8009424 <__mdiff+0x38>
 8009402:	4629      	mov	r1, r5
 8009404:	4630      	mov	r0, r6
 8009406:	f7ff fd59 	bl	8008ebc <_Balloc>
 800940a:	b930      	cbnz	r0, 800941a <__mdiff+0x2e>
 800940c:	4b3a      	ldr	r3, [pc, #232]	; (80094f8 <__mdiff+0x10c>)
 800940e:	4602      	mov	r2, r0
 8009410:	f240 2137 	movw	r1, #567	; 0x237
 8009414:	4839      	ldr	r0, [pc, #228]	; (80094fc <__mdiff+0x110>)
 8009416:	f000 fb0b 	bl	8009a30 <__assert_func>
 800941a:	2301      	movs	r3, #1
 800941c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009420:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009424:	bfa4      	itt	ge
 8009426:	4643      	movge	r3, r8
 8009428:	46a0      	movge	r8, r4
 800942a:	4630      	mov	r0, r6
 800942c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009430:	bfa6      	itte	ge
 8009432:	461c      	movge	r4, r3
 8009434:	2500      	movge	r5, #0
 8009436:	2501      	movlt	r5, #1
 8009438:	f7ff fd40 	bl	8008ebc <_Balloc>
 800943c:	b920      	cbnz	r0, 8009448 <__mdiff+0x5c>
 800943e:	4b2e      	ldr	r3, [pc, #184]	; (80094f8 <__mdiff+0x10c>)
 8009440:	4602      	mov	r2, r0
 8009442:	f240 2145 	movw	r1, #581	; 0x245
 8009446:	e7e5      	b.n	8009414 <__mdiff+0x28>
 8009448:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800944c:	6926      	ldr	r6, [r4, #16]
 800944e:	60c5      	str	r5, [r0, #12]
 8009450:	f104 0914 	add.w	r9, r4, #20
 8009454:	f108 0514 	add.w	r5, r8, #20
 8009458:	f100 0e14 	add.w	lr, r0, #20
 800945c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009460:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009464:	f108 0210 	add.w	r2, r8, #16
 8009468:	46f2      	mov	sl, lr
 800946a:	2100      	movs	r1, #0
 800946c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009470:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009474:	fa11 f88b 	uxtah	r8, r1, fp
 8009478:	b299      	uxth	r1, r3
 800947a:	0c1b      	lsrs	r3, r3, #16
 800947c:	eba8 0801 	sub.w	r8, r8, r1
 8009480:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009484:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009488:	fa1f f888 	uxth.w	r8, r8
 800948c:	1419      	asrs	r1, r3, #16
 800948e:	454e      	cmp	r6, r9
 8009490:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009494:	f84a 3b04 	str.w	r3, [sl], #4
 8009498:	d8e8      	bhi.n	800946c <__mdiff+0x80>
 800949a:	1b33      	subs	r3, r6, r4
 800949c:	3b15      	subs	r3, #21
 800949e:	f023 0303 	bic.w	r3, r3, #3
 80094a2:	3304      	adds	r3, #4
 80094a4:	3415      	adds	r4, #21
 80094a6:	42a6      	cmp	r6, r4
 80094a8:	bf38      	it	cc
 80094aa:	2304      	movcc	r3, #4
 80094ac:	441d      	add	r5, r3
 80094ae:	4473      	add	r3, lr
 80094b0:	469e      	mov	lr, r3
 80094b2:	462e      	mov	r6, r5
 80094b4:	4566      	cmp	r6, ip
 80094b6:	d30e      	bcc.n	80094d6 <__mdiff+0xea>
 80094b8:	f10c 0203 	add.w	r2, ip, #3
 80094bc:	1b52      	subs	r2, r2, r5
 80094be:	f022 0203 	bic.w	r2, r2, #3
 80094c2:	3d03      	subs	r5, #3
 80094c4:	45ac      	cmp	ip, r5
 80094c6:	bf38      	it	cc
 80094c8:	2200      	movcc	r2, #0
 80094ca:	4413      	add	r3, r2
 80094cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80094d0:	b17a      	cbz	r2, 80094f2 <__mdiff+0x106>
 80094d2:	6107      	str	r7, [r0, #16]
 80094d4:	e7a4      	b.n	8009420 <__mdiff+0x34>
 80094d6:	f856 8b04 	ldr.w	r8, [r6], #4
 80094da:	fa11 f288 	uxtah	r2, r1, r8
 80094de:	1414      	asrs	r4, r2, #16
 80094e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80094e4:	b292      	uxth	r2, r2
 80094e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80094ea:	f84e 2b04 	str.w	r2, [lr], #4
 80094ee:	1421      	asrs	r1, r4, #16
 80094f0:	e7e0      	b.n	80094b4 <__mdiff+0xc8>
 80094f2:	3f01      	subs	r7, #1
 80094f4:	e7ea      	b.n	80094cc <__mdiff+0xe0>
 80094f6:	bf00      	nop
 80094f8:	0800a1d8 	.word	0x0800a1d8
 80094fc:	0800a1e9 	.word	0x0800a1e9

08009500 <__d2b>:
 8009500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009504:	460f      	mov	r7, r1
 8009506:	2101      	movs	r1, #1
 8009508:	ec59 8b10 	vmov	r8, r9, d0
 800950c:	4616      	mov	r6, r2
 800950e:	f7ff fcd5 	bl	8008ebc <_Balloc>
 8009512:	4604      	mov	r4, r0
 8009514:	b930      	cbnz	r0, 8009524 <__d2b+0x24>
 8009516:	4602      	mov	r2, r0
 8009518:	4b24      	ldr	r3, [pc, #144]	; (80095ac <__d2b+0xac>)
 800951a:	4825      	ldr	r0, [pc, #148]	; (80095b0 <__d2b+0xb0>)
 800951c:	f240 310f 	movw	r1, #783	; 0x30f
 8009520:	f000 fa86 	bl	8009a30 <__assert_func>
 8009524:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009528:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800952c:	bb2d      	cbnz	r5, 800957a <__d2b+0x7a>
 800952e:	9301      	str	r3, [sp, #4]
 8009530:	f1b8 0300 	subs.w	r3, r8, #0
 8009534:	d026      	beq.n	8009584 <__d2b+0x84>
 8009536:	4668      	mov	r0, sp
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	f7ff fd87 	bl	800904c <__lo0bits>
 800953e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009542:	b1e8      	cbz	r0, 8009580 <__d2b+0x80>
 8009544:	f1c0 0320 	rsb	r3, r0, #32
 8009548:	fa02 f303 	lsl.w	r3, r2, r3
 800954c:	430b      	orrs	r3, r1
 800954e:	40c2      	lsrs	r2, r0
 8009550:	6163      	str	r3, [r4, #20]
 8009552:	9201      	str	r2, [sp, #4]
 8009554:	9b01      	ldr	r3, [sp, #4]
 8009556:	61a3      	str	r3, [r4, #24]
 8009558:	2b00      	cmp	r3, #0
 800955a:	bf14      	ite	ne
 800955c:	2202      	movne	r2, #2
 800955e:	2201      	moveq	r2, #1
 8009560:	6122      	str	r2, [r4, #16]
 8009562:	b1bd      	cbz	r5, 8009594 <__d2b+0x94>
 8009564:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009568:	4405      	add	r5, r0
 800956a:	603d      	str	r5, [r7, #0]
 800956c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009570:	6030      	str	r0, [r6, #0]
 8009572:	4620      	mov	r0, r4
 8009574:	b003      	add	sp, #12
 8009576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800957a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800957e:	e7d6      	b.n	800952e <__d2b+0x2e>
 8009580:	6161      	str	r1, [r4, #20]
 8009582:	e7e7      	b.n	8009554 <__d2b+0x54>
 8009584:	a801      	add	r0, sp, #4
 8009586:	f7ff fd61 	bl	800904c <__lo0bits>
 800958a:	9b01      	ldr	r3, [sp, #4]
 800958c:	6163      	str	r3, [r4, #20]
 800958e:	3020      	adds	r0, #32
 8009590:	2201      	movs	r2, #1
 8009592:	e7e5      	b.n	8009560 <__d2b+0x60>
 8009594:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009598:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800959c:	6038      	str	r0, [r7, #0]
 800959e:	6918      	ldr	r0, [r3, #16]
 80095a0:	f7ff fd34 	bl	800900c <__hi0bits>
 80095a4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095a8:	e7e2      	b.n	8009570 <__d2b+0x70>
 80095aa:	bf00      	nop
 80095ac:	0800a1d8 	.word	0x0800a1d8
 80095b0:	0800a1e9 	.word	0x0800a1e9

080095b4 <__ssputs_r>:
 80095b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095b8:	688e      	ldr	r6, [r1, #8]
 80095ba:	461f      	mov	r7, r3
 80095bc:	42be      	cmp	r6, r7
 80095be:	680b      	ldr	r3, [r1, #0]
 80095c0:	4682      	mov	sl, r0
 80095c2:	460c      	mov	r4, r1
 80095c4:	4690      	mov	r8, r2
 80095c6:	d82c      	bhi.n	8009622 <__ssputs_r+0x6e>
 80095c8:	898a      	ldrh	r2, [r1, #12]
 80095ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095ce:	d026      	beq.n	800961e <__ssputs_r+0x6a>
 80095d0:	6965      	ldr	r5, [r4, #20]
 80095d2:	6909      	ldr	r1, [r1, #16]
 80095d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095d8:	eba3 0901 	sub.w	r9, r3, r1
 80095dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095e0:	1c7b      	adds	r3, r7, #1
 80095e2:	444b      	add	r3, r9
 80095e4:	106d      	asrs	r5, r5, #1
 80095e6:	429d      	cmp	r5, r3
 80095e8:	bf38      	it	cc
 80095ea:	461d      	movcc	r5, r3
 80095ec:	0553      	lsls	r3, r2, #21
 80095ee:	d527      	bpl.n	8009640 <__ssputs_r+0x8c>
 80095f0:	4629      	mov	r1, r5
 80095f2:	f7ff fbd7 	bl	8008da4 <_malloc_r>
 80095f6:	4606      	mov	r6, r0
 80095f8:	b360      	cbz	r0, 8009654 <__ssputs_r+0xa0>
 80095fa:	6921      	ldr	r1, [r4, #16]
 80095fc:	464a      	mov	r2, r9
 80095fe:	f000 fa09 	bl	8009a14 <memcpy>
 8009602:	89a3      	ldrh	r3, [r4, #12]
 8009604:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800960c:	81a3      	strh	r3, [r4, #12]
 800960e:	6126      	str	r6, [r4, #16]
 8009610:	6165      	str	r5, [r4, #20]
 8009612:	444e      	add	r6, r9
 8009614:	eba5 0509 	sub.w	r5, r5, r9
 8009618:	6026      	str	r6, [r4, #0]
 800961a:	60a5      	str	r5, [r4, #8]
 800961c:	463e      	mov	r6, r7
 800961e:	42be      	cmp	r6, r7
 8009620:	d900      	bls.n	8009624 <__ssputs_r+0x70>
 8009622:	463e      	mov	r6, r7
 8009624:	6820      	ldr	r0, [r4, #0]
 8009626:	4632      	mov	r2, r6
 8009628:	4641      	mov	r1, r8
 800962a:	f000 f9c9 	bl	80099c0 <memmove>
 800962e:	68a3      	ldr	r3, [r4, #8]
 8009630:	1b9b      	subs	r3, r3, r6
 8009632:	60a3      	str	r3, [r4, #8]
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	4433      	add	r3, r6
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	2000      	movs	r0, #0
 800963c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009640:	462a      	mov	r2, r5
 8009642:	f000 fa3b 	bl	8009abc <_realloc_r>
 8009646:	4606      	mov	r6, r0
 8009648:	2800      	cmp	r0, #0
 800964a:	d1e0      	bne.n	800960e <__ssputs_r+0x5a>
 800964c:	6921      	ldr	r1, [r4, #16]
 800964e:	4650      	mov	r0, sl
 8009650:	f7ff fb34 	bl	8008cbc <_free_r>
 8009654:	230c      	movs	r3, #12
 8009656:	f8ca 3000 	str.w	r3, [sl]
 800965a:	89a3      	ldrh	r3, [r4, #12]
 800965c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009660:	81a3      	strh	r3, [r4, #12]
 8009662:	f04f 30ff 	mov.w	r0, #4294967295
 8009666:	e7e9      	b.n	800963c <__ssputs_r+0x88>

08009668 <_svfiprintf_r>:
 8009668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800966c:	4698      	mov	r8, r3
 800966e:	898b      	ldrh	r3, [r1, #12]
 8009670:	061b      	lsls	r3, r3, #24
 8009672:	b09d      	sub	sp, #116	; 0x74
 8009674:	4607      	mov	r7, r0
 8009676:	460d      	mov	r5, r1
 8009678:	4614      	mov	r4, r2
 800967a:	d50e      	bpl.n	800969a <_svfiprintf_r+0x32>
 800967c:	690b      	ldr	r3, [r1, #16]
 800967e:	b963      	cbnz	r3, 800969a <_svfiprintf_r+0x32>
 8009680:	2140      	movs	r1, #64	; 0x40
 8009682:	f7ff fb8f 	bl	8008da4 <_malloc_r>
 8009686:	6028      	str	r0, [r5, #0]
 8009688:	6128      	str	r0, [r5, #16]
 800968a:	b920      	cbnz	r0, 8009696 <_svfiprintf_r+0x2e>
 800968c:	230c      	movs	r3, #12
 800968e:	603b      	str	r3, [r7, #0]
 8009690:	f04f 30ff 	mov.w	r0, #4294967295
 8009694:	e0d0      	b.n	8009838 <_svfiprintf_r+0x1d0>
 8009696:	2340      	movs	r3, #64	; 0x40
 8009698:	616b      	str	r3, [r5, #20]
 800969a:	2300      	movs	r3, #0
 800969c:	9309      	str	r3, [sp, #36]	; 0x24
 800969e:	2320      	movs	r3, #32
 80096a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80096a8:	2330      	movs	r3, #48	; 0x30
 80096aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009850 <_svfiprintf_r+0x1e8>
 80096ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096b2:	f04f 0901 	mov.w	r9, #1
 80096b6:	4623      	mov	r3, r4
 80096b8:	469a      	mov	sl, r3
 80096ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096be:	b10a      	cbz	r2, 80096c4 <_svfiprintf_r+0x5c>
 80096c0:	2a25      	cmp	r2, #37	; 0x25
 80096c2:	d1f9      	bne.n	80096b8 <_svfiprintf_r+0x50>
 80096c4:	ebba 0b04 	subs.w	fp, sl, r4
 80096c8:	d00b      	beq.n	80096e2 <_svfiprintf_r+0x7a>
 80096ca:	465b      	mov	r3, fp
 80096cc:	4622      	mov	r2, r4
 80096ce:	4629      	mov	r1, r5
 80096d0:	4638      	mov	r0, r7
 80096d2:	f7ff ff6f 	bl	80095b4 <__ssputs_r>
 80096d6:	3001      	adds	r0, #1
 80096d8:	f000 80a9 	beq.w	800982e <_svfiprintf_r+0x1c6>
 80096dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096de:	445a      	add	r2, fp
 80096e0:	9209      	str	r2, [sp, #36]	; 0x24
 80096e2:	f89a 3000 	ldrb.w	r3, [sl]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 80a1 	beq.w	800982e <_svfiprintf_r+0x1c6>
 80096ec:	2300      	movs	r3, #0
 80096ee:	f04f 32ff 	mov.w	r2, #4294967295
 80096f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096f6:	f10a 0a01 	add.w	sl, sl, #1
 80096fa:	9304      	str	r3, [sp, #16]
 80096fc:	9307      	str	r3, [sp, #28]
 80096fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009702:	931a      	str	r3, [sp, #104]	; 0x68
 8009704:	4654      	mov	r4, sl
 8009706:	2205      	movs	r2, #5
 8009708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800970c:	4850      	ldr	r0, [pc, #320]	; (8009850 <_svfiprintf_r+0x1e8>)
 800970e:	f7f6 fd7f 	bl	8000210 <memchr>
 8009712:	9a04      	ldr	r2, [sp, #16]
 8009714:	b9d8      	cbnz	r0, 800974e <_svfiprintf_r+0xe6>
 8009716:	06d0      	lsls	r0, r2, #27
 8009718:	bf44      	itt	mi
 800971a:	2320      	movmi	r3, #32
 800971c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009720:	0711      	lsls	r1, r2, #28
 8009722:	bf44      	itt	mi
 8009724:	232b      	movmi	r3, #43	; 0x2b
 8009726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800972a:	f89a 3000 	ldrb.w	r3, [sl]
 800972e:	2b2a      	cmp	r3, #42	; 0x2a
 8009730:	d015      	beq.n	800975e <_svfiprintf_r+0xf6>
 8009732:	9a07      	ldr	r2, [sp, #28]
 8009734:	4654      	mov	r4, sl
 8009736:	2000      	movs	r0, #0
 8009738:	f04f 0c0a 	mov.w	ip, #10
 800973c:	4621      	mov	r1, r4
 800973e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009742:	3b30      	subs	r3, #48	; 0x30
 8009744:	2b09      	cmp	r3, #9
 8009746:	d94d      	bls.n	80097e4 <_svfiprintf_r+0x17c>
 8009748:	b1b0      	cbz	r0, 8009778 <_svfiprintf_r+0x110>
 800974a:	9207      	str	r2, [sp, #28]
 800974c:	e014      	b.n	8009778 <_svfiprintf_r+0x110>
 800974e:	eba0 0308 	sub.w	r3, r0, r8
 8009752:	fa09 f303 	lsl.w	r3, r9, r3
 8009756:	4313      	orrs	r3, r2
 8009758:	9304      	str	r3, [sp, #16]
 800975a:	46a2      	mov	sl, r4
 800975c:	e7d2      	b.n	8009704 <_svfiprintf_r+0x9c>
 800975e:	9b03      	ldr	r3, [sp, #12]
 8009760:	1d19      	adds	r1, r3, #4
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	9103      	str	r1, [sp, #12]
 8009766:	2b00      	cmp	r3, #0
 8009768:	bfbb      	ittet	lt
 800976a:	425b      	neglt	r3, r3
 800976c:	f042 0202 	orrlt.w	r2, r2, #2
 8009770:	9307      	strge	r3, [sp, #28]
 8009772:	9307      	strlt	r3, [sp, #28]
 8009774:	bfb8      	it	lt
 8009776:	9204      	strlt	r2, [sp, #16]
 8009778:	7823      	ldrb	r3, [r4, #0]
 800977a:	2b2e      	cmp	r3, #46	; 0x2e
 800977c:	d10c      	bne.n	8009798 <_svfiprintf_r+0x130>
 800977e:	7863      	ldrb	r3, [r4, #1]
 8009780:	2b2a      	cmp	r3, #42	; 0x2a
 8009782:	d134      	bne.n	80097ee <_svfiprintf_r+0x186>
 8009784:	9b03      	ldr	r3, [sp, #12]
 8009786:	1d1a      	adds	r2, r3, #4
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	9203      	str	r2, [sp, #12]
 800978c:	2b00      	cmp	r3, #0
 800978e:	bfb8      	it	lt
 8009790:	f04f 33ff 	movlt.w	r3, #4294967295
 8009794:	3402      	adds	r4, #2
 8009796:	9305      	str	r3, [sp, #20]
 8009798:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009860 <_svfiprintf_r+0x1f8>
 800979c:	7821      	ldrb	r1, [r4, #0]
 800979e:	2203      	movs	r2, #3
 80097a0:	4650      	mov	r0, sl
 80097a2:	f7f6 fd35 	bl	8000210 <memchr>
 80097a6:	b138      	cbz	r0, 80097b8 <_svfiprintf_r+0x150>
 80097a8:	9b04      	ldr	r3, [sp, #16]
 80097aa:	eba0 000a 	sub.w	r0, r0, sl
 80097ae:	2240      	movs	r2, #64	; 0x40
 80097b0:	4082      	lsls	r2, r0
 80097b2:	4313      	orrs	r3, r2
 80097b4:	3401      	adds	r4, #1
 80097b6:	9304      	str	r3, [sp, #16]
 80097b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097bc:	4825      	ldr	r0, [pc, #148]	; (8009854 <_svfiprintf_r+0x1ec>)
 80097be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097c2:	2206      	movs	r2, #6
 80097c4:	f7f6 fd24 	bl	8000210 <memchr>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d038      	beq.n	800983e <_svfiprintf_r+0x1d6>
 80097cc:	4b22      	ldr	r3, [pc, #136]	; (8009858 <_svfiprintf_r+0x1f0>)
 80097ce:	bb1b      	cbnz	r3, 8009818 <_svfiprintf_r+0x1b0>
 80097d0:	9b03      	ldr	r3, [sp, #12]
 80097d2:	3307      	adds	r3, #7
 80097d4:	f023 0307 	bic.w	r3, r3, #7
 80097d8:	3308      	adds	r3, #8
 80097da:	9303      	str	r3, [sp, #12]
 80097dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097de:	4433      	add	r3, r6
 80097e0:	9309      	str	r3, [sp, #36]	; 0x24
 80097e2:	e768      	b.n	80096b6 <_svfiprintf_r+0x4e>
 80097e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80097e8:	460c      	mov	r4, r1
 80097ea:	2001      	movs	r0, #1
 80097ec:	e7a6      	b.n	800973c <_svfiprintf_r+0xd4>
 80097ee:	2300      	movs	r3, #0
 80097f0:	3401      	adds	r4, #1
 80097f2:	9305      	str	r3, [sp, #20]
 80097f4:	4619      	mov	r1, r3
 80097f6:	f04f 0c0a 	mov.w	ip, #10
 80097fa:	4620      	mov	r0, r4
 80097fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009800:	3a30      	subs	r2, #48	; 0x30
 8009802:	2a09      	cmp	r2, #9
 8009804:	d903      	bls.n	800980e <_svfiprintf_r+0x1a6>
 8009806:	2b00      	cmp	r3, #0
 8009808:	d0c6      	beq.n	8009798 <_svfiprintf_r+0x130>
 800980a:	9105      	str	r1, [sp, #20]
 800980c:	e7c4      	b.n	8009798 <_svfiprintf_r+0x130>
 800980e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009812:	4604      	mov	r4, r0
 8009814:	2301      	movs	r3, #1
 8009816:	e7f0      	b.n	80097fa <_svfiprintf_r+0x192>
 8009818:	ab03      	add	r3, sp, #12
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	462a      	mov	r2, r5
 800981e:	4b0f      	ldr	r3, [pc, #60]	; (800985c <_svfiprintf_r+0x1f4>)
 8009820:	a904      	add	r1, sp, #16
 8009822:	4638      	mov	r0, r7
 8009824:	f7fd fe62 	bl	80074ec <_printf_float>
 8009828:	1c42      	adds	r2, r0, #1
 800982a:	4606      	mov	r6, r0
 800982c:	d1d6      	bne.n	80097dc <_svfiprintf_r+0x174>
 800982e:	89ab      	ldrh	r3, [r5, #12]
 8009830:	065b      	lsls	r3, r3, #25
 8009832:	f53f af2d 	bmi.w	8009690 <_svfiprintf_r+0x28>
 8009836:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009838:	b01d      	add	sp, #116	; 0x74
 800983a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800983e:	ab03      	add	r3, sp, #12
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	462a      	mov	r2, r5
 8009844:	4b05      	ldr	r3, [pc, #20]	; (800985c <_svfiprintf_r+0x1f4>)
 8009846:	a904      	add	r1, sp, #16
 8009848:	4638      	mov	r0, r7
 800984a:	f7fe f8f3 	bl	8007a34 <_printf_i>
 800984e:	e7eb      	b.n	8009828 <_svfiprintf_r+0x1c0>
 8009850:	0800a344 	.word	0x0800a344
 8009854:	0800a34e 	.word	0x0800a34e
 8009858:	080074ed 	.word	0x080074ed
 800985c:	080095b5 	.word	0x080095b5
 8009860:	0800a34a 	.word	0x0800a34a

08009864 <__sflush_r>:
 8009864:	898a      	ldrh	r2, [r1, #12]
 8009866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800986a:	4605      	mov	r5, r0
 800986c:	0710      	lsls	r0, r2, #28
 800986e:	460c      	mov	r4, r1
 8009870:	d458      	bmi.n	8009924 <__sflush_r+0xc0>
 8009872:	684b      	ldr	r3, [r1, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	dc05      	bgt.n	8009884 <__sflush_r+0x20>
 8009878:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800987a:	2b00      	cmp	r3, #0
 800987c:	dc02      	bgt.n	8009884 <__sflush_r+0x20>
 800987e:	2000      	movs	r0, #0
 8009880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009886:	2e00      	cmp	r6, #0
 8009888:	d0f9      	beq.n	800987e <__sflush_r+0x1a>
 800988a:	2300      	movs	r3, #0
 800988c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009890:	682f      	ldr	r7, [r5, #0]
 8009892:	6a21      	ldr	r1, [r4, #32]
 8009894:	602b      	str	r3, [r5, #0]
 8009896:	d032      	beq.n	80098fe <__sflush_r+0x9a>
 8009898:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800989a:	89a3      	ldrh	r3, [r4, #12]
 800989c:	075a      	lsls	r2, r3, #29
 800989e:	d505      	bpl.n	80098ac <__sflush_r+0x48>
 80098a0:	6863      	ldr	r3, [r4, #4]
 80098a2:	1ac0      	subs	r0, r0, r3
 80098a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098a6:	b10b      	cbz	r3, 80098ac <__sflush_r+0x48>
 80098a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098aa:	1ac0      	subs	r0, r0, r3
 80098ac:	2300      	movs	r3, #0
 80098ae:	4602      	mov	r2, r0
 80098b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098b2:	6a21      	ldr	r1, [r4, #32]
 80098b4:	4628      	mov	r0, r5
 80098b6:	47b0      	blx	r6
 80098b8:	1c43      	adds	r3, r0, #1
 80098ba:	89a3      	ldrh	r3, [r4, #12]
 80098bc:	d106      	bne.n	80098cc <__sflush_r+0x68>
 80098be:	6829      	ldr	r1, [r5, #0]
 80098c0:	291d      	cmp	r1, #29
 80098c2:	d82b      	bhi.n	800991c <__sflush_r+0xb8>
 80098c4:	4a29      	ldr	r2, [pc, #164]	; (800996c <__sflush_r+0x108>)
 80098c6:	410a      	asrs	r2, r1
 80098c8:	07d6      	lsls	r6, r2, #31
 80098ca:	d427      	bmi.n	800991c <__sflush_r+0xb8>
 80098cc:	2200      	movs	r2, #0
 80098ce:	6062      	str	r2, [r4, #4]
 80098d0:	04d9      	lsls	r1, r3, #19
 80098d2:	6922      	ldr	r2, [r4, #16]
 80098d4:	6022      	str	r2, [r4, #0]
 80098d6:	d504      	bpl.n	80098e2 <__sflush_r+0x7e>
 80098d8:	1c42      	adds	r2, r0, #1
 80098da:	d101      	bne.n	80098e0 <__sflush_r+0x7c>
 80098dc:	682b      	ldr	r3, [r5, #0]
 80098de:	b903      	cbnz	r3, 80098e2 <__sflush_r+0x7e>
 80098e0:	6560      	str	r0, [r4, #84]	; 0x54
 80098e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098e4:	602f      	str	r7, [r5, #0]
 80098e6:	2900      	cmp	r1, #0
 80098e8:	d0c9      	beq.n	800987e <__sflush_r+0x1a>
 80098ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098ee:	4299      	cmp	r1, r3
 80098f0:	d002      	beq.n	80098f8 <__sflush_r+0x94>
 80098f2:	4628      	mov	r0, r5
 80098f4:	f7ff f9e2 	bl	8008cbc <_free_r>
 80098f8:	2000      	movs	r0, #0
 80098fa:	6360      	str	r0, [r4, #52]	; 0x34
 80098fc:	e7c0      	b.n	8009880 <__sflush_r+0x1c>
 80098fe:	2301      	movs	r3, #1
 8009900:	4628      	mov	r0, r5
 8009902:	47b0      	blx	r6
 8009904:	1c41      	adds	r1, r0, #1
 8009906:	d1c8      	bne.n	800989a <__sflush_r+0x36>
 8009908:	682b      	ldr	r3, [r5, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d0c5      	beq.n	800989a <__sflush_r+0x36>
 800990e:	2b1d      	cmp	r3, #29
 8009910:	d001      	beq.n	8009916 <__sflush_r+0xb2>
 8009912:	2b16      	cmp	r3, #22
 8009914:	d101      	bne.n	800991a <__sflush_r+0xb6>
 8009916:	602f      	str	r7, [r5, #0]
 8009918:	e7b1      	b.n	800987e <__sflush_r+0x1a>
 800991a:	89a3      	ldrh	r3, [r4, #12]
 800991c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009920:	81a3      	strh	r3, [r4, #12]
 8009922:	e7ad      	b.n	8009880 <__sflush_r+0x1c>
 8009924:	690f      	ldr	r7, [r1, #16]
 8009926:	2f00      	cmp	r7, #0
 8009928:	d0a9      	beq.n	800987e <__sflush_r+0x1a>
 800992a:	0793      	lsls	r3, r2, #30
 800992c:	680e      	ldr	r6, [r1, #0]
 800992e:	bf08      	it	eq
 8009930:	694b      	ldreq	r3, [r1, #20]
 8009932:	600f      	str	r7, [r1, #0]
 8009934:	bf18      	it	ne
 8009936:	2300      	movne	r3, #0
 8009938:	eba6 0807 	sub.w	r8, r6, r7
 800993c:	608b      	str	r3, [r1, #8]
 800993e:	f1b8 0f00 	cmp.w	r8, #0
 8009942:	dd9c      	ble.n	800987e <__sflush_r+0x1a>
 8009944:	6a21      	ldr	r1, [r4, #32]
 8009946:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009948:	4643      	mov	r3, r8
 800994a:	463a      	mov	r2, r7
 800994c:	4628      	mov	r0, r5
 800994e:	47b0      	blx	r6
 8009950:	2800      	cmp	r0, #0
 8009952:	dc06      	bgt.n	8009962 <__sflush_r+0xfe>
 8009954:	89a3      	ldrh	r3, [r4, #12]
 8009956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800995a:	81a3      	strh	r3, [r4, #12]
 800995c:	f04f 30ff 	mov.w	r0, #4294967295
 8009960:	e78e      	b.n	8009880 <__sflush_r+0x1c>
 8009962:	4407      	add	r7, r0
 8009964:	eba8 0800 	sub.w	r8, r8, r0
 8009968:	e7e9      	b.n	800993e <__sflush_r+0xda>
 800996a:	bf00      	nop
 800996c:	dfbffffe 	.word	0xdfbffffe

08009970 <_fflush_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	690b      	ldr	r3, [r1, #16]
 8009974:	4605      	mov	r5, r0
 8009976:	460c      	mov	r4, r1
 8009978:	b913      	cbnz	r3, 8009980 <_fflush_r+0x10>
 800997a:	2500      	movs	r5, #0
 800997c:	4628      	mov	r0, r5
 800997e:	bd38      	pop	{r3, r4, r5, pc}
 8009980:	b118      	cbz	r0, 800998a <_fflush_r+0x1a>
 8009982:	6a03      	ldr	r3, [r0, #32]
 8009984:	b90b      	cbnz	r3, 800998a <_fflush_r+0x1a>
 8009986:	f7fe fa03 	bl	8007d90 <__sinit>
 800998a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d0f3      	beq.n	800997a <_fflush_r+0xa>
 8009992:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009994:	07d0      	lsls	r0, r2, #31
 8009996:	d404      	bmi.n	80099a2 <_fflush_r+0x32>
 8009998:	0599      	lsls	r1, r3, #22
 800999a:	d402      	bmi.n	80099a2 <_fflush_r+0x32>
 800999c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800999e:	f7fe fb0e 	bl	8007fbe <__retarget_lock_acquire_recursive>
 80099a2:	4628      	mov	r0, r5
 80099a4:	4621      	mov	r1, r4
 80099a6:	f7ff ff5d 	bl	8009864 <__sflush_r>
 80099aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099ac:	07da      	lsls	r2, r3, #31
 80099ae:	4605      	mov	r5, r0
 80099b0:	d4e4      	bmi.n	800997c <_fflush_r+0xc>
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	059b      	lsls	r3, r3, #22
 80099b6:	d4e1      	bmi.n	800997c <_fflush_r+0xc>
 80099b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ba:	f7fe fb01 	bl	8007fc0 <__retarget_lock_release_recursive>
 80099be:	e7dd      	b.n	800997c <_fflush_r+0xc>

080099c0 <memmove>:
 80099c0:	4288      	cmp	r0, r1
 80099c2:	b510      	push	{r4, lr}
 80099c4:	eb01 0402 	add.w	r4, r1, r2
 80099c8:	d902      	bls.n	80099d0 <memmove+0x10>
 80099ca:	4284      	cmp	r4, r0
 80099cc:	4623      	mov	r3, r4
 80099ce:	d807      	bhi.n	80099e0 <memmove+0x20>
 80099d0:	1e43      	subs	r3, r0, #1
 80099d2:	42a1      	cmp	r1, r4
 80099d4:	d008      	beq.n	80099e8 <memmove+0x28>
 80099d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099de:	e7f8      	b.n	80099d2 <memmove+0x12>
 80099e0:	4402      	add	r2, r0
 80099e2:	4601      	mov	r1, r0
 80099e4:	428a      	cmp	r2, r1
 80099e6:	d100      	bne.n	80099ea <memmove+0x2a>
 80099e8:	bd10      	pop	{r4, pc}
 80099ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099f2:	e7f7      	b.n	80099e4 <memmove+0x24>

080099f4 <_sbrk_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	4d06      	ldr	r5, [pc, #24]	; (8009a10 <_sbrk_r+0x1c>)
 80099f8:	2300      	movs	r3, #0
 80099fa:	4604      	mov	r4, r0
 80099fc:	4608      	mov	r0, r1
 80099fe:	602b      	str	r3, [r5, #0]
 8009a00:	f7f8 ffd6 	bl	80029b0 <_sbrk>
 8009a04:	1c43      	adds	r3, r0, #1
 8009a06:	d102      	bne.n	8009a0e <_sbrk_r+0x1a>
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	b103      	cbz	r3, 8009a0e <_sbrk_r+0x1a>
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	bd38      	pop	{r3, r4, r5, pc}
 8009a10:	200009ec 	.word	0x200009ec

08009a14 <memcpy>:
 8009a14:	440a      	add	r2, r1
 8009a16:	4291      	cmp	r1, r2
 8009a18:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a1c:	d100      	bne.n	8009a20 <memcpy+0xc>
 8009a1e:	4770      	bx	lr
 8009a20:	b510      	push	{r4, lr}
 8009a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a2a:	4291      	cmp	r1, r2
 8009a2c:	d1f9      	bne.n	8009a22 <memcpy+0xe>
 8009a2e:	bd10      	pop	{r4, pc}

08009a30 <__assert_func>:
 8009a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a32:	4614      	mov	r4, r2
 8009a34:	461a      	mov	r2, r3
 8009a36:	4b09      	ldr	r3, [pc, #36]	; (8009a5c <__assert_func+0x2c>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4605      	mov	r5, r0
 8009a3c:	68d8      	ldr	r0, [r3, #12]
 8009a3e:	b14c      	cbz	r4, 8009a54 <__assert_func+0x24>
 8009a40:	4b07      	ldr	r3, [pc, #28]	; (8009a60 <__assert_func+0x30>)
 8009a42:	9100      	str	r1, [sp, #0]
 8009a44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a48:	4906      	ldr	r1, [pc, #24]	; (8009a64 <__assert_func+0x34>)
 8009a4a:	462b      	mov	r3, r5
 8009a4c:	f000 f872 	bl	8009b34 <fiprintf>
 8009a50:	f000 f882 	bl	8009b58 <abort>
 8009a54:	4b04      	ldr	r3, [pc, #16]	; (8009a68 <__assert_func+0x38>)
 8009a56:	461c      	mov	r4, r3
 8009a58:	e7f3      	b.n	8009a42 <__assert_func+0x12>
 8009a5a:	bf00      	nop
 8009a5c:	2000006c 	.word	0x2000006c
 8009a60:	0800a35f 	.word	0x0800a35f
 8009a64:	0800a36c 	.word	0x0800a36c
 8009a68:	0800a39a 	.word	0x0800a39a

08009a6c <_calloc_r>:
 8009a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a6e:	fba1 2402 	umull	r2, r4, r1, r2
 8009a72:	b94c      	cbnz	r4, 8009a88 <_calloc_r+0x1c>
 8009a74:	4611      	mov	r1, r2
 8009a76:	9201      	str	r2, [sp, #4]
 8009a78:	f7ff f994 	bl	8008da4 <_malloc_r>
 8009a7c:	9a01      	ldr	r2, [sp, #4]
 8009a7e:	4605      	mov	r5, r0
 8009a80:	b930      	cbnz	r0, 8009a90 <_calloc_r+0x24>
 8009a82:	4628      	mov	r0, r5
 8009a84:	b003      	add	sp, #12
 8009a86:	bd30      	pop	{r4, r5, pc}
 8009a88:	220c      	movs	r2, #12
 8009a8a:	6002      	str	r2, [r0, #0]
 8009a8c:	2500      	movs	r5, #0
 8009a8e:	e7f8      	b.n	8009a82 <_calloc_r+0x16>
 8009a90:	4621      	mov	r1, r4
 8009a92:	f7fe fa16 	bl	8007ec2 <memset>
 8009a96:	e7f4      	b.n	8009a82 <_calloc_r+0x16>

08009a98 <__ascii_mbtowc>:
 8009a98:	b082      	sub	sp, #8
 8009a9a:	b901      	cbnz	r1, 8009a9e <__ascii_mbtowc+0x6>
 8009a9c:	a901      	add	r1, sp, #4
 8009a9e:	b142      	cbz	r2, 8009ab2 <__ascii_mbtowc+0x1a>
 8009aa0:	b14b      	cbz	r3, 8009ab6 <__ascii_mbtowc+0x1e>
 8009aa2:	7813      	ldrb	r3, [r2, #0]
 8009aa4:	600b      	str	r3, [r1, #0]
 8009aa6:	7812      	ldrb	r2, [r2, #0]
 8009aa8:	1e10      	subs	r0, r2, #0
 8009aaa:	bf18      	it	ne
 8009aac:	2001      	movne	r0, #1
 8009aae:	b002      	add	sp, #8
 8009ab0:	4770      	bx	lr
 8009ab2:	4610      	mov	r0, r2
 8009ab4:	e7fb      	b.n	8009aae <__ascii_mbtowc+0x16>
 8009ab6:	f06f 0001 	mvn.w	r0, #1
 8009aba:	e7f8      	b.n	8009aae <__ascii_mbtowc+0x16>

08009abc <_realloc_r>:
 8009abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac0:	4680      	mov	r8, r0
 8009ac2:	4614      	mov	r4, r2
 8009ac4:	460e      	mov	r6, r1
 8009ac6:	b921      	cbnz	r1, 8009ad2 <_realloc_r+0x16>
 8009ac8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009acc:	4611      	mov	r1, r2
 8009ace:	f7ff b969 	b.w	8008da4 <_malloc_r>
 8009ad2:	b92a      	cbnz	r2, 8009ae0 <_realloc_r+0x24>
 8009ad4:	f7ff f8f2 	bl	8008cbc <_free_r>
 8009ad8:	4625      	mov	r5, r4
 8009ada:	4628      	mov	r0, r5
 8009adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae0:	f000 f841 	bl	8009b66 <_malloc_usable_size_r>
 8009ae4:	4284      	cmp	r4, r0
 8009ae6:	4607      	mov	r7, r0
 8009ae8:	d802      	bhi.n	8009af0 <_realloc_r+0x34>
 8009aea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009aee:	d812      	bhi.n	8009b16 <_realloc_r+0x5a>
 8009af0:	4621      	mov	r1, r4
 8009af2:	4640      	mov	r0, r8
 8009af4:	f7ff f956 	bl	8008da4 <_malloc_r>
 8009af8:	4605      	mov	r5, r0
 8009afa:	2800      	cmp	r0, #0
 8009afc:	d0ed      	beq.n	8009ada <_realloc_r+0x1e>
 8009afe:	42bc      	cmp	r4, r7
 8009b00:	4622      	mov	r2, r4
 8009b02:	4631      	mov	r1, r6
 8009b04:	bf28      	it	cs
 8009b06:	463a      	movcs	r2, r7
 8009b08:	f7ff ff84 	bl	8009a14 <memcpy>
 8009b0c:	4631      	mov	r1, r6
 8009b0e:	4640      	mov	r0, r8
 8009b10:	f7ff f8d4 	bl	8008cbc <_free_r>
 8009b14:	e7e1      	b.n	8009ada <_realloc_r+0x1e>
 8009b16:	4635      	mov	r5, r6
 8009b18:	e7df      	b.n	8009ada <_realloc_r+0x1e>

08009b1a <__ascii_wctomb>:
 8009b1a:	b149      	cbz	r1, 8009b30 <__ascii_wctomb+0x16>
 8009b1c:	2aff      	cmp	r2, #255	; 0xff
 8009b1e:	bf85      	ittet	hi
 8009b20:	238a      	movhi	r3, #138	; 0x8a
 8009b22:	6003      	strhi	r3, [r0, #0]
 8009b24:	700a      	strbls	r2, [r1, #0]
 8009b26:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b2a:	bf98      	it	ls
 8009b2c:	2001      	movls	r0, #1
 8009b2e:	4770      	bx	lr
 8009b30:	4608      	mov	r0, r1
 8009b32:	4770      	bx	lr

08009b34 <fiprintf>:
 8009b34:	b40e      	push	{r1, r2, r3}
 8009b36:	b503      	push	{r0, r1, lr}
 8009b38:	4601      	mov	r1, r0
 8009b3a:	ab03      	add	r3, sp, #12
 8009b3c:	4805      	ldr	r0, [pc, #20]	; (8009b54 <fiprintf+0x20>)
 8009b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b42:	6800      	ldr	r0, [r0, #0]
 8009b44:	9301      	str	r3, [sp, #4]
 8009b46:	f000 f83f 	bl	8009bc8 <_vfiprintf_r>
 8009b4a:	b002      	add	sp, #8
 8009b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b50:	b003      	add	sp, #12
 8009b52:	4770      	bx	lr
 8009b54:	2000006c 	.word	0x2000006c

08009b58 <abort>:
 8009b58:	b508      	push	{r3, lr}
 8009b5a:	2006      	movs	r0, #6
 8009b5c:	f000 fa0c 	bl	8009f78 <raise>
 8009b60:	2001      	movs	r0, #1
 8009b62:	f7f8 fead 	bl	80028c0 <_exit>

08009b66 <_malloc_usable_size_r>:
 8009b66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b6a:	1f18      	subs	r0, r3, #4
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	bfbc      	itt	lt
 8009b70:	580b      	ldrlt	r3, [r1, r0]
 8009b72:	18c0      	addlt	r0, r0, r3
 8009b74:	4770      	bx	lr

08009b76 <__sfputc_r>:
 8009b76:	6893      	ldr	r3, [r2, #8]
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	b410      	push	{r4}
 8009b7e:	6093      	str	r3, [r2, #8]
 8009b80:	da08      	bge.n	8009b94 <__sfputc_r+0x1e>
 8009b82:	6994      	ldr	r4, [r2, #24]
 8009b84:	42a3      	cmp	r3, r4
 8009b86:	db01      	blt.n	8009b8c <__sfputc_r+0x16>
 8009b88:	290a      	cmp	r1, #10
 8009b8a:	d103      	bne.n	8009b94 <__sfputc_r+0x1e>
 8009b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b90:	f000 b934 	b.w	8009dfc <__swbuf_r>
 8009b94:	6813      	ldr	r3, [r2, #0]
 8009b96:	1c58      	adds	r0, r3, #1
 8009b98:	6010      	str	r0, [r2, #0]
 8009b9a:	7019      	strb	r1, [r3, #0]
 8009b9c:	4608      	mov	r0, r1
 8009b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <__sfputs_r>:
 8009ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	460f      	mov	r7, r1
 8009baa:	4614      	mov	r4, r2
 8009bac:	18d5      	adds	r5, r2, r3
 8009bae:	42ac      	cmp	r4, r5
 8009bb0:	d101      	bne.n	8009bb6 <__sfputs_r+0x12>
 8009bb2:	2000      	movs	r0, #0
 8009bb4:	e007      	b.n	8009bc6 <__sfputs_r+0x22>
 8009bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bba:	463a      	mov	r2, r7
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	f7ff ffda 	bl	8009b76 <__sfputc_r>
 8009bc2:	1c43      	adds	r3, r0, #1
 8009bc4:	d1f3      	bne.n	8009bae <__sfputs_r+0xa>
 8009bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009bc8 <_vfiprintf_r>:
 8009bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bcc:	460d      	mov	r5, r1
 8009bce:	b09d      	sub	sp, #116	; 0x74
 8009bd0:	4614      	mov	r4, r2
 8009bd2:	4698      	mov	r8, r3
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	b118      	cbz	r0, 8009be0 <_vfiprintf_r+0x18>
 8009bd8:	6a03      	ldr	r3, [r0, #32]
 8009bda:	b90b      	cbnz	r3, 8009be0 <_vfiprintf_r+0x18>
 8009bdc:	f7fe f8d8 	bl	8007d90 <__sinit>
 8009be0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009be2:	07d9      	lsls	r1, r3, #31
 8009be4:	d405      	bmi.n	8009bf2 <_vfiprintf_r+0x2a>
 8009be6:	89ab      	ldrh	r3, [r5, #12]
 8009be8:	059a      	lsls	r2, r3, #22
 8009bea:	d402      	bmi.n	8009bf2 <_vfiprintf_r+0x2a>
 8009bec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bee:	f7fe f9e6 	bl	8007fbe <__retarget_lock_acquire_recursive>
 8009bf2:	89ab      	ldrh	r3, [r5, #12]
 8009bf4:	071b      	lsls	r3, r3, #28
 8009bf6:	d501      	bpl.n	8009bfc <_vfiprintf_r+0x34>
 8009bf8:	692b      	ldr	r3, [r5, #16]
 8009bfa:	b99b      	cbnz	r3, 8009c24 <_vfiprintf_r+0x5c>
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	4630      	mov	r0, r6
 8009c00:	f000 f93a 	bl	8009e78 <__swsetup_r>
 8009c04:	b170      	cbz	r0, 8009c24 <_vfiprintf_r+0x5c>
 8009c06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c08:	07dc      	lsls	r4, r3, #31
 8009c0a:	d504      	bpl.n	8009c16 <_vfiprintf_r+0x4e>
 8009c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c10:	b01d      	add	sp, #116	; 0x74
 8009c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c16:	89ab      	ldrh	r3, [r5, #12]
 8009c18:	0598      	lsls	r0, r3, #22
 8009c1a:	d4f7      	bmi.n	8009c0c <_vfiprintf_r+0x44>
 8009c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c1e:	f7fe f9cf 	bl	8007fc0 <__retarget_lock_release_recursive>
 8009c22:	e7f3      	b.n	8009c0c <_vfiprintf_r+0x44>
 8009c24:	2300      	movs	r3, #0
 8009c26:	9309      	str	r3, [sp, #36]	; 0x24
 8009c28:	2320      	movs	r3, #32
 8009c2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c32:	2330      	movs	r3, #48	; 0x30
 8009c34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009de8 <_vfiprintf_r+0x220>
 8009c38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c3c:	f04f 0901 	mov.w	r9, #1
 8009c40:	4623      	mov	r3, r4
 8009c42:	469a      	mov	sl, r3
 8009c44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c48:	b10a      	cbz	r2, 8009c4e <_vfiprintf_r+0x86>
 8009c4a:	2a25      	cmp	r2, #37	; 0x25
 8009c4c:	d1f9      	bne.n	8009c42 <_vfiprintf_r+0x7a>
 8009c4e:	ebba 0b04 	subs.w	fp, sl, r4
 8009c52:	d00b      	beq.n	8009c6c <_vfiprintf_r+0xa4>
 8009c54:	465b      	mov	r3, fp
 8009c56:	4622      	mov	r2, r4
 8009c58:	4629      	mov	r1, r5
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f7ff ffa2 	bl	8009ba4 <__sfputs_r>
 8009c60:	3001      	adds	r0, #1
 8009c62:	f000 80a9 	beq.w	8009db8 <_vfiprintf_r+0x1f0>
 8009c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c68:	445a      	add	r2, fp
 8009c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8009c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f000 80a1 	beq.w	8009db8 <_vfiprintf_r+0x1f0>
 8009c76:	2300      	movs	r3, #0
 8009c78:	f04f 32ff 	mov.w	r2, #4294967295
 8009c7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c80:	f10a 0a01 	add.w	sl, sl, #1
 8009c84:	9304      	str	r3, [sp, #16]
 8009c86:	9307      	str	r3, [sp, #28]
 8009c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8009c8e:	4654      	mov	r4, sl
 8009c90:	2205      	movs	r2, #5
 8009c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c96:	4854      	ldr	r0, [pc, #336]	; (8009de8 <_vfiprintf_r+0x220>)
 8009c98:	f7f6 faba 	bl	8000210 <memchr>
 8009c9c:	9a04      	ldr	r2, [sp, #16]
 8009c9e:	b9d8      	cbnz	r0, 8009cd8 <_vfiprintf_r+0x110>
 8009ca0:	06d1      	lsls	r1, r2, #27
 8009ca2:	bf44      	itt	mi
 8009ca4:	2320      	movmi	r3, #32
 8009ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009caa:	0713      	lsls	r3, r2, #28
 8009cac:	bf44      	itt	mi
 8009cae:	232b      	movmi	r3, #43	; 0x2b
 8009cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8009cba:	d015      	beq.n	8009ce8 <_vfiprintf_r+0x120>
 8009cbc:	9a07      	ldr	r2, [sp, #28]
 8009cbe:	4654      	mov	r4, sl
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	f04f 0c0a 	mov.w	ip, #10
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ccc:	3b30      	subs	r3, #48	; 0x30
 8009cce:	2b09      	cmp	r3, #9
 8009cd0:	d94d      	bls.n	8009d6e <_vfiprintf_r+0x1a6>
 8009cd2:	b1b0      	cbz	r0, 8009d02 <_vfiprintf_r+0x13a>
 8009cd4:	9207      	str	r2, [sp, #28]
 8009cd6:	e014      	b.n	8009d02 <_vfiprintf_r+0x13a>
 8009cd8:	eba0 0308 	sub.w	r3, r0, r8
 8009cdc:	fa09 f303 	lsl.w	r3, r9, r3
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	9304      	str	r3, [sp, #16]
 8009ce4:	46a2      	mov	sl, r4
 8009ce6:	e7d2      	b.n	8009c8e <_vfiprintf_r+0xc6>
 8009ce8:	9b03      	ldr	r3, [sp, #12]
 8009cea:	1d19      	adds	r1, r3, #4
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	9103      	str	r1, [sp, #12]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	bfbb      	ittet	lt
 8009cf4:	425b      	neglt	r3, r3
 8009cf6:	f042 0202 	orrlt.w	r2, r2, #2
 8009cfa:	9307      	strge	r3, [sp, #28]
 8009cfc:	9307      	strlt	r3, [sp, #28]
 8009cfe:	bfb8      	it	lt
 8009d00:	9204      	strlt	r2, [sp, #16]
 8009d02:	7823      	ldrb	r3, [r4, #0]
 8009d04:	2b2e      	cmp	r3, #46	; 0x2e
 8009d06:	d10c      	bne.n	8009d22 <_vfiprintf_r+0x15a>
 8009d08:	7863      	ldrb	r3, [r4, #1]
 8009d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d0c:	d134      	bne.n	8009d78 <_vfiprintf_r+0x1b0>
 8009d0e:	9b03      	ldr	r3, [sp, #12]
 8009d10:	1d1a      	adds	r2, r3, #4
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	9203      	str	r2, [sp, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	bfb8      	it	lt
 8009d1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d1e:	3402      	adds	r4, #2
 8009d20:	9305      	str	r3, [sp, #20]
 8009d22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009df8 <_vfiprintf_r+0x230>
 8009d26:	7821      	ldrb	r1, [r4, #0]
 8009d28:	2203      	movs	r2, #3
 8009d2a:	4650      	mov	r0, sl
 8009d2c:	f7f6 fa70 	bl	8000210 <memchr>
 8009d30:	b138      	cbz	r0, 8009d42 <_vfiprintf_r+0x17a>
 8009d32:	9b04      	ldr	r3, [sp, #16]
 8009d34:	eba0 000a 	sub.w	r0, r0, sl
 8009d38:	2240      	movs	r2, #64	; 0x40
 8009d3a:	4082      	lsls	r2, r0
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	3401      	adds	r4, #1
 8009d40:	9304      	str	r3, [sp, #16]
 8009d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d46:	4829      	ldr	r0, [pc, #164]	; (8009dec <_vfiprintf_r+0x224>)
 8009d48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d4c:	2206      	movs	r2, #6
 8009d4e:	f7f6 fa5f 	bl	8000210 <memchr>
 8009d52:	2800      	cmp	r0, #0
 8009d54:	d03f      	beq.n	8009dd6 <_vfiprintf_r+0x20e>
 8009d56:	4b26      	ldr	r3, [pc, #152]	; (8009df0 <_vfiprintf_r+0x228>)
 8009d58:	bb1b      	cbnz	r3, 8009da2 <_vfiprintf_r+0x1da>
 8009d5a:	9b03      	ldr	r3, [sp, #12]
 8009d5c:	3307      	adds	r3, #7
 8009d5e:	f023 0307 	bic.w	r3, r3, #7
 8009d62:	3308      	adds	r3, #8
 8009d64:	9303      	str	r3, [sp, #12]
 8009d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d68:	443b      	add	r3, r7
 8009d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d6c:	e768      	b.n	8009c40 <_vfiprintf_r+0x78>
 8009d6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d72:	460c      	mov	r4, r1
 8009d74:	2001      	movs	r0, #1
 8009d76:	e7a6      	b.n	8009cc6 <_vfiprintf_r+0xfe>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	3401      	adds	r4, #1
 8009d7c:	9305      	str	r3, [sp, #20]
 8009d7e:	4619      	mov	r1, r3
 8009d80:	f04f 0c0a 	mov.w	ip, #10
 8009d84:	4620      	mov	r0, r4
 8009d86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d8a:	3a30      	subs	r2, #48	; 0x30
 8009d8c:	2a09      	cmp	r2, #9
 8009d8e:	d903      	bls.n	8009d98 <_vfiprintf_r+0x1d0>
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d0c6      	beq.n	8009d22 <_vfiprintf_r+0x15a>
 8009d94:	9105      	str	r1, [sp, #20]
 8009d96:	e7c4      	b.n	8009d22 <_vfiprintf_r+0x15a>
 8009d98:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d9c:	4604      	mov	r4, r0
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e7f0      	b.n	8009d84 <_vfiprintf_r+0x1bc>
 8009da2:	ab03      	add	r3, sp, #12
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	462a      	mov	r2, r5
 8009da8:	4b12      	ldr	r3, [pc, #72]	; (8009df4 <_vfiprintf_r+0x22c>)
 8009daa:	a904      	add	r1, sp, #16
 8009dac:	4630      	mov	r0, r6
 8009dae:	f7fd fb9d 	bl	80074ec <_printf_float>
 8009db2:	4607      	mov	r7, r0
 8009db4:	1c78      	adds	r0, r7, #1
 8009db6:	d1d6      	bne.n	8009d66 <_vfiprintf_r+0x19e>
 8009db8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dba:	07d9      	lsls	r1, r3, #31
 8009dbc:	d405      	bmi.n	8009dca <_vfiprintf_r+0x202>
 8009dbe:	89ab      	ldrh	r3, [r5, #12]
 8009dc0:	059a      	lsls	r2, r3, #22
 8009dc2:	d402      	bmi.n	8009dca <_vfiprintf_r+0x202>
 8009dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dc6:	f7fe f8fb 	bl	8007fc0 <__retarget_lock_release_recursive>
 8009dca:	89ab      	ldrh	r3, [r5, #12]
 8009dcc:	065b      	lsls	r3, r3, #25
 8009dce:	f53f af1d 	bmi.w	8009c0c <_vfiprintf_r+0x44>
 8009dd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dd4:	e71c      	b.n	8009c10 <_vfiprintf_r+0x48>
 8009dd6:	ab03      	add	r3, sp, #12
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	462a      	mov	r2, r5
 8009ddc:	4b05      	ldr	r3, [pc, #20]	; (8009df4 <_vfiprintf_r+0x22c>)
 8009dde:	a904      	add	r1, sp, #16
 8009de0:	4630      	mov	r0, r6
 8009de2:	f7fd fe27 	bl	8007a34 <_printf_i>
 8009de6:	e7e4      	b.n	8009db2 <_vfiprintf_r+0x1ea>
 8009de8:	0800a344 	.word	0x0800a344
 8009dec:	0800a34e 	.word	0x0800a34e
 8009df0:	080074ed 	.word	0x080074ed
 8009df4:	08009ba5 	.word	0x08009ba5
 8009df8:	0800a34a 	.word	0x0800a34a

08009dfc <__swbuf_r>:
 8009dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfe:	460e      	mov	r6, r1
 8009e00:	4614      	mov	r4, r2
 8009e02:	4605      	mov	r5, r0
 8009e04:	b118      	cbz	r0, 8009e0e <__swbuf_r+0x12>
 8009e06:	6a03      	ldr	r3, [r0, #32]
 8009e08:	b90b      	cbnz	r3, 8009e0e <__swbuf_r+0x12>
 8009e0a:	f7fd ffc1 	bl	8007d90 <__sinit>
 8009e0e:	69a3      	ldr	r3, [r4, #24]
 8009e10:	60a3      	str	r3, [r4, #8]
 8009e12:	89a3      	ldrh	r3, [r4, #12]
 8009e14:	071a      	lsls	r2, r3, #28
 8009e16:	d525      	bpl.n	8009e64 <__swbuf_r+0x68>
 8009e18:	6923      	ldr	r3, [r4, #16]
 8009e1a:	b31b      	cbz	r3, 8009e64 <__swbuf_r+0x68>
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	6922      	ldr	r2, [r4, #16]
 8009e20:	1a98      	subs	r0, r3, r2
 8009e22:	6963      	ldr	r3, [r4, #20]
 8009e24:	b2f6      	uxtb	r6, r6
 8009e26:	4283      	cmp	r3, r0
 8009e28:	4637      	mov	r7, r6
 8009e2a:	dc04      	bgt.n	8009e36 <__swbuf_r+0x3a>
 8009e2c:	4621      	mov	r1, r4
 8009e2e:	4628      	mov	r0, r5
 8009e30:	f7ff fd9e 	bl	8009970 <_fflush_r>
 8009e34:	b9e0      	cbnz	r0, 8009e70 <__swbuf_r+0x74>
 8009e36:	68a3      	ldr	r3, [r4, #8]
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	60a3      	str	r3, [r4, #8]
 8009e3c:	6823      	ldr	r3, [r4, #0]
 8009e3e:	1c5a      	adds	r2, r3, #1
 8009e40:	6022      	str	r2, [r4, #0]
 8009e42:	701e      	strb	r6, [r3, #0]
 8009e44:	6962      	ldr	r2, [r4, #20]
 8009e46:	1c43      	adds	r3, r0, #1
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d004      	beq.n	8009e56 <__swbuf_r+0x5a>
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	07db      	lsls	r3, r3, #31
 8009e50:	d506      	bpl.n	8009e60 <__swbuf_r+0x64>
 8009e52:	2e0a      	cmp	r6, #10
 8009e54:	d104      	bne.n	8009e60 <__swbuf_r+0x64>
 8009e56:	4621      	mov	r1, r4
 8009e58:	4628      	mov	r0, r5
 8009e5a:	f7ff fd89 	bl	8009970 <_fflush_r>
 8009e5e:	b938      	cbnz	r0, 8009e70 <__swbuf_r+0x74>
 8009e60:	4638      	mov	r0, r7
 8009e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e64:	4621      	mov	r1, r4
 8009e66:	4628      	mov	r0, r5
 8009e68:	f000 f806 	bl	8009e78 <__swsetup_r>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d0d5      	beq.n	8009e1c <__swbuf_r+0x20>
 8009e70:	f04f 37ff 	mov.w	r7, #4294967295
 8009e74:	e7f4      	b.n	8009e60 <__swbuf_r+0x64>
	...

08009e78 <__swsetup_r>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	4b2a      	ldr	r3, [pc, #168]	; (8009f24 <__swsetup_r+0xac>)
 8009e7c:	4605      	mov	r5, r0
 8009e7e:	6818      	ldr	r0, [r3, #0]
 8009e80:	460c      	mov	r4, r1
 8009e82:	b118      	cbz	r0, 8009e8c <__swsetup_r+0x14>
 8009e84:	6a03      	ldr	r3, [r0, #32]
 8009e86:	b90b      	cbnz	r3, 8009e8c <__swsetup_r+0x14>
 8009e88:	f7fd ff82 	bl	8007d90 <__sinit>
 8009e8c:	89a3      	ldrh	r3, [r4, #12]
 8009e8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e92:	0718      	lsls	r0, r3, #28
 8009e94:	d422      	bmi.n	8009edc <__swsetup_r+0x64>
 8009e96:	06d9      	lsls	r1, r3, #27
 8009e98:	d407      	bmi.n	8009eaa <__swsetup_r+0x32>
 8009e9a:	2309      	movs	r3, #9
 8009e9c:	602b      	str	r3, [r5, #0]
 8009e9e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ea2:	81a3      	strh	r3, [r4, #12]
 8009ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea8:	e034      	b.n	8009f14 <__swsetup_r+0x9c>
 8009eaa:	0758      	lsls	r0, r3, #29
 8009eac:	d512      	bpl.n	8009ed4 <__swsetup_r+0x5c>
 8009eae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009eb0:	b141      	cbz	r1, 8009ec4 <__swsetup_r+0x4c>
 8009eb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009eb6:	4299      	cmp	r1, r3
 8009eb8:	d002      	beq.n	8009ec0 <__swsetup_r+0x48>
 8009eba:	4628      	mov	r0, r5
 8009ebc:	f7fe fefe 	bl	8008cbc <_free_r>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	6363      	str	r3, [r4, #52]	; 0x34
 8009ec4:	89a3      	ldrh	r3, [r4, #12]
 8009ec6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009eca:	81a3      	strh	r3, [r4, #12]
 8009ecc:	2300      	movs	r3, #0
 8009ece:	6063      	str	r3, [r4, #4]
 8009ed0:	6923      	ldr	r3, [r4, #16]
 8009ed2:	6023      	str	r3, [r4, #0]
 8009ed4:	89a3      	ldrh	r3, [r4, #12]
 8009ed6:	f043 0308 	orr.w	r3, r3, #8
 8009eda:	81a3      	strh	r3, [r4, #12]
 8009edc:	6923      	ldr	r3, [r4, #16]
 8009ede:	b94b      	cbnz	r3, 8009ef4 <__swsetup_r+0x7c>
 8009ee0:	89a3      	ldrh	r3, [r4, #12]
 8009ee2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eea:	d003      	beq.n	8009ef4 <__swsetup_r+0x7c>
 8009eec:	4621      	mov	r1, r4
 8009eee:	4628      	mov	r0, r5
 8009ef0:	f000 f884 	bl	8009ffc <__smakebuf_r>
 8009ef4:	89a0      	ldrh	r0, [r4, #12]
 8009ef6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009efa:	f010 0301 	ands.w	r3, r0, #1
 8009efe:	d00a      	beq.n	8009f16 <__swsetup_r+0x9e>
 8009f00:	2300      	movs	r3, #0
 8009f02:	60a3      	str	r3, [r4, #8]
 8009f04:	6963      	ldr	r3, [r4, #20]
 8009f06:	425b      	negs	r3, r3
 8009f08:	61a3      	str	r3, [r4, #24]
 8009f0a:	6923      	ldr	r3, [r4, #16]
 8009f0c:	b943      	cbnz	r3, 8009f20 <__swsetup_r+0xa8>
 8009f0e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f12:	d1c4      	bne.n	8009e9e <__swsetup_r+0x26>
 8009f14:	bd38      	pop	{r3, r4, r5, pc}
 8009f16:	0781      	lsls	r1, r0, #30
 8009f18:	bf58      	it	pl
 8009f1a:	6963      	ldrpl	r3, [r4, #20]
 8009f1c:	60a3      	str	r3, [r4, #8]
 8009f1e:	e7f4      	b.n	8009f0a <__swsetup_r+0x92>
 8009f20:	2000      	movs	r0, #0
 8009f22:	e7f7      	b.n	8009f14 <__swsetup_r+0x9c>
 8009f24:	2000006c 	.word	0x2000006c

08009f28 <_raise_r>:
 8009f28:	291f      	cmp	r1, #31
 8009f2a:	b538      	push	{r3, r4, r5, lr}
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	460d      	mov	r5, r1
 8009f30:	d904      	bls.n	8009f3c <_raise_r+0x14>
 8009f32:	2316      	movs	r3, #22
 8009f34:	6003      	str	r3, [r0, #0]
 8009f36:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009f3e:	b112      	cbz	r2, 8009f46 <_raise_r+0x1e>
 8009f40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f44:	b94b      	cbnz	r3, 8009f5a <_raise_r+0x32>
 8009f46:	4620      	mov	r0, r4
 8009f48:	f000 f830 	bl	8009fac <_getpid_r>
 8009f4c:	462a      	mov	r2, r5
 8009f4e:	4601      	mov	r1, r0
 8009f50:	4620      	mov	r0, r4
 8009f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f56:	f000 b817 	b.w	8009f88 <_kill_r>
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d00a      	beq.n	8009f74 <_raise_r+0x4c>
 8009f5e:	1c59      	adds	r1, r3, #1
 8009f60:	d103      	bne.n	8009f6a <_raise_r+0x42>
 8009f62:	2316      	movs	r3, #22
 8009f64:	6003      	str	r3, [r0, #0]
 8009f66:	2001      	movs	r0, #1
 8009f68:	e7e7      	b.n	8009f3a <_raise_r+0x12>
 8009f6a:	2400      	movs	r4, #0
 8009f6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f70:	4628      	mov	r0, r5
 8009f72:	4798      	blx	r3
 8009f74:	2000      	movs	r0, #0
 8009f76:	e7e0      	b.n	8009f3a <_raise_r+0x12>

08009f78 <raise>:
 8009f78:	4b02      	ldr	r3, [pc, #8]	; (8009f84 <raise+0xc>)
 8009f7a:	4601      	mov	r1, r0
 8009f7c:	6818      	ldr	r0, [r3, #0]
 8009f7e:	f7ff bfd3 	b.w	8009f28 <_raise_r>
 8009f82:	bf00      	nop
 8009f84:	2000006c 	.word	0x2000006c

08009f88 <_kill_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	4d07      	ldr	r5, [pc, #28]	; (8009fa8 <_kill_r+0x20>)
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	4604      	mov	r4, r0
 8009f90:	4608      	mov	r0, r1
 8009f92:	4611      	mov	r1, r2
 8009f94:	602b      	str	r3, [r5, #0]
 8009f96:	f7f8 fc83 	bl	80028a0 <_kill>
 8009f9a:	1c43      	adds	r3, r0, #1
 8009f9c:	d102      	bne.n	8009fa4 <_kill_r+0x1c>
 8009f9e:	682b      	ldr	r3, [r5, #0]
 8009fa0:	b103      	cbz	r3, 8009fa4 <_kill_r+0x1c>
 8009fa2:	6023      	str	r3, [r4, #0]
 8009fa4:	bd38      	pop	{r3, r4, r5, pc}
 8009fa6:	bf00      	nop
 8009fa8:	200009ec 	.word	0x200009ec

08009fac <_getpid_r>:
 8009fac:	f7f8 bc70 	b.w	8002890 <_getpid>

08009fb0 <__swhatbuf_r>:
 8009fb0:	b570      	push	{r4, r5, r6, lr}
 8009fb2:	460c      	mov	r4, r1
 8009fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb8:	2900      	cmp	r1, #0
 8009fba:	b096      	sub	sp, #88	; 0x58
 8009fbc:	4615      	mov	r5, r2
 8009fbe:	461e      	mov	r6, r3
 8009fc0:	da0d      	bge.n	8009fde <__swhatbuf_r+0x2e>
 8009fc2:	89a3      	ldrh	r3, [r4, #12]
 8009fc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009fc8:	f04f 0100 	mov.w	r1, #0
 8009fcc:	bf0c      	ite	eq
 8009fce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009fd2:	2340      	movne	r3, #64	; 0x40
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	6031      	str	r1, [r6, #0]
 8009fd8:	602b      	str	r3, [r5, #0]
 8009fda:	b016      	add	sp, #88	; 0x58
 8009fdc:	bd70      	pop	{r4, r5, r6, pc}
 8009fde:	466a      	mov	r2, sp
 8009fe0:	f000 f848 	bl	800a074 <_fstat_r>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	dbec      	blt.n	8009fc2 <__swhatbuf_r+0x12>
 8009fe8:	9901      	ldr	r1, [sp, #4]
 8009fea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009fee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009ff2:	4259      	negs	r1, r3
 8009ff4:	4159      	adcs	r1, r3
 8009ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ffa:	e7eb      	b.n	8009fd4 <__swhatbuf_r+0x24>

08009ffc <__smakebuf_r>:
 8009ffc:	898b      	ldrh	r3, [r1, #12]
 8009ffe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a000:	079d      	lsls	r5, r3, #30
 800a002:	4606      	mov	r6, r0
 800a004:	460c      	mov	r4, r1
 800a006:	d507      	bpl.n	800a018 <__smakebuf_r+0x1c>
 800a008:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	6123      	str	r3, [r4, #16]
 800a010:	2301      	movs	r3, #1
 800a012:	6163      	str	r3, [r4, #20]
 800a014:	b002      	add	sp, #8
 800a016:	bd70      	pop	{r4, r5, r6, pc}
 800a018:	ab01      	add	r3, sp, #4
 800a01a:	466a      	mov	r2, sp
 800a01c:	f7ff ffc8 	bl	8009fb0 <__swhatbuf_r>
 800a020:	9900      	ldr	r1, [sp, #0]
 800a022:	4605      	mov	r5, r0
 800a024:	4630      	mov	r0, r6
 800a026:	f7fe febd 	bl	8008da4 <_malloc_r>
 800a02a:	b948      	cbnz	r0, 800a040 <__smakebuf_r+0x44>
 800a02c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a030:	059a      	lsls	r2, r3, #22
 800a032:	d4ef      	bmi.n	800a014 <__smakebuf_r+0x18>
 800a034:	f023 0303 	bic.w	r3, r3, #3
 800a038:	f043 0302 	orr.w	r3, r3, #2
 800a03c:	81a3      	strh	r3, [r4, #12]
 800a03e:	e7e3      	b.n	800a008 <__smakebuf_r+0xc>
 800a040:	89a3      	ldrh	r3, [r4, #12]
 800a042:	6020      	str	r0, [r4, #0]
 800a044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a048:	81a3      	strh	r3, [r4, #12]
 800a04a:	9b00      	ldr	r3, [sp, #0]
 800a04c:	6163      	str	r3, [r4, #20]
 800a04e:	9b01      	ldr	r3, [sp, #4]
 800a050:	6120      	str	r0, [r4, #16]
 800a052:	b15b      	cbz	r3, 800a06c <__smakebuf_r+0x70>
 800a054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a058:	4630      	mov	r0, r6
 800a05a:	f000 f81d 	bl	800a098 <_isatty_r>
 800a05e:	b128      	cbz	r0, 800a06c <__smakebuf_r+0x70>
 800a060:	89a3      	ldrh	r3, [r4, #12]
 800a062:	f023 0303 	bic.w	r3, r3, #3
 800a066:	f043 0301 	orr.w	r3, r3, #1
 800a06a:	81a3      	strh	r3, [r4, #12]
 800a06c:	89a3      	ldrh	r3, [r4, #12]
 800a06e:	431d      	orrs	r5, r3
 800a070:	81a5      	strh	r5, [r4, #12]
 800a072:	e7cf      	b.n	800a014 <__smakebuf_r+0x18>

0800a074 <_fstat_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	4d07      	ldr	r5, [pc, #28]	; (800a094 <_fstat_r+0x20>)
 800a078:	2300      	movs	r3, #0
 800a07a:	4604      	mov	r4, r0
 800a07c:	4608      	mov	r0, r1
 800a07e:	4611      	mov	r1, r2
 800a080:	602b      	str	r3, [r5, #0]
 800a082:	f7f8 fc6c 	bl	800295e <_fstat>
 800a086:	1c43      	adds	r3, r0, #1
 800a088:	d102      	bne.n	800a090 <_fstat_r+0x1c>
 800a08a:	682b      	ldr	r3, [r5, #0]
 800a08c:	b103      	cbz	r3, 800a090 <_fstat_r+0x1c>
 800a08e:	6023      	str	r3, [r4, #0]
 800a090:	bd38      	pop	{r3, r4, r5, pc}
 800a092:	bf00      	nop
 800a094:	200009ec 	.word	0x200009ec

0800a098 <_isatty_r>:
 800a098:	b538      	push	{r3, r4, r5, lr}
 800a09a:	4d06      	ldr	r5, [pc, #24]	; (800a0b4 <_isatty_r+0x1c>)
 800a09c:	2300      	movs	r3, #0
 800a09e:	4604      	mov	r4, r0
 800a0a0:	4608      	mov	r0, r1
 800a0a2:	602b      	str	r3, [r5, #0]
 800a0a4:	f7f8 fc6b 	bl	800297e <_isatty>
 800a0a8:	1c43      	adds	r3, r0, #1
 800a0aa:	d102      	bne.n	800a0b2 <_isatty_r+0x1a>
 800a0ac:	682b      	ldr	r3, [r5, #0]
 800a0ae:	b103      	cbz	r3, 800a0b2 <_isatty_r+0x1a>
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	bd38      	pop	{r3, r4, r5, pc}
 800a0b4:	200009ec 	.word	0x200009ec

0800a0b8 <_init>:
 800a0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ba:	bf00      	nop
 800a0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0be:	bc08      	pop	{r3}
 800a0c0:	469e      	mov	lr, r3
 800a0c2:	4770      	bx	lr

0800a0c4 <_fini>:
 800a0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c6:	bf00      	nop
 800a0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ca:	bc08      	pop	{r3}
 800a0cc:	469e      	mov	lr, r3
 800a0ce:	4770      	bx	lr
